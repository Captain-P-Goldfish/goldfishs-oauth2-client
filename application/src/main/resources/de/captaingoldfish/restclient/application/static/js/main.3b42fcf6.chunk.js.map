{"version":3,"sources":["jwt/jwt-parser.js","reportWebVitals.js","logo.svg","media/secure-download-icon.png","base/modal.js","media/certificate.png","base/certificate-list.js","admin/system/application-keystore.js","admin/system/application-truststore.js","admin/system/proxy-management.js","admin/system/system-overview.js","openid/openid-provider.js","jwt/jwt-builder.js","jwt/jwt-handler.js","openid/openid-clients.js","openid/http-settings.js","openid/auth-code-grant/access-token-view.js","openid/auth-code-grant/authorization-code-grant-workflow.js","scim/current-workflow-settings-client.js","openid/openid-client-workflow.js","openid/openid-client-overview.js","tokens/token-category-client.js","tokens/token-store-client.js","tokens/token-store-list.js","tokens/token-category.js","app.js","index.js","scim/scim-client.js","scim/scim-constants.js","scim/scim-component-basics.js","services/utils.js","base/card-base.js","base/form-base.js"],"names":["JwtParser","props","state","isMounted","selectedKey","currentJwt","setState","bind","scimClient","ScimClient","JWT_BUILDER_ENDPOINT","formReference","createRef","onUpdateSuccess","handleKeySelectionSelection","parseJwt","prettyPrintJwtJson","scimComponentBasics","ScimComponentBasics","getOriginalResource","jwtBuilder","id","getCurrentResource","setCurrentResource","resource","this","value","a","document","getElementById","header","JSON","stringify","parse","undefined","split","parts","jwtDetails","jwtPartDecoder","tokenPart","decodeURIComponent","Buffer","from","toString","length","parseHeader","infoMessages","warnMessages","base64Header","base64Body","parsedBody","body","decodedTokenString","json","ex","jwtParts","getJwtParts","isJws","Optional","map","orElse","isJwe","headerToDisplay","details","bodyToDisplay","errors","Fragment","variant","icon","messages","errorMessages","detail","d","onSubmit","ref","sm","title","onSelect","keyInfos","isPresent","keyInfo","Item","eventKey","alias","keyAlgorithm","keyLength","className","style","marginLeft","color","type","onClick","e","show","isLoading","marginTop","Control","name","as","onChange","target","part","index","readOnly","onError","fieldName","getErrors","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Modal","role","tabIndex","message","Button","submitButtonText","onCancel","cancelButtonText","CertificateCardEntry","loaded","scimResourcePath","deleteEntry","showModal","hideModal","loadData","deleteResource","success","onDeleteSuccess","showSpinner","getResource","response","certInfo","ScimConstants","cert","info","certificateTooltip","Tooltip","privateKeyTooltip","Card","border","bg","Header","hasPrivateKey","OverlayTrigger","placement","delay","hide","overlay","Body","Image","src","CertIcon","fluid","Subtitle","Text","issuerDn","subjectDn","sha256Fingerprint","Date","validFrom","toUTCString","validTo","CertificateList","CardDeck","certificateAliases","certAlias","ApplicationKeystore","setAliasSelectionResponse","onAliasSelectionSuccess","copiedResource","aliasSelectionResponse","newKeyInfo","onCreateSuccess","KeystoreUpload","upload","handleCreateResponse","preventDefault","getResourceFromFormReference","createResource","Alert","Form","label","placeholder","Group","Row","Col","span","offset","AliasSelection","save","stateId","val","aliasSelection","aliases","options","KeystoreEntryList","downloadKeystore","listResources","listResponse","Resources","prevProps","prevState","snapshot","aliasDeleted","indexOfAlias","array","attr","i","findIndexOf","splice","downloading","KEYSTORE_ENDPOINT","attributes","base64ApplicationKeystore","applicationKeystore","downloadBase64Data","Badge","href","downloadIcon","ApplicationTruststore","onMergeSuccess","onUploadSuccess","mergedAliases","newAliases","addedCertificateAlias","TruststoreUploadForm","addedAliases","duplicateAliases","duplicateCertificates","truststoreUploadResponse","ifPresent","do","sort","duplicateCertificateAliases","numberOfDuplicateAliases","numberOfDuplicateCerts","CertificateUploadForm","addedAlias","certificateUploadResponse","CertificateEntryList","downloadTruststore","concat","indexOf","TRUSTSTORE_ENDPOINT","base64ApplicationTruststore","applicationTruststore","ProxyManagement","proxyList","addNewProxy","addProxy","removeProxy","startIndex","currentPage","window","MAX_RESULTS","filter","isNaN","count","sortBy","newResources","oldResources","concatedResources","lodash","newProxy","deletedProxyId","proxy","unshift","oldProxy","p","newProxyList","ProxyCardEntry","editMode","setStateValue","spinner","updateResource","resetEditMode","edit","hidden","Table","size","borderless","striped","resourceId","resourceValue","hostname","updateInput","port","username","password","SystemOverview","Tabs","defaultActiveKey","Tab","OpenidProvider","providerList","addNewProvider","removeProvider","serviceProviderConfig","maxResults","provider","newProvider","deletedProviderName","oldProvider","OpenIdProviderCardEntry","Nav","exact","to","marginRight","height","discoveryEndpoint","JwtBuilder","addX5Sha256tHeader","handleSignatureAlgorithmSelection","handleEncryptionAlgorithmSelection","handleContentEncryptionAlgorithmSelection","handleHeaderChange","handleBodyChange","addJwtBody","addDefaultJwtAttributes","addKeyIdToHeader","handleAddSha256Thumbprint","addHeader","jwtInfo","signatureAlgorithms","jwt","enc","encryptionAlgorithms","Exception","iss","aud","sub","iat","getTime","exp","jti","mergedBody","event","isSelected","checked","kidMatchesHeader","kid","Container","Dropdown","DropdownButton","cursor","Check","JwtHandler","ApplicationInfoContext","Consumer","appInfo","OpenidClients","clientList","OPENID_CLIENT_ENDPOINT","addNewClient","removeClient","openIdProviderId","match","params","openIdProviderResourcePath","OPENID_PROVIDER_ENDPOINT","openIdProvider","errorResponse","loadKeystoreInfos","lr","r","keystore","client","newClient","deletedClientId","oldClient","c","clientId","padding","paddingLeft","OpenIdClientCardEntry","authenticationType","forEach","push","selections","selected","clientSecret","signingKeyRef","signatureAlgorithm","audience","decryptionKeyRef","HttpSettings","httpSettings","settings","proxies","originalSetting","enableHostnameVerifier","useHostnameVerifier","console","error","loadProxies","isHidden","requestTimeout","connectionTimeout","socketTimeout","proxyReference","tlsClientAuthAliasReference","AccessTokenView","AccessTokenCollapsible","headerClass","content","AccessTokenDetailsView","accessTokenDetails","remove","onRemove","useState","open","setOpen","Collapse","in","AccessTokenRequestView","AccessTokenResponseView","bodyClass","NameValueList","keyPrefix","nameValueList","requestHeaders","requestParams","responseDetails","responseStatusCode","statusCode","responseHeaders","plainResponse","contentType","toLowerCase","tokenResponse","nameValuePair","AccessTokenResponse","parseJsonContent","isContentTypeJson","includes","stateExtension","Object","keys","key","AuthorizationCodeGrantWorkflow","forceUpdate","loadAuthorizationQueryParameterView","getAuthRequestStatus","loadAuthorizationCodeResponseDetailsView","retrieveAccessTokenDetails","interval","clearInterval","requestDetails","authorizationCodeGrantUrl","setInterval","AUTH_CODE_GRANT_ENDPOINT","stateParam","fromEntries","URL","searchParams","authorizationResponseUrl","authCodeQueryParams","showInfoMessage","ACCESS_TOKEN_REQUEST_ENDPOINT","queryParamsObject","grantType","openIdClientId","parseInt","redirectUri","redirect_uri","authorizationCode","code","marginBottom","AuthorizationCodeGrantDetails","CurrentWorkflowSettingsClient","CURRENT_WORKFLOW_SETTINGS_ENDPOINT","openidClientId","queryParameters","callback","authCodeParameters","patchResource","scope","clientCredentialsParameters","resourceOwnerPasswordParameters","patchOperation","schemas","Operations","op","method","status","OpenidClientWorkflow","context","authCodeGrantType","clientCredentialsGrantType","resourceOwnerGrantType","workflowDetails","CURRENT_WORKFLOW_URI","resetRedirectUri","handleNestedElementChange","handleGrantTypeResponseDetails","removeGrantTypeDetails","wrapperObject","originalRedirectUri","responseDetailsArray","fieldname","detailsObject","detailsIndex","authTypes","display","displayType","handleChange","handleResponse","ResponseDetailsView","AuthorizationCodeGrantForm","intervals","loadAuthorizationRequestDetails","patchWorkflowSettings","getAuthcode","errorMessage","workflowSettingsClient","w","queryParams","updateAuthCodeSettings","ClientCredentialsGrantForm","accessingToken","updateClientCredentialsSettings","ResourceOwnerPasswordCredentialsForm","updateResourceOwnerPasswordCredentialsSettings","OpenidClientOverview","providerId","authCodeRedirectUri","TokenCategoryClient","TOKEN_CATEGORY_ENDPOINT","onSuccess","category","TOKEN_CATEGORY_URI","sortOrder","searchRequest","SEARCH_REQUEST_URI","listResourcesWithPost","TokenStoreClient","TOKEN_STORE_ENDPOINT","token","categoryId","tokenStore","TOKEN_STORE_URI","tokenStoreArray","maxOperations","sendBulkRequest","bulkOperations","bulkRequest","BULK_REQUEST_URI","fetch","BULK_ENDPOINT","headers","ops","deleteSuccessIds","deleteFailedIds","deletedResponseOperations","bulkId","operations","path","TokenStoreList","setErrors","loadedOnce","setloadedOnce","totalResults","setTotalResults","tokenStoreList","setTokenStoreList","addNewTokenStores","newTokenStores","c1","c2","localeCompare","setCategoryEntires","useEffect","v","trim","listTokenStores","TokenStoreTable","updateTokenStore","oldtokenStore","newTokenStore","copiedTokenStores","removeTokenStore","toggleSingleCeckbox","toggleAllCheckboxes","setError","bulkDeleteMode","setBulkDeleteMode","addNew","setAddNew","serviceProviderContext","useContext","ScimServiceProviderContext","deleteTokenStore","bordered","hover","bulkDeleteTokenStores","bulk","successfulDeleteIds","failedDeleteIds","deletedTokenStores","bulkDeleteTokenStore","TokenStoreRow","resourceArray","deleteMode","setDeleteMode","setEditMode","viewTokenMode","setViewTokenMode","setToken","tokenName","setTokenName","wrap","meta","created","toLocaleString","lastModified","createTokenStore","TokenCategoryList","setFilter","tokenCategoryList","setTokenCategoryList","addNewCategories","categoryArray","newTokenCategories","updateCategory","oldCategory","newCategory","copiedList","removeCategory","numberOfEntries","listCategories","onKeyUp","ListGroup","CategoryHeader","addToTokenCategoryList","tokenCategory","CategoryListItem","Content","Pane","setValue","action","onKeyDown","stopPropagation","margin","EditIcon","classNames","DeleteCategoryBlock","deleteCategory","setCategory","saveNewCategory","createCategory","createContext","Application","maxPayloadSize","Navbar","collapseOnSelect","expand","Brand","Toggle","Link","logo","alt","Provider","component","render","route","ReactDOM","resourcePath","resetErrors","handleError","parseErrorResponse","jsonPromise","tmpResponse","parameters","URLSearchParams","url","encodeURIComponent","excludedAttributes","startIndexParam","countParam","filterParam","encodeURI","sortByParam","sortOrderParam","attributesParam","excludedAttributesParam","query","Array","of","join","requestUrl","text","patchBody","scimResource","handleInputField","inputfield","files","toBase64","inputFieldValue","valueAsNumber","formInputFields","current","getElementsByTagName","textAreaFields","formSelectFields","allFormFields","inputField","fieldErrors","CERT_URI","BASE_URL","handleCreateOrUpdateResponse","ifNotPresent","object","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","encoded","result","replace","repeat","onerror","base64Data","filename","filetype","decoded","atob","len","bytes","Uint8Array","charCodeAt","Blob","buffer","downloadAnchor","createElement","createObjectURL","download","click","setTimeout","revokeObjectURL","handler","defaultValue","CardInputField","bubbleEvent","controlId","inputFieldType","inputFieldName","inputFieldPlaceholder","inputFieldErrorMessages","isDisabled","disabled","isReadOnly","FormInputField","Label","column","get","children","ErrorMessageList","FormCheckbox","alignSelf","FormSelectField","labelText","inputFieldOptions","FormFileField","bsCustomFileInput","init","destroy","FormObjectList","custom","FormRadioSelection","displayClass","backgroundClass","ErrorListItem","AlertListMessages","LoadingSpinner","animation","ErrorMessagesAlert","CardControlIcons","CardDateRows","ModifiableCardEntry","HiddenCardEntry","CardRadioSelector","CardListSelector","Collapseable"],"mappings":"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","file":"static/js/main.3b42fcf6.chunk.js","sourcesContent":["import React, {createRef} from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {AlertListMessages, FormInputField, LoadingSpinner} from \"../base/form-base\";\nimport Button from \"react-bootstrap/Button\";\nimport {Optional} from \"../services/utils\";\nimport {Col, Container, Dropdown, DropdownButton, Row} from \"react-bootstrap\";\nimport {ExclamationTriangle} from \"react-bootstrap-icons\";\nimport {GoFlame} from \"react-icons/go\";\nimport {JWT_BUILDER_ENDPOINT} from \"../scim/scim-constants\";\n\nexport default class JwtParser extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isMounted: false,\n            selectedKey: \"\",\n            currentJwt: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n        };\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(JWT_BUILDER_ENDPOINT, this.setState);\n        this.formReference = createRef();\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.handleKeySelectionSelection = this.handleKeySelectionSelection.bind(this);\n        this.parseJwt = this.parseJwt.bind(this);\n        this.prettyPrintJwtJson = this.prettyPrintJwtJson.bind(this);\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.state.jwtBuilder || {id: 1},\n            getCurrentResource: () => this.state.jwtBuilder || {id: 1},\n            setCurrentResource: resource =>\n            {\n            },\n            setState: this.setState,\n            onUpdateSuccess: this.onUpdateSuccess\n        });\n    }\n\n    componentDidMount()\n    {\n        this.setState({isMounted: true});\n    }\n\n    async handleKeySelectionSelection(value)\n    {\n        await this.setState({selectedKey: value})\n        let hiddenKeyIdInputField = document.getElementById(\"jwt-parser-key-id\");\n        hiddenKeyIdInputField.value = value;\n    }\n\n    onUpdateSuccess(resource)\n    {\n        let jwtBuilder = resource;\n        jwtBuilder.header = JSON.stringify(JSON.parse(resource.header), undefined, 4);\n        this.setState({jwtBuilder: jwtBuilder});\n    }\n\n    getJwtParts()\n    {\n        if (this.state.isMounted === false)\n        {\n            return null;\n        }\n        let token = document.getElementById(\"jwt-to-parse\").value;\n        return (token || \"\").split(\".\");\n    }\n\n    parseJwt(parts)\n    {\n        if (this.state.isMounted === false)\n        {\n            return null;\n        }\n        let jwtDetails = {};\n        jwtDetails.parts = parts;\n\n        let jwtPartDecoder = function (tokenPart)\n        {\n            return decodeURIComponent(Buffer.from(tokenPart, \"base64\").toString());\n        };\n\n        if (parts.length === 5)\n        {\n            let base64Header = parts[0];\n            let parseHeader = jwtPartDecoder(base64Header);\n            jwtDetails.header = this.prettyPrintJwtJson(parseHeader);\n            jwtDetails.infoMessages = [\"JWE must be parsed at backend\"];\n            return jwtDetails;\n        }\n\n        if (parts.length !== 3)\n        {\n            jwtDetails.warnMessages = [\"Not a valid JSON Web Token\"];\n            return jwtDetails;\n        }\n\n        let base64Header = parts[0];\n        let base64Body = parts[1];\n\n        let parseHeader = jwtPartDecoder(base64Header);\n        let parsedBody = jwtPartDecoder(base64Body);\n        jwtDetails.header = this.prettyPrintJwtJson(parseHeader);\n        jwtDetails.body = this.prettyPrintJwtJson(parsedBody);\n        return jwtDetails;\n    }\n\n    prettyPrintJwtJson(decodedTokenString)\n    {\n        try\n        {\n            let json = JSON.parse(decodedTokenString);\n            return JSON.stringify(json, null, 2);\n        } catch (ex)\n        {\n            return decodedTokenString;\n        }\n    }\n\n    render()\n    {\n        let jwtParts = this.getJwtParts();\n        let jwtDetails = this.parseJwt(jwtParts) || {};\n        let isJws = new Optional(jwtParts).map(parts => parts.length === 3).orElse(false);\n        let isJwe = new Optional(jwtParts).map(parts => parts.length === 5).orElse(false);\n\n        let headerToDisplay = new Optional(this.state.jwtBuilder).map(details => details.header).orElse(\n            jwtDetails.header);\n        let bodyToDisplay = new Optional(this.state.jwtBuilder).map(details => details.body).orElse(jwtDetails.body);\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                   messages={errors.errorMessages || new Optional(errors.detail).map(d => [d]).orElse(\n                                       [])} />\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <AlertListMessages icon={<GoFlame />} variant={\"danger\"}\n                                       messages={(this.state.errorMessages || []).errors} />\n                    <AlertListMessages icon={<ExclamationTriangle />} variant={\"warning\"}\n                                       messages={jwtDetails.warnMessages} />\n                    <AlertListMessages variant={\"info\"} messages={jwtDetails.infoMessages} />\n                    <Container>\n                        <Row>\n                            <Col sm={3}>\n                                <Dropdown>\n                                    <DropdownButton id={\"jwt-parser-aliases\"}\n                                                    title={\"available keys\"}\n                                                    onSelect={this.handleKeySelectionSelection}>\n                                        {\n                                            new Optional(this.props.keyInfos).isPresent() &&\n                                            this.props.keyInfos.map((keyInfo) =>\n                                            {\n                                                return <Dropdown.Item key={keyInfo.alias}\n                                                                      eventKey={keyInfo.alias}>{keyInfo.alias + \" (\"\n                                                                                                + keyInfo.keyAlgorithm\n                                                                                                + \"-\"\n                                                                                                + keyInfo.keyLength\n                                                                                                + \"-bit)\"}</Dropdown.Item>\n                                            })\n                                        }\n                                    </DropdownButton>\n                                    <p>\n                                        selected key:\n                                        <span className={\"code\"}\n                                              style={{marginLeft: \"15px\", color: \"lightgreen\"}}>\n                                        {this.state.selectedKey}\n                                    </span>\n                                    </p>\n                                </Dropdown>\n\n                                {\n                                    (isJwe === true || isJws === true) &&\n                                    <Button id={\"parse-jwt\"} type=\"submit\" onClick={e =>\n                                    {\n                                        this.setState({jwtBuilder: undefined})\n                                    }\n                                    }>\n                                        <LoadingSpinner show={this.state.isLoading} />\n                                        {\n                                            isJws === true &&\n                                            <span>Verify Signature</span>\n                                        }\n                                        {\n                                            isJwe === true &&\n                                            <span>Decrypt</span>\n                                        }\n                                    </Button>\n                                }\n                                {\n                                    this.state.jwtBuilder && isJws &&\n                                    <h5 style={{color: \"lightgreen\", marginTop: \"50px\"}}>Signature valid</h5>\n                                }\n                                {\n                                    this.state.jwtBuilder && isJwe &&\n                                    <h5 style={{color: \"lightgreen\", marginTop: \"50px\"}}>Successfully decrypted</h5>\n                                }\n                            </Col>\n                            <Col sm={4} className={\"form-group\"}>\n                                <Form.Control id={\"jwt-to-parse\"}\n                                              name={\"jwt\"}\n                                              sm={12}\n                                              as={\"textarea\"}\n                                              value={this.state.currentJwt}\n                                              onChange={e => this.setState({\n                                                  currentJwt: e.target.value,\n                                                  jwtBuilder: undefined\n                                              })} />\n                                {\n                                    <div id={\"jwt-input\"}\n                                         className={\"jwt-overlay\"}>\n                                        {\n                                            (jwtDetails.parts || []).map((part, index) =>\n                                            {\n                                                return <span key={\"jwt-part-\" + index}\n                                                             className={\"jwt-part jwt-part-\" + (index <= 4 ? index\n                                                                                                           : \"over\")}>\n                                                {\n                                                    index > 0 &&\n                                                    <span className={\"jwt-dot-separator\"}>\n                                                        .<br />\n                                                    </span>\n                                                }\n                                                    {part}\n                                            </span>\n                                            })\n                                        }\n                                    </div>\n                                }\n                            </Col>\n                            <Col sm={5}>\n                                <FormInputField id={\"jwt-parser-key-id\"}\n                                                name=\"keyId\"\n                                                readOnly={true}\n                                                type=\"hidden\"\n                                                value={this.state.selectedKey}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                                <FormInputField id={\"jwt-parsed-header\"}\n                                                name=\"header\"\n                                                className={\"jwt-part-0\"}\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                value={headerToDisplay}\n                                                onChange={() =>\n                                                {/*do nothing*/\n                                                }}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                                <FormInputField id={\"jwt-parsed-body\"}\n                                                name=\"body\"\n                                                className={\"jwt-part-1\"}\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                value={bodyToDisplay}\n                                                onChange={() =>\n                                                {/*do nothing*/\n                                                }}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n","const reportWebVitals = onPerfEntry =>\n{\n    if (onPerfEntry && onPerfEntry instanceof Function)\n    {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) =>\n        {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/secure-download-icon.a0cef591.png\";","import React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nexport default class Modal extends React.Component\n{\n\n    render()\n    {\n        return (\n            this.props.show === true &&\n            <div id={this.props.id} role=\"dialog\" aria-modal=\"true\" tabIndex=\"-1\" className={\"card-modal\"}>\n                <div className={\"card-modal-content\"}>\n                    <h5 id={this.props.id + \"-header\"} className={\"card-title\"}>\n                        {this.props.title}\n                    </h5>\n                    <p id={this.props.id + \"-text\"}>{this.props.message}</p>\n                    <Button id={this.props.id + \"-button-accept\"}\n                            role=\"accept\"\n                            className={\"left\"}\n                            variant={this.props.variant === undefined ? \"info\" : this.props.variant}\n                            type={\"button\"}\n                            onClick={this.props.onSubmit}>\n                        {this.props.submitButtonText}\n                    </Button>\n                    <Button id={this.props.id + \"-button-cancel\"}\n                            role=\"cancel\"\n                            className={\"right\"}\n                            variant=\"secondary\"\n                            type={\"button\"}\n                            onClick={this.props.onCancel}>\n                        {this.props.cancelButtonText}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/certificate.3484f279.png\";","import React from \"react\";\nimport {Card, CardDeck, Image, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport Modal from \"./modal\";\nimport {AwardFill, KeyFill, TrashFill} from \"react-bootstrap-icons\";\nimport CertIcon from \"../media/certificate.png\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimClient from \"../scim/scim-client\";\nimport * as ScimConstants from \"../scim/scim-constants\";\nimport {LoadingSpinner} from \"./form-base\";\nimport {Optional} from \"../services/utils\";\n\n\nexport class CertificateCardEntry extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {loaded: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.deleteEntry = this.deleteEntry.bind(this);\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    async deleteEntry()\n    {\n        let response = await this.scimClient.deleteResource(this.props.alias);\n\n        if (response.success)\n        {\n            if (this.props.onDeleteSuccess !== undefined)\n            {\n                this.props.onDeleteSuccess(this.props.alias);\n            }\n        }\n        else\n        {\n            // TODO\n        }\n    }\n\n    async loadData()\n    {\n        this.setState({showSpinner: true});\n\n        let response = await this.scimClient.getResource(this.props.alias);\n\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let certInfo = resource[ScimConstants.CERT_URI];\n                this.setState({\n                    loaded: true,\n                    cert: certInfo,\n                    certInfo: certInfo.info\n                });\n            });\n        }\n        else\n        {\n            // TODO\n        }\n    }\n\n    showModal()\n    {\n        this.setState({showModal: true})\n    }\n\n    hideModal()\n    {\n        this.setState({showModal: false})\n    }\n\n    render()\n    {\n        const certificateTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                Certificate\n            </Tooltip>\n        );\n        const privateKeyTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                Private Key and Certificate\n            </Tooltip>\n        );\n\n        return (\n            <Card id={\"alias-card-\" + this.props.alias} key={this.props.alias}\n                  border={\"warning\"} bg={\"dark\"} className={\"alias-card\"}>\n                <Modal id={\"delete-dialog-\" + this.props.alias}\n                       show={this.state.showModal}\n                       variant=\"danger\"\n                       title={\"Delete '\" + this.props.alias + \"'\"}\n                       message=\"Are you sure?\"\n                       submitButtonText=\"delete\"\n                       onSubmit={this.deleteEntry}\n                       cancelButtonText=\"cancel\"\n                       onCancel={this.hideModal}>\n                </Modal>\n                <Card.Header id={\"alias-name-\" + this.props.alias}>\n                    {this.props.alias} {new Optional(this.props.keyInfo).map(info =>\n                    <React.Fragment>\n                        <br />\n                        (\n                        <span className={\"keyInfo\"}>\n                            {info.keyAlgorithm + \": \"\n                             + info.keyLength + \"-bit \"}\n                            {\n                                info.hasPrivateKey &&\n                                <OverlayTrigger placement=\"right\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={privateKeyTooltip}>\n                                    <KeyFill />\n                                </OverlayTrigger>\n                            }\n                            {\n                                !info.hasPrivateKey &&\n                                <OverlayTrigger placement=\"right\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={certificateTooltip}>\n                                    <AwardFill />\n                                </OverlayTrigger>\n                            }\n                        </span>\n                        )\n                    </React.Fragment>\n                )\n                                                                        .orElse(null)}\n                    <div className=\"card-control-icons\">\n                        <LoadingSpinner show={this.state.isLoading} />\n                        <TrashFill id={\"delete-icon-\" + this.props.alias} onClick={this.showModal} />\n                    </div>\n                </Card.Header>\n                <Card.Body>\n                    {\n                        this.state.loaded === false &&\n                        <React.Fragment>\n                            <div className={\"load-certificate-icon-container\"}>\n                                <Image src={CertIcon} className={\"load-certificate-icon\"} fluid /> <br />\n                                <Button id={\"load-certificate-data-button-for-\" + this.props.alias}\n                                        className={\"card-load-icon\"}\n                                        type={\"button\"}\n                                        onClick={this.loadData}>\n                                    Load Data\n                                </Button>\n                            </div>\n                        </React.Fragment>\n                    }\n                    {\n                        this.state.loaded === true &&\n                        <React.Fragment>\n                            <Card.Subtitle>Issuer</Card.Subtitle>\n                            <Card.Text id={\"issuer-dn-\" + this.props.alias}>\n                                {this.state.certInfo.issuerDn}\n                            </Card.Text>\n                            <Card.Subtitle>Subject</Card.Subtitle>\n                            <Card.Text id={\"subject-dn-\" + this.props.alias}>\n                                {this.state.certInfo.subjectDn}\n                            </Card.Text>\n                            <Card.Subtitle>SHA-256 Fingerprint</Card.Subtitle>\n                            <Card.Text id={\"sha-256-\" + this.props.alias}>\n                                {this.state.certInfo.sha256Fingerprint}\n                            </Card.Text>\n                            <Card.Subtitle>Valid From</Card.Subtitle>\n                            <Card.Text id={\"valid-from-\" + this.props.alias}>\n                                {new Date(this.state.certInfo.validFrom).toUTCString()}\n                            </Card.Text>\n                            <Card.Subtitle>Valid Until</Card.Subtitle>\n                            <Card.Text id={\"valid-until-\" + this.props.alias}>\n                                {new Date(this.state.certInfo.validTo).toUTCString()}\n                            </Card.Text>\n                        </React.Fragment>\n                    }\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default function CertificateList(props)\n{\n\n    return (\n        <React.Fragment>\n            <CardDeck id=\"keystore-certificate-entries\">\n                {\n                    props.certificateAliases !== undefined &&\n                    props.certificateAliases.map((certAlias) =>\n                    {\n                        return <CertificateCardEntry key={certAlias}\n                                                     scimResourcePath={props.scimResourcePath}\n                                                     alias={certAlias}\n                                                     onDeleteSuccess={props.onDeleteSuccess} />\n                    })\n                }\n            </CardDeck>\n        </React.Fragment>\n    );\n}","import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {ErrorMessagesAlert, FormFileField, FormInputField, FormSelectField, LoadingSpinner} from \"../../base/form-base\";\nimport {downloadBase64Data, Optional} from \"../../services/utils\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {Alert, Badge, CardDeck, Image} from \"react-bootstrap\";\nimport downloadIcon from \"../../media/secure-download-icon.png\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {CertificateCardEntry} from \"../../base/certificate-list\";\nimport {KEYSTORE_ENDPOINT} from \"../../scim/scim-constants\";\n\n\nexport default class ApplicationKeystore extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.scimResourcePath = \"/scim/v2/Keystore\";\n        this.state = {};\n        this.setAliasSelectionResponse = this.setAliasSelectionResponse.bind(this);\n        this.onAliasSelectionSuccess = this.onAliasSelectionSuccess.bind(this);\n    }\n\n    setAliasSelectionResponse(resource)\n    {\n        let copiedResource = JSON.parse(JSON.stringify(resource));\n        this.setState({aliasSelectionResponse: copiedResource})\n    }\n\n    onAliasSelectionSuccess(resource)\n    {\n        this.setState({newKeyInfo: {value: resource.keyInfos[0]}})\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <KeystoreUpload scimResourcePath={this.scimResourcePath}\n                                setAliasSelectionResponse={this.setAliasSelectionResponse} />\n                <AliasSelection scimResourcePath={this.scimResourcePath}\n                                aliasSelectionResponse={this.state.aliasSelectionResponse}\n                                onCreateSuccess={this.onAliasSelectionSuccess} />\n                <KeystoreEntryList scimResourcePath={this.scimResourcePath}\n                                   newKeyInfo={this.state.newKeyInfo} />\n            </React.Fragment>\n        )\n    }\n}\n\nclass KeystoreUpload extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            success: false,\n            showSpinner: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.props.setAliasSelectionResponse(resource);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2>Keystore Upload</h2>\n                <Alert id={\"uploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Keystore was successfully uploaded</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"uploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"fileUpload.keystoreFile\"\n                                   label=\"Keystore File\"\n                                   placeholder=\"Select a keystore file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"fileUpload.keystorePassword\"\n                                    label=\"Keystore Password\"\n                                    type=\"password\"\n                                    placeholder=\"Keystore Password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"upload\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Upload\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass AliasSelection extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {success: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.save = this.save.bind(this);\n    }\n\n    async save(e)\n    {\n        e.preventDefault();\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.props.onCreateSuccess(resource);\n                this.setState({newKeyInfo: resource.keyInfos[0]});\n            })\n        }\n        else\n        {\n            this.setState({newKeyInfo: undefined});\n        }\n    }\n\n    render()\n    {\n        let stateId = new Optional(this.props.aliasSelectionResponse).map(val => val.aliasSelection)\n                                                                     .map(val => val.stateId)\n                                                                     .orElse(0);\n        let aliases = new Optional(this.props.aliasSelectionResponse).map(val => val.aliasSelection)\n                                                                     .map(val => val.aliases)\n                                                                     .orElse([]);\n        let className = new Optional(this.props.aliasSelectionResponse).map(val => \"\").orElse(\"disabled\")\n        return (\n            <React.Fragment>\n                <h2>Alias Selection</h2>\n                <Alert id={\"aliasSelectionForm-alert-success\"}\n                       variant={\"success\"}\n                       show={new Optional(this.state.newKeyInfo).isPresent()}>\n                    <Form.Text><GoThumbsup /> Entry with alias\n                                              '{new Optional(this.state.newKeyInfo).map(info => info.alias)\n                                                                                   .orElse(\"\")}'\n                                              was successfully added</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"aliasSelectionForm\"} onSubmit={this.save} ref={this.formReference} className={className}>\n                    <FormInputField name=\"aliasSelection.stateId\"\n                                    type=\"hidden\"\n                                    value={stateId}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormSelectField name=\"aliasSelection.aliases\"\n                                     label=\"Alias\"\n                                     options={aliases}\n                                     onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"aliasSelection.aliasOverride\"\n                                    label=\"Alias Override\"\n                                    type=\"text\"\n                                    placeholder=\"Store under another alias\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"aliasSelection.privateKeyPassword\"\n                                    label=\"Private Key Password\"\n                                    type=\"password\"\n                                    placeholder=\"Optional if password is identical to keystore password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"save\"} type=\"Save\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass KeystoreEntryList extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {keyInfos: []};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.onDeleteSuccess = this.onDeleteSuccess.bind(this);\n        this.downloadKeystore = this.downloadKeystore.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let response = await this.scimClient.listResources();\n        if (response.success)\n        {\n            response.resource.then(listResponse =>\n            {\n                this.setState({\n                    keyInfos: new Optional(listResponse.Resources[0]).map(val => val.keyInfos)\n                                                                     .orElse([])\n                })\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.newKeyInfo !== this.props.newKeyInfo &&\n            new Optional(this.props.newKeyInfo).map(info => info.value).isPresent())\n        {\n            this.setState(\n                {\n                    keyInfos: [...this.state.keyInfos, this.props.newKeyInfo.value],\n                    aliasDeleted: undefined\n                });\n\n        }\n    }\n\n    onDeleteSuccess(alias)\n    {\n        let keyInfos = this.state.keyInfos;\n\n        let findIndexOf = function findWithAttr(array, attr, value)\n        {\n            for (var i = 0; i < array.length; i += 1)\n            {\n                if (array[i][attr] === value)\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        const indexOfAlias = findIndexOf(keyInfos, \"alias\", alias)\n        if (indexOfAlias > -1)\n        {\n            keyInfos.splice(indexOfAlias, 1);\n        }\n        this.setState({\n            aliasDeleted: alias,\n            keyInfos: keyInfos\n        })\n    }\n\n    downloadKeystore(e)\n    {\n        e.preventDefault();\n        this.setState({downloading: true})\n        this.scimClient.getResource(\"1\", KEYSTORE_ENDPOINT, {attributes: \"applicationKeystore\"}).then(response =>\n        {\n            this.setState({downloading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    let base64ApplicationKeystore = resource.applicationKeystore;\n                    downloadBase64Data(base64ApplicationKeystore, \"application-keystore-pw-123456.p12\", \"p12\")\n                })\n            }\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2 id=\"application-certificate-info-header\">\n                    <p>Application Keystore Infos</p>\n                    <Badge className=\"download-keystore-icon\">\n                        <a id={\"keystore-download-link\"} href={\"/#\"} onClick={this.downloadKeystore}>\n                            <LoadingSpinner show={this.state.downloading || false} />\n                            <Image src={downloadIcon} fluid />\n                            <p>Download</p>\n                        </a>\n                    </Badge>\n                </h2>\n                <Alert id=\"card-list-infos-alert\"\n                       variant={\"info\"}>\n                    <Form.Text>\n                        <InfoCircle /> Application Keystore contains\n                                       \"{new Optional(this.state.keyInfos).map(val => val.length)\n                                                                          .orElse(0)}\"\n                                       entries\n                    </Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={this.state.aliasDeleted !== undefined}>\n                    <Form.Text>\n                        <GoThumbsup /> Key entry for alias \"{this.state.aliasDeleted}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <CardDeck id=\"keystore-certificate-entries\">\n                    {\n                        this.state.keyInfos.map(keyInfo =>\n                        {\n                            return <CertificateCardEntry key={keyInfo.alias}\n                                                         scimResourcePath={this.props.scimResourcePath}\n                                                         alias={keyInfo.alias}\n                                                         keyInfo={keyInfo}\n                                                         onDeleteSuccess={this.onDeleteSuccess} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n}","import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {ErrorMessagesAlert, FormFileField, FormInputField, LoadingSpinner} from \"../../base/form-base\";\nimport {downloadBase64Data, Optional} from \"../../services/utils\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {Alert, Badge, Image} from \"react-bootstrap\";\nimport downloadIcon from \"../../media/secure-download-icon.png\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\nimport {GoFlame, GoThumbsup} from \"react-icons/go\";\nimport CertificateList from \"../../base/certificate-list\";\nimport {TRUSTSTORE_ENDPOINT} from \"../../scim/scim-constants\";\n\n\nexport default class ApplicationTruststore extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.scimResourcePath = \"/scim/v2/Truststore\";\n        this.state = {};\n        this.onMergeSuccess = this.onMergeSuccess.bind(this);\n        this.onUploadSuccess = this.onUploadSuccess.bind(this);\n    }\n\n    onMergeSuccess(mergedAliases)\n    {\n        this.setState({newAliases: mergedAliases});\n    }\n\n    onUploadSuccess(addedCertificateAlias)\n    {\n        this.setState({newAliases: [addedCertificateAlias]});\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <TruststoreUploadForm scimResourcePath={this.scimResourcePath}\n                                      onMergeSuccess={this.onMergeSuccess} />\n                <CertificateUploadForm scimResourcePath={this.scimResourcePath}\n                                       aliasSelectionResponse={this.state.aliasSelectionResponse}\n                                       onUploadSuccess={this.onUploadSuccess} />\n                <CertificateEntryList scimResourcePath={this.scimResourcePath}\n                                      newAliases={this.state.newAliases} />\n            </React.Fragment>\n        )\n    }\n}\n\nclass TruststoreUploadForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            success: false,\n            showSpinner: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        this.setState({\n            addedAliases: [],\n            duplicateAliases: [],\n            duplicateCertificates: []\n        });\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let truststoreUploadResponse = resource.truststoreUploadResponse;\n\n                let addedAliases;\n                let duplicateAliases;\n                let duplicateCertificates;\n\n                new Optional(truststoreUploadResponse).ifPresent(response =>\n                {\n                    addedAliases = response.aliases;\n                    duplicateAliases = new Optional(response.duplicateAliases).do(val => val.sort())\n                                                                              .orElse([]);\n                    duplicateCertificates = new Optional(response.duplicateCertificateAliases).do(val => val.sort())\n                                                                                              .orElse([])\n                })\n\n                this.setState({\n                    addedAliases: new Optional(addedAliases).orElse([]),\n                    duplicateAliases: new Optional(duplicateAliases).orElse([]),\n                    duplicateCertificates: new Optional(duplicateCertificates).orElse([])\n                });\n\n                this.props.onMergeSuccess(addedAliases);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        let numberOfDuplicateAliases = new Optional(this.state.duplicateAliases).map(val => val.length).orElse(0);\n        let numberOfDuplicateCerts = new Optional(this.state.duplicateCertificates).map(val => val.length).orElse(0);\n\n        return (\n            <React.Fragment>\n                <h2>Truststore Upload</h2>\n                <Alert id={\"truststoreUploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Truststore was successfully merged</Form.Text>\n                </Alert>\n                <Alert id={\"upload-form-alert-duplicate-aliases\"} variant={\"warning\"}\n                       show={numberOfDuplicateAliases > 0}>\n                    <Form.Text>\n                        <GoFlame /> The following aliases could not be added because the alias is\n                                    duplicated.<br />\n                                    Number of not added aliases: {numberOfDuplicateAliases} <br />\n                                    [{this.state.duplicateAliases}]\n                    </Form.Text>\n                </Alert>\n                <Alert id={\"upoad-form-alert-duplicate-certificates\"} variant={\"warning\"}\n                       show={numberOfDuplicateCerts > 0}>\n                    <Form.Text>\n                        <GoFlame /> The following aliases could not be added because the certificate is already\n                                    present: [{this.state.duplicateCertificates}]\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"truststoreUploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"truststoreUpload.truststoreFile\"\n                                   label=\"Truststore File\"\n                                   placeholder=\"Select a truststore file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)}\n                    />\n                    <FormInputField name=\"truststoreUpload.truststorePassword\"\n                                    label=\"Truststore Password\"\n                                    type=\"password\"\n                                    placeholder=\"Truststore Password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"uploadTruststore\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Upload\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass CertificateUploadForm extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {success: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        this.setState({\n            addedAlias: undefined\n        });\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let certificateUploadResponse = resource.certificateUploadResponse;\n\n                let addedAlias;\n                new Optional(certificateUploadResponse).ifPresent(response =>\n                {\n                    addedAlias = response.alias;\n                })\n\n                this.setState({\n                    addedAlias: addedAlias\n                });\n\n                this.props.onUploadSuccess(addedAlias);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2>Certificate Upload</h2>\n                <Alert id={\"certificateUploadForm-alert-success\"}\n                       variant={\"success\"}\n                       show={new Optional(this.state.addedAlias).isPresent()}>\n                    <Form.Text><GoThumbsup /> Entry with alias '{this.state.addedAlias}' was successfully\n                                              added</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"certificateUploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"certificateUpload.certificateFile\"\n                                   label=\"Certificate File\"\n                                   placeholder=\"Select a certificate file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"certificateUpload.alias\"\n                                    label=\"Alias\"\n                                    placeholder=\"Certificate Alias\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"uploadCertificate\"} type=\"Save\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass CertificateEntryList extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {aliases: []};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.onDeleteSuccess = this.onDeleteSuccess.bind(this);\n        this.downloadTruststore = this.downloadTruststore.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let response = await this.scimClient.listResources();\n        if (response.success)\n        {\n            response.resource.then(listResponse =>\n            {\n                let aliases = new Optional(listResponse.Resources[0]).map(val => val.aliases).orElse([]);\n                aliases.sort();\n                this.setState({\n                    aliases: aliases\n                })\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (new Optional(this.props.newAliases).isPresent() && prevProps.newAliases !== this.props.newAliases)\n        {\n            let aliases = this.state.aliases.concat(this.props.newAliases);\n            aliases.sort();\n            this.setState({aliases: aliases, aliasDeleted: undefined});\n        }\n    }\n\n    onDeleteSuccess(alias)\n    {\n        let aliases = this.state.aliases;\n        const indexOfAlias = aliases.indexOf(alias)\n        if (indexOfAlias > -1)\n        {\n            aliases.splice(indexOfAlias, 1);\n        }\n        this.setState({\n            aliasDeleted: alias,\n            aliases: aliases\n        })\n    }\n\n    downloadTruststore(e)\n    {\n        e.preventDefault();\n        this.setState({downloading: true})\n        this.scimClient.getResource(\"1\", TRUSTSTORE_ENDPOINT, {attributes: \"applicationTruststore\"}).then(response =>\n        {\n            this.setState({downloading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    let base64ApplicationTruststore = resource.applicationTruststore;\n                    downloadBase64Data(base64ApplicationTruststore, \"application-truststore-pw-123456.jks\", \"jks\")\n                })\n            }\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2 id=\"application-certificate-info-header\">\n                    <p>Application Truststore Infos</p>\n                    <Badge className=\"download-keystore-icon\">\n                        <a id={\"truststore-download-link\"} href={\"/#\"} onClick={this.downloadTruststore}>\n                            <LoadingSpinner show={this.state.downloading || false} />\n                            <Image src={downloadIcon} fluid />\n                            <p>Download</p>\n                        </a>\n                    </Badge>\n                </h2>\n                <Alert id=\"card-list-infos-alert\"\n                       variant={\"info\"}>\n                    <Form.Text>\n                        <InfoCircle /> Application Truststore contains\n                                       \"{new Optional(this.state.aliases).map(val => val.length)\n                                                                         .orElse(0)}\"\n                                       entries\n                    </Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={this.state.aliasDeleted !== undefined}>\n                    <Form.Text>\n                        <GoThumbsup /> Key entry for alias \"{this.state.aliasDeleted}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <CertificateList certificateAliases={this.state.aliases}\n                                 scimResourcePath={this.props.scimResourcePath}\n                                 onDeleteSuccess={this.onDeleteSuccess} />\n            </React.Fragment>\n        );\n    }\n}","import React, {createRef} from \"react\";\nimport ScimClient from \"../../scim/scim-client\";\nimport Modal from \"../../base/modal\";\nimport {Alert, Card, CardDeck, Table} from \"react-bootstrap\";\nimport {FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {Optional} from \"../../services/utils\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    ErrorMessagesAlert,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../../base/form-base\";\nimport * as lodash from \"lodash\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimComponentBasics from \"../../scim/scim-component-basics\";\n\n\nexport default class ProxyManagement extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            proxyList: [],\n            showSpinner: false\n        }\n        this.scimResourcePath = \"/scim/v2/Proxy\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewProxy = this.addNewProxy.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.addProxy = this.addProxy.bind(this);\n        this.removeProxy = this.removeProxy.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = new Optional((this.state.currentPage * window.MAX_RESULTS) + 1).filter(val => !isNaN(val))\n                                                                                        .orElse(1);\n        let count = window.MAX_RESULTS;\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'id'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.proxyList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    proxyList: concatedResources,\n                    errors: {},\n                    newProxy: undefined,\n                    deletedProxyId: undefined\n                })\n            })\n        });\n    }\n\n    addNewProxy()\n    {\n        let proxyList = [...this.state.proxyList];\n        const resource = proxyList.filter(proxy => proxy.id === undefined);\n        if (resource.length === 0)\n        {\n            proxyList.unshift({});\n            this.setState({\n                proxyList: proxyList,\n                newProxy: undefined,\n                deletedProxyId: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newProxy: undefined,\n                deletedProxyId: undefined\n            })\n        }\n    }\n\n    onUpdateSuccess(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        let oldProxy = lodash.find(proxyList, p => p.id === proxy.id);\n        lodash.merge(oldProxy, proxy);\n        this.setState({\n            proxyList: proxyList,\n            newProxy: undefined,\n            deletedProxyId: undefined\n        })\n    }\n\n    onCreateSuccess(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        let oldProxy = lodash.find(proxyList, p => p.id === undefined);\n        lodash.merge(oldProxy, proxy);\n        this.setState({\n            proxyList: proxyList,\n            newProxy: oldProxy,\n            deletedProxyId: undefined\n        })\n    }\n\n    addProxy(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        proxyList.unshift(proxy);\n\n        this.setState({\n            proxyList: proxyList,\n            newProxy: undefined,\n            deletedProxyId: undefined\n        })\n    }\n\n    removeProxy(id)\n    {\n        let proxyList = [...this.state.proxyList];\n        const newProxyList = proxyList.filter(proxy => proxy.id !== id)\n        this.setState({\n            proxyList: newProxyList,\n            newProxy: undefined,\n            deletedProxyId: id,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <p className={\"add-new-resource\"} onClick={this.addNewProxy}>\n                    <span className={\"add-new-resource\"}>Add new Proxy <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>Proxies</h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newProxy).isPresent()}>\n                    <Form.Text><GoThumbsup /> Proxy with id\n                                              '{new Optional(this.state.newProxy).map(proxy => proxy.id)\n                                                                                 .orElse(-1)}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedProxyId).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> Proxy with ID \"{this.state.deletedProxyId}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.proxyList.map((proxy) =>\n                        {\n                            return <ProxyCardEntry key={new Optional(proxy.id).orElse(\"new\")}\n                                                   scimResourcePath={this.scimResourcePath}\n                                                   proxy={proxy}\n                                                   onCreateSuccess={this.onCreateSuccess}\n                                                   onUpdateSuccess={this.onUpdateSuccess}\n                                                   onDeleteSuccess={this.removeProxy} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n\n}\n\nclass ProxyCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.proxy).map(val => val.id).map(val => false).orElse(true),\n            proxy: JSON.parse(JSON.stringify(props.proxy))\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.proxy,\n            getCurrentResource: () => this.state.proxy,\n            setCurrentResource: resource => this.setState({proxy: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n    render()\n    {\n        return (\n            <Card id={\"proxy-card-\" + this.state.proxy.id} key={this.state.proxy.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card provider-card\"}>\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.proxy.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete Proxy with ID '\" + this.state.proxy.id + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success-\" + this.state.proxy.id} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> Proxy was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"proxy-card-header-\" + this.state.proxy.id}>\n                        <div className={\"card-name-header\"}>\n                            {\n                                this.state.proxy.id !== undefined &&\n                                <h5>Proxy '{this.state.proxy.id}'</h5>\n                            }\n                        </div>\n                        <CardControlIcons resource={this.state.proxy}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.scimComponentBasics.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <ModifiableCardEntry header={\"Hostname\"}\n                                                         name={\"hostname\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.hostname}\n                                                         placeholder={\"The URL to the OpenID Providers discovery endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Port\"}\n                                                         name={\"port\"}\n                                                         type={\"number\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.port}\n                                                         placeholder={\"The port number of the Proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Username\"}\n                                                         name={\"username\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.username}\n                                                         placeholder={\"The username to authenticate at the proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Password\"}\n                                                         name={\"password\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.password}\n                                                         placeholder={\"The password to authenticate at the Proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardDateRows resource={this.state.proxy} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n","import {Tab, Tabs} from \"react-bootstrap\";\nimport ApplicationKeystore from \"./application-keystore\";\nimport ApplicationTruststore from \"./application-truststore\";\nimport ProxyManagement from \"./proxy-management\";\n\nexport default function SystemOverview()\n{\n    return (\n        <Tabs defaultActiveKey=\"keystore\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"keystore\" title=\"Application Keystore\">\n                <ApplicationKeystore />\n            </Tab>\n            <Tab eventKey=\"truststore\" title=\"Application Truststore\">\n                <ApplicationTruststore />\n            </Tab>\n            <Tab eventKey=\"proxies\" title=\"Proxies\">\n                <ProxyManagement />\n            </Tab>\n        </Tabs>\n    )\n}","import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Optional} from \"../services/utils\";\nimport {Alert, Card, CardDeck, Nav, Table} from \"react-bootstrap\";\nimport {ArrowRightCircle, FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    ErrorMessagesAlert,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../base/form-base\";\nimport * as lodash from \"lodash\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport Modal from \"../base/modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {CardInputField} from \"../base/card-base\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\nexport default class OpenidProvider extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            errors: {},\n            providerList: [],\n            currentPage: 0\n        };\n        this.scimResourcePath = \"/scim/v2/OpenIdProvider\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewProvider = this.addNewProvider.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.removeProvider = this.removeProvider.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = (this.state.currentPage * this.props.serviceProviderConfig.filter.maxResults) + 1;\n        let count = this.props.serviceProviderConfig.filter.maxResults;\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'name'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.providerList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    providerList: concatedResources,\n                    errors: {}\n                })\n            })\n        });\n    }\n\n    addNewProvider()\n    {\n        let providerList = [...this.state.providerList];\n        const resource = providerList.filter(provider => provider.id === undefined);\n        if (resource.length === 0)\n        {\n            providerList.unshift({});\n            this.setState({\n                providerList: providerList,\n                newProvider: undefined,\n                deletedProviderName: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newProvider: undefined,\n                deletedProviderName: undefined\n            })\n        }\n    }\n\n    onUpdateSuccess(provider)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = lodash.find(providerList, p => p.id === provider.id);\n        lodash.merge(oldProvider, provider);\n        this.setState({\n            providerList: providerList,\n            newProvider: undefined,\n            deletedProviderName: undefined\n        })\n    }\n\n    onCreateSuccess(provider)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = lodash.find(providerList, p => p.id === undefined);\n        lodash.merge(oldProvider, provider);\n        this.setState({\n            providerList: providerList,\n            newProvider: oldProvider,\n            deletedProviderName: undefined\n        })\n    }\n\n    removeProvider(id)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = providerList.filter(provider => provider.id === id)[0];\n        lodash.remove(providerList, provider => provider.id === id);\n        this.setState({\n            providerList: providerList,\n            newProvider: undefined,\n            deletedProviderName: oldProvider.name,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n\n                <p className={\"add-new-resource\"} onClick={this.addNewProvider}>\n                    <span className={\"add-new-resource\"}>Add new Provider <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>\n                    <span>OpenID Provider List</span>\n                </h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newProvider).isPresent()}>\n                    <Form.Text><GoThumbsup /> Provider with name\n                                              '{new Optional(this.state.newProvider).map(provider => provider.name)\n                                                                                    .orElse(\"-\")}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedProviderName).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> OpenID Provider \"{this.state.deletedProviderName}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.providerList.map((provider) =>\n                        {\n                            return <OpenIdProviderCardEntry key={new Optional(provider.id).orElse(\"new\")}\n                                                            scimResourcePath={this.scimResourcePath}\n                                                            provider={provider}\n                                                            onCreateSuccess={this.onCreateSuccess}\n                                                            onUpdateSuccess={this.onUpdateSuccess}\n                                                            onDeleteSuccess={this.removeProvider} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n}\n\nclass OpenIdProviderCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.provider).map(val => val.id).map(val => false).orElse(true),\n            provider: JSON.parse(JSON.stringify(props.provider))\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.provider,\n            getCurrentResource: () => this.state.provider,\n            setCurrentResource: resource => this.setState({provider: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n\n    render()\n    {\n        return (\n            <Card id={\"provider-card-\" + this.state.provider.id} key={this.state.provider.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card provider-card\"}>\n                <Nav className=\"flex-column\">\n                </Nav>\n\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.provider.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete OpenID Provider with name '\" + this.state.provider.name + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success\"} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> OpenID Provider was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"provider-card-header-\" + this.state.provider.id}>\n                        <div className={\"card-name-header\"}>\n                            {\n                                this.state.editMode === false &&\n                                <React.Fragment>\n                                    <LinkContainer exact\n                                                   to={\"/views/openIdProvider/\" + this.props.provider.id + \"/openIdClients\"}>\n                                        <a href={\"/#\"}>\n                                            <h5>\n                                                <ArrowRightCircle style={{color: \"bisque\", marginRight: \"15px\"}}\n                                                                  size={\"20px\"} height={\"30px\"} />\n                                                {this.state.provider.name}\n                                            </h5>\n                                        </a>\n                                    </LinkContainer>\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.editMode === true &&\n                                <CardInputField\n                                    value={new Optional(this.state.provider.name).orElse(\"\")}\n                                    type={\"text\"}\n                                    id={\"name-\" + this.state.provider.id}\n                                    name={\"name\"}\n                                    placeholder={\"OpenID Provider identifier\"}\n                                    onChange={this.scimComponentBasics.updateInput}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n                            }\n                        </div>\n                        <CardControlIcons resource={this.state.provider}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.scimComponentBasics.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <ModifiableCardEntry header={\"Discovery Endpoint\"}\n                                                         name={\"discoveryEndpoint\"}\n                                                         resourceId={this.state.provider.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.provider.discoveryEndpoint}\n                                                         placeholder={\"The URL to the OpenID Providers discovery endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    {/*<ModifiableCardEntry header={\"Authorization Endpoint\"}*/}\n                                    {/*                     name={\"authorizationEndpoint\"}*/}\n                                    {/*                     resourceId={this.state.provider.id}*/}\n                                    {/*                     editMode={this.state.editMode}*/}\n                                    {/*                     resourceValue={this.state.provider.authorizationEndpoint}*/}\n                                    {/*                     placeholder={\"The URL to the OpenID Providers authorization endpoint\"}*/}\n                                    {/*                     onChange={this.scimComponentBasics.updateInput}*/}\n                                    {/*                     onError={fieldName => this.scimClient.getErrors(*/}\n                                    {/*                         this.state, fieldName)} />*/}\n                                    {/*<ModifiableCardEntry header={\"Token Endpoint\"}*/}\n                                    {/*                     name={\"tokenEndpoint\"}*/}\n                                    {/*                     resourceId={this.state.provider.id}*/}\n                                    {/*                     editMode={this.state.editMode}*/}\n                                    {/*                     resourceValue={this.state.provider.tokenEndpoint}*/}\n                                    {/*                     placeholder={\"The URL to the OpenID Providers token endpoint\"}*/}\n                                    {/*                     onChange={this.scimComponentBasics.updateInput}*/}\n                                    {/*                     onError={fieldName => this.scimClient.getErrors(*/}\n                                    {/*                         this.state, fieldName)} />*/}\n                                    {/*<ModifiableCardList header={\"Resource Endpoints\"}*/}\n                                    {/*                    name={\"resourceEndpoints\"}*/}\n                                    {/*                    resourceId={this.state.provider.id}*/}\n                                    {/*                    editMode={this.state.editMode}*/}\n                                    {/*                    resourceValue={this.state.provider.resourceEndpoints}*/}\n                                    {/*                    placeholder={\"An optional resource endpoint that is provided\"}*/}\n                                    {/*                    onAdd={() =>*/}\n                                    {/*                    {*/}\n                                    {/*                        let resourceEndpoints = new Optional(*/}\n                                    {/*                            this.state.provider.resourceEndpoints).map(*/}\n                                    {/*                            array => [...array]).orElse([]);*/}\n                                    {/*                        resourceEndpoints.push(\"\");*/}\n                                    {/*                        let provider = this.state.provider;*/}\n                                    {/*                        provider.resourceEndpoints = resourceEndpoints;*/}\n                                    {/*                        this.setState({provider: provider})*/}\n                                    {/*                    }}*/}\n                                    {/*                    onRemove={(index) =>*/}\n                                    {/*                    {*/}\n                                    {/*                        let resourceEndpoints = [...this.state.provider.resourceEndpoints];*/}\n                                    {/*                        resourceEndpoints.splice(index, 1);*/}\n                                    {/*                        let provider = this.state.provider;*/}\n                                    {/*                        provider.resourceEndpoints = resourceEndpoints;*/}\n                                    {/*                        this.setState({provider: provider})*/}\n                                    {/*                    }}*/}\n                                    {/*                    onChange={this.scimComponentBasics.updateInput}*/}\n                                    {/*                    onError={fieldName => this.scimClient.getErrors(*/}\n                                    {/*                        this.state, fieldName)} />*/}\n                                    {/*<ModifiableCardFileEntry header={\"Signature Verification Key\"}*/}\n                                    {/*                         name={\"signatureVerificationKey\"}*/}\n                                    {/*                         resourceId={this.state.provider.id}*/}\n                                    {/*                         editMode={this.state.editMode}*/}\n                                    {/*                         resourceValue={this.state.provider.signatureVerificationKey}*/}\n                                    {/*                         placeholder={\"Public key to verify JWT signatures\"}*/}\n                                    {/*                         onChange={this.scimComponentBasics.updateInput}*/}\n                                    {/*                         onError={fieldName => this.scimClient.getErrors(*/}\n                                    {/*                             this.state, fieldName)}*/}\n                                    {/*                         onRemove={this.scimComponentBasics.updateInput} />*/}\n                                    <CardDateRows resource={this.state.provider} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        )\n    }\n}\n","import React, {createRef} from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {ErrorListItem, FormCheckbox, FormInputField, LoadingSpinner} from \"../base/form-base\";\nimport Button from \"react-bootstrap/Button\";\nimport {Optional} from \"../services/utils\";\nimport {Alert, Col, Container, Dropdown, DropdownButton, OverlayTrigger, Row, Tooltip} from \"react-bootstrap\";\nimport * as lodash from \"lodash\";\n\nexport default class JwtBuilder extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            jwtBuilder: {},\n            header: {},\n            body: {},\n            addX5Sha256tHeader: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(\"/scim/v2/JwtBuilder\", this.setState);\n        this.formReference = createRef();\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.handleKeySelectionSelection = this.handleKeySelectionSelection.bind(this);\n        this.handleSignatureAlgorithmSelection = this.handleSignatureAlgorithmSelection.bind(this);\n        this.handleEncryptionAlgorithmSelection = this.handleEncryptionAlgorithmSelection.bind(this);\n        this.handleContentEncryptionAlgorithmSelection = this.handleContentEncryptionAlgorithmSelection.bind(this);\n        this.handleHeaderChange = this.handleHeaderChange.bind(this);\n        this.handleBodyChange = this.handleBodyChange.bind(this);\n        this.addJwtBody = this.addJwtBody.bind(this);\n        this.addDefaultJwtAttributes = this.addDefaultJwtAttributes.bind(this);\n        this.addKeyIdToHeader = this.addKeyIdToHeader.bind(this);\n        this.handleAddSha256Thumbprint = this.handleAddSha256Thumbprint.bind(this);\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.jwtBuilder,\n            getCurrentResource: () => this.state.jwtBuilder,\n            setCurrentResource: resource =>\n            {\n            },\n            setState: this.setState,\n            onCreateSuccess: this.onCreateSuccess\n        });\n    }\n\n    componentDidMount()\n    {\n        this.addHeader();\n        this.addDefaultJwtAttributes();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.jwtInfo !== this.props.jwtInfo && this.props.jwtInfo !== undefined)\n        {\n            this.handleSignatureAlgorithmSelection(this.props.jwtInfo.signatureAlgorithms[0])\n            this.addHeader();\n        }\n    }\n\n    onCreateSuccess(resource)\n    {\n        let jwtArea = document.getElementById(\"jwt\");\n        jwtArea.value = resource.jwt;\n\n        this.setState({header: JSON.parse(resource.header)});\n        this.addHeader();\n    }\n\n    async handleKeySelectionSelection(value)\n    {\n        await this.setState({selectedKey: value})\n        let hiddenKeyIdInputField = document.getElementById(\"keyId\");\n        hiddenKeyIdInputField.value = value;\n    }\n\n    addKeyIdToHeader()\n    {\n        let header = this.state.header;\n        header[\"kid\"] = this.state.selectedKey\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleSignatureAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"alg\"] = value\n        header[\"enc\"] = undefined\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleEncryptionAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"alg\"] = value\n        header[\"enc\"] = new Optional(this.state.header.enc).orElse(new Optional(this.state.jwtInfo)\n            .map(val => val.encryptionAlgorithms[0]).orElse(\"\"));\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleContentEncryptionAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"enc\"] = value\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleHeaderChange(e)\n    {\n        try\n        {\n            let header = JSON.parse(e.target.value);\n            this.setState({header: header})\n        } catch (Exception)\n        {\n        }\n    }\n\n    handleBodyChange(e)\n    {\n        try\n        {\n            let body = JSON.parse(e.target.value);\n            this.setState({body: body})\n        } catch (Exception)\n        {\n        }\n    }\n\n    addHeader()\n    {\n        let headerArea = document.getElementById(\"jwt-builder-header\");\n        headerArea.value = JSON.stringify(this.state.header, undefined, 4);\n    }\n\n    async addDefaultJwtAttributes()\n    {\n        let body = {\n            iss: new Optional(this.state.body.iss).orElse(\"\"),\n            aud: new Optional(this.state.body.aud).orElse(\"\"),\n            sub: new Optional(this.state.body.sub).orElse(\"\"),\n            iat: new Date().getTime(),\n            exp: new Date().getTime() + (3600 * 24),\n            jti: new Optional(this.state.body.jti).orElse(\"\")\n        }\n        let mergedBody = lodash.merge(this.state.body, body)\n\n        await this.setState({body: mergedBody});\n        this.addJwtBody();\n    }\n\n    addJwtBody()\n    {\n        let bodyArea = document.getElementById(\"jwt-builder-body\");\n        bodyArea.value = JSON.stringify(this.state.body, undefined, 4);\n    }\n\n    handleAddSha256Thumbprint(event)\n    {\n        let isSelected = event.target.checked;\n        this.setState({addX5Sha256tHeader: isSelected});\n    }\n\n    render()\n    {\n        let kidMatchesHeader = this.state.selectedKey === this.state.header.kid;\n\n        return (\n            <Container>\n                <Row>\n                    <Col sm={12}>\n                        {\n                            ((this.state.errors || {}).errorMessages || []).length > 0 &&\n                            <Alert variant={\"danger\"}>\n                                <ul className=\"error-list\">\n                                    {this.state.errors.errorMessages.map((message, index) =>\n                                        <ErrorListItem key={\"error-message-\" + index} message={message} />)}\n                                </ul>\n                            </Alert>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Dropdown>\n                            <DropdownButton id={\"jwt-builder-aliases\"}\n                                            title={\"available keys\"}\n                                            onSelect={this.handleKeySelectionSelection}>\n                                {\n                                    new Optional(this.props.keyInfos).isPresent() &&\n                                    this.props.keyInfos.map((keyInfo) =>\n                                    {\n                                        return <Dropdown.Item key={keyInfo.alias}\n                                                              eventKey={keyInfo.alias}>{keyInfo.alias + \" (\"\n                                                                                        + keyInfo.keyAlgorithm\n                                                                                        + \"-\" + keyInfo.keyLength\n                                                                                        + \"-bit)\"}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                            <p>selected key:\n\n                                <OverlayTrigger\n                                    placement={\"top\"}\n                                    overlay={\n                                        <Tooltip>\n                                            Add as 'kid' to JOSE-header\n                                        </Tooltip>\n                                    }\n                                >\n                                <span className={\"code\"}\n                                      style={{\n                                          marginLeft: \"15px\",\n                                          color: kidMatchesHeader ? \"lightgreen\" : \"lightcoral\",\n                                          cursor: \"pointer\"\n                                      }}\n                                      onClick={this.addKeyIdToHeader}>\n                                   {this.state.selectedKey}\n                                </span>\n                                </OverlayTrigger>\n                            </p>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"signatureAlgorithms\"}\n                                            title={\"signature algorithms\"}\n                                            onSelect={this.handleSignatureAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).map(val => val[\"signatureAlgorithms\"]).isPresent()\n                                    &&\n                                    this.props.jwtInfo[\"signatureAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"keyWrapAlgorithms\"}\n                                            title={\"key wrap algorithms\"}\n                                            onSelect={this.handleEncryptionAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).map(val => val[\"keyWrapAlgorithms\"]).isPresent()\n                                    &&\n                                    this.props.jwtInfo[\"keyWrapAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"contentEncryptionAlgorithms\"}\n                                            title={\"content encryption algorithms\"}\n                                            onSelect={this.handleContentEncryptionAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).isPresent() &&\n                                    this.props.jwtInfo[\"encryptionAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Button type={\"button\"} className={\"functional-button\"} onClick={this.addDefaultJwtAttributes}>\n                            extend by JWT attributes\n                        </Button>\n\n                        <Form.Check onChange={this.handleAddSha256Thumbprint}\n                                    className={\"jwt sha-256-check\"}\n                                    label={\"Add SHA-256 thumbprint to header\"} />\n\n                    </Col>\n                    <Col sm={9}>\n                        <Container>\n                            <Row>\n                                <Col>\n                                    <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n                                        <FormInputField name=\"keyId\"\n                                                        type=\"hidden\"\n                                                        value={this.state.selectedKey || \"\"}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                        <FormCheckbox name=\"addX5Sha256tHeader\"\n                                                      type=\"hidden\"\n                                                      readOnly={true}\n                                                      checked={this.state.addX5Sha256tHeader}\n                                                      onError={fieldName => this.scimClient.getErrors(this.state,\n                                                          fieldName)} />\n                                        <FormInputField id={\"jwt-builder-header\"}\n                                                        name=\"header\"\n                                                        type=\"text\"\n                                                        as=\"textarea\"\n                                                        onChange={this.handleHeaderChange}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                        <FormInputField id={\"jwt-builder-body\"}\n                                                        name=\"body\"\n                                                        type=\"text\"\n                                                        as=\"textarea\"\n                                                        onChange={this.handleBodyChange}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                    </Form>\n                                </Col>\n                                <Col sm={5}>\n                                    <Form.Control id={\"jwt\"}\n                                                  sm={5}\n                                                  as={\"textarea\"}\n                                                  onChange={this.handleBodyChange} />\n\n                                </Col>\n                            </Row>\n                        </Container>\n                        <Button id={\"create-jwt\"} type={\"button\"} onClick={this.scimComponentBasics.onSubmit}>\n                            <LoadingSpinner show={this.state.isLoading} /> Create\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n","import React from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport JwtParser from \"./jwt-parser\";\nimport JwtBuilder from \"./jwt-builder\";\nimport {ApplicationInfoContext} from \"../app\";\n\nexport default class JwtHandler extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(\"/scim/v2/JwtBuilder\", this.setState);\n    }\n\n    componentDidMount()\n    {\n        this.scimClient.getResource(null, \"/scim/v2/Keystore\").then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({keyInfos: listResponse.Resources[0].keyInfos});\n                })\n            }\n        });\n    }\n\n\n    render()\n    {\n        return (\n            <ApplicationInfoContext.Consumer>\n                {appInfo =>\n                    appInfo &&\n                    <Tabs defaultActiveKey=\"jwtparser\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"jwtparser\" title=\"JWT Parser\">\n                            <JwtParser keyInfos={this.state.keyInfos} jwtInfo={appInfo.jwtInfo} />\n                        </Tab>\n                        <Tab eventKey=\"jwtbuilder\" title=\"JWT Builder\">\n                            <JwtBuilder keyInfos={this.state.keyInfos} jwtInfo={appInfo.jwtInfo} />\n                        </Tab>\n                    </Tabs>\n                }\n            </ApplicationInfoContext.Consumer>\n        )\n    }\n}\n","import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Optional} from \"../services/utils\";\nimport * as lodash from \"lodash\";\nimport {ArrowLeftCircle, ArrowRightCircle, FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {Alert, Card, CardDeck, Table} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    CardListSelector,\n    CardRadioSelector,\n    ErrorMessagesAlert,\n    HiddenCardEntry,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../base/form-base\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Modal from \"../base/modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {ApplicationInfoContext} from \"../app\";\nimport {OPENID_CLIENT_ENDPOINT, OPENID_PROVIDER_ENDPOINT} from \"../scim/scim-constants\";\n\n\nexport default class OpenidClients extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            errors: {},\n            clientList: [],\n            aliases: [],\n            currentPage: 0,\n            keyInfos: [],\n            provider: {}\n        };\n        this.scimResourcePath = OPENID_CLIENT_ENDPOINT;\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewClient = this.addNewClient.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.removeClient = this.removeClient.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = (this.state.currentPage * this.props.serviceProviderConfig.filter.maxResults) + 1;\n        let count = this.props.serviceProviderConfig.filter.maxResults;\n\n        let openIdProviderId = this.props.match.params.id;\n        let openIdProviderResourcePath = OPENID_PROVIDER_ENDPOINT;\n        await this.scimClient.getResource(openIdProviderId, openIdProviderResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(openIdProvider =>\n                {\n                    this.setState({provider: openIdProvider});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'clientId',\n            filter: 'openIDProviderId eq ' + openIdProviderId\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.clientList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    clientList: concatedResources,\n                    errors: {}\n                })\n            })\n        });\n\n        this.loadKeystoreInfos();\n    }\n\n    async loadKeystoreInfos()\n    {\n        let keystoreResourcePath = \"/scim/v2/Keystore\";\n        this.scimClient.getResource(undefined, keystoreResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({\n                        keyInfos: new Optional(listResponse).map(lr => lr.Resources).map(r => r[0]).map(\n                            keystore => keystore.keyInfos).orElse([])\n                    });\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n    }\n\n    addNewClient()\n    {\n        let clientList = [...this.state.clientList];\n        const resource = clientList.filter(client => client.id === undefined);\n        if (resource.length === 0)\n        {\n            clientList.unshift({});\n            this.setState({\n                clientList: clientList,\n                newClient: undefined,\n                deletedClientId: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newClient: undefined,\n                deletedClientId: undefined\n            })\n        }\n    }\n\n    onCreateSuccess(client)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = lodash.find(clientList, c => c.id === undefined);\n        lodash.merge(oldClient, client);\n        this.setState({\n            providerList: clientList,\n            newProvider: oldClient,\n            deletedClientId: undefined\n        })\n    }\n\n    onUpdateSuccess(client)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = lodash.find(clientList, p => p.id === client.id);\n        lodash.merge(oldClient, client);\n        this.setState({\n            clientList: clientList,\n            newProxy: undefined,\n            deletedClientId: undefined\n        })\n    }\n\n    removeClient(id)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = clientList.filter(client => client.id === id)[0];\n        lodash.remove(clientList, client => client.id === id);\n        this.setState({\n            clientList: clientList,\n            newClient: undefined,\n            deletedClientId: oldClient.clientId,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <LinkContainer exact\n                               to={\"/views/openIdProvider/\"}>\n                    <a href={\"/#\"}>\n                        <h5 style={{height: \"35px\", padding: \"0\", paddingLeft: \"10px\"}}>\n                            <ArrowLeftCircle style={{color: \"bisque\"}} height={\"35px\"} size={\"25px\"} />\n                            <span style={{marginLeft: \"15px\"}}>Back to Provider Overview</span>\n                        </h5>\n                    </a>\n                </LinkContainer>\n\n                <h5>Provider: <span style={{color: \"lightgray\"}}>{this.state.provider.name}</span></h5>\n\n                <p className={\"add-new-resource\"} onClick={this.addNewClient}>\n                    <span className={\"add-new-resource\"}>Add new Client <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>\n                    <span>OpenID Client List</span>\n                </h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newClient).isPresent()}>\n                    <Form.Text><GoThumbsup /> Client with clientId\n                                              '{new Optional(this.state.newClient).map(client => client.clientId)\n                                                                                  .orElse(\"-\")}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedClientId).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> OpenID Client \"{this.state.deletedClientId}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.clientList.map((client) =>\n                        {\n                            return <OpenIdClientCardEntry key={new Optional(client.id).orElse(\"new\")}\n                                                          provider={this.state.provider}\n                                                          scimResourcePath={this.scimResourcePath}\n                                                          client={client}\n                                                          keyInfos={this.state.keyInfos}\n                                                          onCreateSuccess={this.onCreateSuccess}\n                                                          onUpdateSuccess={this.onUpdateSuccess}\n                                                          onDeleteSuccess={this.removeClient} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        )\n    }\n}\n\nclass OpenIdClientCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.client).map(val => val.id).map(val => false).orElse(true),\n            authenticationType: props.client.authenticationType,\n            client: JSON.parse(JSON.stringify(props.client))\n        }\n        this.setState = this.setState.bind(this);\n        this.resetEditMode = this.resetEditMode.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.client,\n            getCurrentResource: () => this.state.client,\n            setCurrentResource: resource => this.setState({client: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n    async resetEditMode()\n    {\n        this.scimComponentBasics.resetEditMode();\n        let client = JSON.parse(JSON.stringify(this.props.client));\n        await this.setState({client: client, authenticationType: client.authenticationType});\n    }\n\n    render()\n    {\n        let aliases = [];\n        this.props.keyInfos.forEach(keyInfo =>\n        {\n            if (keyInfo.hasPrivateKey === true)\n            {\n                aliases.push(keyInfo.alias);\n            }\n        });\n        return (\n            <Card id={\"client-card-\" + this.state.client.id} key={this.state.client.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card client-card\"}>\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.client.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete OpenID Client with clientId '\" + this.state.client.clientId + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success\"} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> OpenID Client was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"client-card-header-\" + this.state.client.id}>\n                        <div className={\"card-name-header\"}>\n                            <div className={\"card-name-header\"}>\n                                {\n                                    this.state.client.clientId !== undefined &&\n                                    <LinkContainer exact\n                                                   to={\"/views/openIdProvider/\" + this.props.provider.id + \"/client/\"\n                                                       + this.state.client.id}>\n                                        <a href={\"/#\"}>\n                                            <h5>\n                                                <ArrowRightCircle style={{color: \"bisque\", marginRight: \"15px\"}}\n                                                                  size={\"20px\"} height={\"30px\"} />\n                                                Client '{this.state.client.clientId}'\n                                            </h5>\n                                        </a>\n                                    </LinkContainer>\n                                }\n                            </div>\n                        </div>\n                        <CardControlIcons resource={this.state.client}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <HiddenCardEntry name=\"openIdProviderId\"\n                                                     type=\"number\"\n                                                     value={this.props.provider.id}\n                                                     onError={fieldName => this.scimClient.getErrors(this.state,\n                                                         fieldName)} />\n                                    <ModifiableCardEntry header={\"Client ID\"}\n                                                         name={\"clientId\"}\n                                                         resourceId={this.state.client.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.client.clientId}\n                                                         placeholder={\"The identifier for this client at its OpenID Provider\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardRadioSelector header={\"Authentication Type\"}\n                                                       name={\"authenticationType\"}\n                                                       editMode={this.state.editMode}\n                                                       selections={[\"basic\", \"jwt\"]}\n                                                       selected={new Optional(this.state.authenticationType).orElse(\n                                                           \"basic\")}\n                                                       onChange={e =>\n                                                       {\n                                                           this.scimComponentBasics.updateInput(e.target.name,\n                                                               e.target.value);\n                                                           this.setState({authenticationType: e.target.value})\n                                                       }}\n                                                       onError={fieldName => this.scimClient.getErrors(this.state,\n                                                           fieldName)}\n                                    />\n                                    {\n                                        (this.state.authenticationType === undefined ||\n                                            this.state.authenticationType === \"basic\") &&\n                                        <ModifiableCardEntry header={\"Client Secret\"}\n                                                             name={\"clientSecret\"}\n                                                             resourceId={this.state.client.id}\n                                                             editMode={this.state.editMode}\n                                                             resourceValue={this.state.client.clientSecret}\n                                                             placeholder={\"The password to access the OpenID Providers token endpoint\"}\n                                                             onChange={this.scimComponentBasics.updateInput}\n                                                             onError={fieldName => this.scimClient.getErrors(\n                                                                 this.state, fieldName)} />\n\n                                    }\n                                    {\n                                        this.state.authenticationType === \"jwt\" &&\n                                        <React.Fragment>\n                                            <CardListSelector header={\"Signature Key Reference\"}\n                                                              name={\"signingKeyRef\"}\n                                                              editMode={this.state.editMode}\n                                                              selections={[\"\", ...aliases]}\n                                                              selected={this.state.client.signingKeyRef}\n                                                              onChange={e => this.scimComponentBasics.updateInput(\n                                                                  e.target.name, e.target.value)}\n                                                              onError={fieldName => this.scimClient.getErrors(\n                                                                  this.state, fieldName)}\n\n                                            />\n                                            <ApplicationInfoContext.Consumer>\n                                                {appInfo =>\n                                                    <CardListSelector header={\"JWT Signature Algorithm\"}\n                                                                      name={\"signatureAlgorithm\"}\n                                                                      editMode={this.state.editMode}\n                                                                      selections={[\"\",\n                                                                                   ...appInfo.jwtInfo.signatureAlgorithms]}\n                                                                      selected={this.state.client.signatureAlgorithm}\n                                                                      onChange={e => this.scimComponentBasics.updateInput(\n                                                                          e.target.name, e.target.value)}\n                                                                      onError={fieldName => this.scimClient.getErrors(\n                                                                          this.state, fieldName)}\n\n                                                    />\n                                                }\n                                            </ApplicationInfoContext.Consumer>\n                                            <ModifiableCardEntry header={\"Audience\"}\n                                                                 name={\"audience\"}\n                                                                 resourceId={this.state.client.audience}\n                                                                 editMode={this.state.editMode}\n                                                                 resourceValue={this.state.client.audience}\n                                                                 placeholder={\"audience value that should match the providers issuer-value\"}\n                                                                 onChange={this.scimComponentBasics.updateInput}\n                                                                 onError={fieldName => this.scimClient.getErrors(\n                                                                     this.state, fieldName)} />\n                                            <CardListSelector header={\"Decryption Key Reference\"}\n                                                              name={\"decryptionKeyRef\"}\n                                                              editMode={this.state.editMode}\n                                                              selections={[\"\", ...aliases]}\n                                                              selected={this.state.client.decryptionKeyRef}\n                                                              onChange={e => this.scimComponentBasics.updateInput(\n                                                                  e.target.name, e.target.value)}\n\n                                            />\n                                        </React.Fragment>\n                                    }\n                                    <CardDateRows resource={this.state.client} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n","import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Alert} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {ErrorMessagesAlert, FormCheckbox, FormInputField, FormObjectList, LoadingSpinner} from \"../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport {Optional} from \"../services/utils\";\n\nexport default class HttpSettings extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n\n        let httpSettings = this.props.client['urn:ietf:params:scim:schemas:captaingoldfish:2.0:HttpClientSettings'];\n        this.state = {\n            success: false,\n            showSpinner: false,\n            settings: {},\n            proxies: [],\n            keyInfos: [],\n            originalSetting: JSON.parse(JSON.stringify(httpSettings)),\n            httpSettings: httpSettings,\n            enableHostnameVerifier: httpSettings.useHostnameVerifier\n        }\n        this.setState = this.setState.bind(this);\n        let resourcePath = \"/scim/v2/HttpClientSettings\";\n        this.scimClient = new ScimClient(resourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => new Optional(this.state.originalSetting).orElse({}),\n            getCurrentResource: () => this.state.httpSettings,\n            setCurrentResource: resource => this.setState({client: resource}),\n            setState: this.setState,\n            onCreateSuccess: (resource) => console.error(\"create must not be called!\"),\n            onUpdateSuccess: this.onUpdateSuccess\n        });\n\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        await this.loadProxies();\n        await this.loadKeystoreInfos();\n    }\n\n    async loadProxies()\n    {\n        let proxyResourcePath = \"/scim/v2/Proxy\";\n        await new ScimClient(proxyResourcePath, this.setState).listResources().then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({proxies: listResponse.Resources || []});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n    }\n\n    async loadKeystoreInfos()\n    {\n        let keystoreResourcePath = \"/scim/v2/Keystore\";\n        this.scimClient.getResource(undefined, keystoreResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({\n                        keyInfos: new Optional(listResponse).map(lr => lr.Resources).map(r => r[0]).map(\n                            keystore => keystore.keyInfos).orElse([])\n                    });\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n    }\n\n    onUpdateSuccess()\n    {\n\n    }\n\n    render()\n    {\n        let proxies = [];\n        this.state.proxies.forEach(proxy =>\n        {\n            proxies.push({id: proxy.id, value: proxy.hostname + \":\" + proxy.port});\n        });\n\n        let aliases = [];\n        this.state.keyInfos.forEach(keyInfo =>\n        {\n            if (keyInfo.hasPrivateKey === true)\n            {\n                aliases.push({\n                    id: keyInfo.alias,\n                    value: keyInfo.alias + \" (\" + keyInfo.keyAlgorithm + \"-\" + keyInfo.keyLength + \")\"\n                });\n            }\n        });\n\n        return (\n            <React.Fragment>\n                <h2>Http Client Settings for {this.props.client.clientId}</h2>\n                <Alert id={\"uploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Http Client Settings were successfully saved</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n                    <FormInputField name=\"id\"\n                                    isHidden={true}\n                                    type=\"string\"\n                                    readOnly={true}\n                                    value={this.state.httpSettings.id}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"openIdClientReference\"\n                                    isHidden={true}\n                                    type=\"number\"\n                                    readOnly={true}\n                                    value={new Optional(this.props.client.id).orElse(\"\")}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"requestTimeout\"\n                                    type=\"number\"\n                                    label=\"Request Timeout\"\n                                    value={this.state.httpSettings.requestTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"connectionTimeout\"\n                                    label=\"Connection Timeout\"\n                                    type=\"number\"\n                                    value={this.state.httpSettings.connectionTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"socketTimeout\"\n                                    label=\"Socket Timeout\"\n                                    type=\"number\"\n                                    value={this.state.httpSettings.socketTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormCheckbox id={\"useHostnameVerifier\"}\n                                  name=\"useHostnameVerifier\"\n                                  label=\"Enable Hostname Verifier\"\n                                  checked={this.state.enableHostnameVerifier}\n                                  onChange={(e) => this.setState({enableHostnameVerifier: e.target.checked})}\n                                  onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormObjectList name={\"proxyReference\"}\n                                    label={\"Proxy\"}\n                                    selections={[\"\", ...proxies]}\n                                    selected={this.state.httpSettings.proxyReference}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n                    <FormObjectList name={\"tlsClientAuthAliasReference\"}\n                                    label={\"TLS Client Auth Key Reference\"}\n                                    selections={[\"\", ...aliases]}\n                                    selected={this.state.httpSettings.tlsClientAuthAliasReference}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"upload\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}","import React, {useState} from \"react\";\nimport {Alert, Card, Collapse} from \"react-bootstrap\";\nimport {CaretDown, CaretRight, XLg} from \"react-bootstrap-icons\";\nimport {Collapseable, ErrorListItem} from \"../../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Optional} from \"../../services/utils\";\n\n\nexport default function AccessTokenView(props)\n{\n    return <div className={\"grant-type-workflow\"}>\n        <AccessTokenCollapsible\n            header={props.header}\n            headerClass={props.headerClass}\n            content={() =>\n            {\n                return <AccessTokenDetailsView accessTokenDetails={props.accessTokenDetails} />\n            }}\n            remove={props.onRemove}>\n        </AccessTokenCollapsible>\n    </div>\n}\n\nfunction AccessTokenCollapsible(props)\n{\n    const [open, setOpen] = useState(true);\n\n    let headerClass = new Optional(props.headerClass).map(val => \" \" + val).orElse(\"\");\n\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header\" + headerClass}\n                   onClick={() =>\n                   {\n                       setOpen(!open);\n                   }}\n            >\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                {props.header}\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={\"workflow-card\"}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    );\n}\n\nexport function AccessTokenDetailsView(props)\n{\n    return <div className={\"workflow-details\"}>\n        <AccessTokenRequestView accessTokenDetails={props.accessTokenDetails} />\n        <AccessTokenResponseView accessTokenDetails={props.accessTokenDetails} />\n    </div>\n}\n\nfunction AccessTokenRequestView(props)\n{\n    let requestViewContent = function ()\n    {\n        return <React.Fragment>\n            <Collapseable header={\"Request Header\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={((props.accessTokenDetails || {})\n                                                                            .requestHeaders || [])} />} />\n            <Collapseable header={\"Request Parameter\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={((props.accessTokenDetails || {})\n                                                                            .requestParams || [])} />} />\n        </React.Fragment>\n    }\n    return <Collapseable header={\"Access Token Request Details\"}\n                         variant={\"workflow-details\"}\n                         content={requestViewContent} />\n}\n\nfunction AccessTokenResponseView(props)\n{\n\n    let responseDetails = (props.accessTokenDetails || {});\n    let responseStatusCode = responseDetails.statusCode;\n    let responseHeaders = responseDetails.responseHeaders || [];\n    let plainResponse = responseDetails.plainResponse || \"\";\n    let contentType = (responseHeaders.filter(header => header.name.toLowerCase() === \"content-type\")[0]\n                       || []).value;\n\n    let header = function ()\n    {\n        return <span>Access Token Response Details\n                <span className={\"bold\"}> (Status: {responseStatusCode})</span>\n            </span>\n    }\n    let responseViewContent = function ()\n    {\n        return <React.Fragment>\n            <Collapseable header={\"Response Header\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={responseHeaders} />} />\n            <Collapseable header={\"Access Token Response\"}\n                          open={true}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          content={() => <AccessTokenResponse contentType={contentType}\n                                                              tokenResponse={plainResponse} />} />\n        </React.Fragment>\n    }\n    return <Collapseable header={header()}\n                         open={true}\n                         variant={\"workflow-details\"}\n                         content={responseViewContent} />\n}\n\nfunction NameValueList(props)\n{\n    return <React.Fragment>\n        {\n            props.nameValueList.map((nameValuePair, index) =>\n            {\n                return <Row key={props.keyPrefix + index}>\n                    <Col sm={2}>{nameValuePair.name}</Col>\n                    <Col sm={10}>{nameValuePair.value}</Col>\n                </Row>\n            })\n        }\n    </React.Fragment>\n}\n\nexport class AccessTokenResponse extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {errorMessages: []}\n    }\n\n    componentDidMount()\n    {\n        this.parseJsonContent();\n    }\n\n    async parseJsonContent()\n    {\n        let isContentTypeJson = (this.props.contentType || \"\").toLowerCase().includes(\"application/json\");\n        try\n        {\n            let stateExtension = {};\n            stateExtension.json = JSON.parse(this.props.tokenResponse);\n            if (!isContentTypeJson)\n            {\n                stateExtension.errorMessages = [...this.state.errorMessages,\n                                                \"Found invalid content-type: \" + this.props.contentType\n                                                + \". Response is valid JSON but content-type header does not match.\"];\n            }\n            this.setState(stateExtension)\n        } catch (e)\n        {\n            console.error(e)\n            if (isContentTypeJson)\n            {\n                this.setState({\n                    errorMessages: [...this.state.errorMessages, \"Expected content to be JSON but could not parse it\",\n                                    e.message]\n                })\n            }\n        }\n    }\n\n    render()\n    {\n        return (\n            <div id={\"access-token-response-container\"}>\n                {\n                    this.state.errorMessages.length > 0 &&\n                    <Alert variant={\"danger\"}>\n                        <ul className=\"error-list\">\n                            {this.state.errorMessages.map((message, index) =>\n                                <ErrorListItem key={\"error-message-\" + index} message={message} />)}\n                        </ul>\n                    </Alert>\n                }\n                {\n                    this.state.json &&\n                    Object.keys(this.state.json).map((key, index) =>\n                    {\n                        return <Row key={\"access-token-response-json-param-\" + index}>\n                            <Col sm={2}>{key}</Col>\n                            <Col sm={10}> {this.state.json[key]} </Col>\n                        </Row>\n                    })\n                }\n                {\n                    !this.state.json &&\n                    <Row key={\"access-token-response-json-param-_\"}>\n                        <Col sm={2}>access_token</Col>\n                        <Col sm={10}> {this.props.tokenResponse} </Col>\n                    </Row>\n                }\n            </div>\n        )\n    }\n}","import React, {useState} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport {AlertListMessages, Collapseable, LoadingSpinner} from \"../../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport {CaretDown, CaretRight, ExclamationLg, XLg} from \"react-bootstrap-icons\";\nimport {Alert, Card, Collapse} from \"react-bootstrap\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {ACCESS_TOKEN_REQUEST_ENDPOINT, AUTH_CODE_GRANT_ENDPOINT} from \"../../scim/scim-constants\";\nimport Button from \"react-bootstrap/Button\";\nimport {AccessTokenDetailsView} from \"./access-token-view\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Optional} from \"../../services/utils\";\n\nexport default class AuthorizationCodeGrantWorkflow extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.loadAuthorizationQueryParameterView = this.loadAuthorizationQueryParameterView.bind(this);\n        this.getAuthRequestStatus = this.getAuthRequestStatus.bind(this);\n        this.loadAuthorizationCodeResponseDetailsView = this.loadAuthorizationCodeResponseDetailsView.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n    }\n\n    componentWillUnmount()\n    {\n        if (this.state.interval)\n        {\n            clearInterval(this.state.interval);\n        }\n    }\n\n    componentDidMount()\n    {\n        let getAuthRequestStatus = this.getAuthRequestStatus;\n        window.open(this.props.requestDetails.authorizationCodeGrantUrl,\n            '_blank',\n            'location=yes,height=570,width=520,scrollbars=yes,status=yes');\n        this.state.interval = setInterval(function ()\n        {\n            getAuthRequestStatus();\n        }, 2000);\n    }\n\n    getAuthRequestStatus()\n    {\n        let scimClient = new ScimClient(AUTH_CODE_GRANT_ENDPOINT, this.setState);\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n        let stateParam = authCodeQueryParams.state;\n\n        let state = this.state;\n        let setState = this.setState;\n\n        scimClient.getResource(stateParam).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    clearInterval(state.interval);\n                    delete state.interval\n                    setState({\n                        authorizationResponseUrl: resource.authorizationResponseUrl\n                    });\n                })\n            }\n        });\n    }\n\n    loadAuthorizationQueryParameterView()\n    {\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n\n        let showInfoMessage = this.state.authorizationResponseUrl === undefined;\n\n        return <div className={\"workflow-details\"}>\n            <Alert variant={\"info\"} show={showInfoMessage}>\n                <ExclamationLg /> The authorization code grant will try to open a new browser window. Make sure your\n                                  popup blocker does not block this. If you closed this window before finishing the\n                                  login process. Close this workflow and start again.\n            </Alert>\n            <Collapseable header={\"Authorization Request Details\"} variant={\"workflow-details\"} content={() =>\n            {\n                return <React.Fragment>\n                    <Row>\n                        <Col sm={2} className={\"url-base-value\"}>authCodeUrl</Col>\n                        <Col sm={10}\n                             className={\"url-base-value\"}>{this.props.requestDetails.authorizationCodeGrantUrl}</Col>\n                    </Row>\n                    {\n                        Object.keys(authCodeQueryParams).map((key, index) =>\n                        {\n                            return <Row key={\"auth-code-request-row-\" + index}>\n                                <Col sm={2}>{key}</Col>\n                                <Col sm={10}>{authCodeQueryParams[key]}</Col>\n                            </Row>\n                        })\n                    }\n                </React.Fragment>\n            }} />\n        </div>\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let authorizationResponseUrl = new URL(this.state.authorizationResponseUrl);\n        const queryParamsObject = Object.fromEntries(authorizationResponseUrl.searchParams);\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n\n        let resource = {\n            grantType: \"authorization_code\",\n            openIdClientId: parseInt(this.props.client.id),\n            redirectUri: authCodeQueryParams.redirect_uri,\n            authorizationCode: queryParamsObject.code\n        }\n        scimClient.createResource(resource).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    this.setState({accessTokenDetails: resource})\n                })\n            }\n        });\n    }\n\n    loadAuthorizationCodeResponseDetailsView()\n    {\n        if (!this.state.authorizationResponseUrl)\n        {\n            return null;\n        }\n        let authorizationResponseUrl = new URL(this.state.authorizationResponseUrl);\n        const queryParamsObject = Object.fromEntries(authorizationResponseUrl.searchParams);\n\n        let errors = this.state.errors || {};\n        return <div className={\"workflow-details\"}>\n            {\n                <React.Fragment>\n                    <Collapseable header={\"Authorization Response Details\"}\n                                  open={true}\n                                  variant={\"workflow-details\"}\n                                  content={() =>\n                                  {\n                                      return <React.Fragment>\n                                          <Row>\n                                              <Col sm={2} className={\"url-base-value\"}>authResponseUrl</Col>\n                                              <Col sm={10} className={\"url-base-value\"}>\n                                                  {this.state.authorizationResponseUrl}\n                                              </Col>\n                                          </Row>\n                                          {\n                                              Object.keys(queryParamsObject).map((key, index) =>\n                                              {\n                                                  return <Row key={\"auth-code-response-row-\" + index}>\n                                                      <Col sm={2}>{key}</Col>\n                                                      <Col sm={10}>{queryParamsObject[key]}</Col>\n                                                  </Row>\n                                              })\n                                          }\n                                      </React.Fragment>\n                                  }}\n                    />\n\n                    <Button type=\"submit\" onClick={e =>\n                    {\n                        this.setState({isLoading: true});\n                        this.retrieveAccessTokenDetails(e);\n                    }}\n                            style={{marginTop: \"15px\", marginBottom: \"15px\"}}>\n                        <LoadingSpinner show={this.state.isLoading} /> Get Access Token\n                    </Button>\n                    {\n                        this.state.accessTokenDetails &&\n                        <AccessTokenDetailsView accessTokenDetails={this.state.accessTokenDetails} />\n                    }\n\n                    <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                       messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                    .orElse(\n                                                                                                        [])} />\n                </React.Fragment>\n            }\n        </div>\n    }\n\n    render()\n    {\n        return (\n            <div className={\"grant-type-workflow\"}>\n                {\n                    <AuthorizationCodeGrantDetails\n                        isLoading={this.state.authorizationResponseUrl === undefined}\n                        content={() =>\n                        {\n                            return <React.Fragment>\n                                {this.loadAuthorizationQueryParameterView()}\n                                {this.loadAuthorizationCodeResponseDetailsView()}\n                            </React.Fragment>\n                        }}\n                        remove={this.props.onRemove} />\n                }\n            </div>\n        );\n    }\n}\n\nfunction AuthorizationCodeGrantDetails(props)\n{\n    const [open, setOpen] = useState(true);\n\n    let variant = \"dark\";\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header authorization-code-grant\"}\n                   variant={variant}\n                   onClick={() =>\n                   {\n                       setOpen(!open);\n                   }}\n            >\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                <span><LoadingSpinner show={props.isLoading} /> Authorization Code Grant/Flow</span>\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={\"workflow-card\"}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    );\n}\n\n\n","import ScimClient from \"./scim-client\";\nimport {CURRENT_WORKFLOW_SETTINGS_ENDPOINT} from \"./scim-constants\";\nimport {Optional} from \"../services/utils\";\n\nexport default class CurrentWorkflowSettingsClient\n{\n\n    constructor(setState)\n    {\n        this.scimClient = new ScimClient(CURRENT_WORKFLOW_SETTINGS_ENDPOINT, setState);\n    }\n\n    updateAuthCodeSettings(openidClientId, redirectUri, queryParameters, callback)\n    {\n        let resource = {\n            authCodeParameters: {\n                redirectUri: redirectUri,\n                queryParameters: queryParameters\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    updateClientCredentialsSettings(openidClientId, scope, callback)\n    {\n        let resource = {\n            clientCredentialsParameters: {\n                scope: scope\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    updateResourceOwnerPasswordCredentialsSettings(openidClientId, username, password, scope, callback)\n    {\n        let resource = {\n            resourceOwnerPasswordParameters: {\n                username: username,\n                password: password,\n                scope: scope\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    patchResource(openIdClientId, resource, callback)\n    {\n        let patchOperation = {\n            schemas: [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n            Operations: [\n                {\n                    op: \"replace\",\n                    value: resource\n                }\n            ]\n        };\n\n        this.scimClient.patchResource(patchOperation, openIdClientId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    new Optional(callback).ifPresent(method => method(resource, response.status));\n                })\n            }\n        })\n    }\n}","import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {\n    AlertListMessages,\n    ErrorMessagesAlert,\n    FormInputField,\n    FormRadioSelection,\n    LoadingSpinner\n} from \"../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {Reply} from \"react-bootstrap-icons\";\nimport AuthorizationCodeGrantWorkflow from \"./auth-code-grant/authorization-code-grant-workflow\";\nimport * as lodash from \"lodash\";\nimport ScimClient from \"../scim/scim-client\";\nimport {ACCESS_TOKEN_REQUEST_ENDPOINT, AUTH_CODE_GRANT_ENDPOINT, CURRENT_WORKFLOW_URI} from \"../scim/scim-constants\";\nimport AccessTokenView from \"./auth-code-grant/access-token-view\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Optional} from \"../services/utils\";\nimport CurrentWorkflowSettingsClient from \"../scim/current-workflow-settings-client\";\nimport {Alert} from \"react-bootstrap\";\n\nexport default class OpenidClientWorkflow extends React.Component\n{\n\n    constructor(props, context)\n    {\n        super(props, context)\n        this.authCodeGrantType = \"authorization_code\";\n        this.clientCredentialsGrantType = \"client_credentials\";\n        this.resourceOwnerGrantType = \"password\";\n\n        this.state = {\n            authenticationType: this.authCodeGrantType,\n            workflowDetails: this.props.client[CURRENT_WORKFLOW_URI] || {},\n            isLoading: false,\n            responseDetails: []\n        }\n\n        this.formReference = createRef();\n        this.resetRedirectUri = this.resetRedirectUri.bind(this);\n        this.handleNestedElementChange = this.handleNestedElementChange.bind(this);\n        this.handleGrantTypeResponseDetails = this.handleGrantTypeResponseDetails.bind(this);\n        this.removeGrantTypeDetails = this.removeGrantTypeDetails.bind(this);\n    }\n\n    async resetRedirectUri(e)\n    {\n        e.preventDefault();\n        let wrapperObject = this.state;\n        lodash.set(wrapperObject, \"workflowDetails.authCodeParameters.redirectUri\", this.props.originalRedirectUri);\n        this.setState(wrapperObject)\n    }\n\n    handleGrantTypeResponseDetails(type, responseDetails)\n    {\n        let responseDetailsArray = (this.state.responseDetails || []);\n        responseDetails.grantType = type;\n        responseDetailsArray.unshift(responseDetails);\n        let wrapperObject = {};\n        wrapperObject.responseDetails = responseDetailsArray\n        this.setState(wrapperObject);\n    }\n\n    handleNestedElementChange(fieldname, value)\n    {\n        let wrapperObject = this.state.workflowDetails;\n        lodash.set(wrapperObject, fieldname, value);\n        this.setState({workflowDetails: wrapperObject})\n    }\n\n    removeGrantTypeDetails(details)\n    {\n        let detailsObject = this.state.responseDetails;\n        let detailsIndex = detailsObject.indexOf(details);\n        detailsObject.splice(detailsIndex, 1);\n        let wrapperObject = {};\n        wrapperObject.responseDetails = detailsObject;\n        this.setState(wrapperObject)\n    }\n\n    render()\n    {\n        let authTypes = [\n            {value: this.authCodeGrantType, display: \"Authorization Code Grant/Flow\"},\n            {value: this.clientCredentialsGrantType, display: \"Client Credentials Grant\"},\n            {value: this.resourceOwnerGrantType, display: \"Resource Owner Password Credentials Grant\"}\n        ]\n\n        return (\n            <React.Fragment>\n                <h2>OpenID Connect Workflow</h2>\n                <ErrorMessagesAlert errors={this.state.errors} />\n\n                <Form ref={this.formReference} onSubmit={e => e.preventDefault()}>\n                    <FormRadioSelection name=\"authenticationType\"\n                                        label=\"AuthenticationType Type\"\n                                        displayType={\"vertical\"}\n                                        selected={this.state.authenticationType}\n                                        selections={authTypes}\n                                        onChange={e => this.setState({authenticationType: e.target.value})}\n                                        onError={() =>\n                                        {\n                                        }} />\n                    {\n                        this.state.authenticationType === this.authCodeGrantType &&\n                        <AuthorizationCodeGrantForm formReference={this.formReference}\n                                                    originalRedirectUri={this.props.originalRedirectUri}\n                                                    workflowDetails={this.state.workflowDetails}\n                                                    isLoading={this.state.isLoading}\n                                                    handleChange={this.handleNestedElementChange}\n                                                    resetRedirectUri={this.resetRedirectUri}\n                                                    handleResponse={details => this.handleGrantTypeResponseDetails(\n                                                        this.authCodeGrantType, details)}\n                                                    onError={() =>\n                                                    {\n                                                    }} />\n                    }\n                    {\n                        this.state.authenticationType === this.clientCredentialsGrantType &&\n                        <ClientCredentialsGrantForm formReference={this.formReference}\n                                                    workflowDetails={this.state.workflowDetails}\n                                                    client={this.props.client}\n                                                    isLoading={this.state.isLoading}\n                                                    handleChange={this.handleNestedElementChange}\n                                                    handleResponse={details => this.handleGrantTypeResponseDetails(\n                                                        this.clientCredentialsGrantType, details)}\n                                                    onError={() =>\n                                                    {\n                                                    }} />\n                    }\n                    {\n                        this.state.authenticationType === this.resourceOwnerGrantType &&\n                        <ResourceOwnerPasswordCredentialsForm\n                            client={this.props.client}\n                            workflowDetails={this.state.workflowDetails}\n                            isLoading={this.state.isLoading}\n                            handleChange={this.handleNestedElementChange}\n                            handleResponse={details => this.handleGrantTypeResponseDetails(\n                                this.state.authenticationType, details)}\n                            onError={() =>\n                            {\n                            }} />\n                    }\n                </Form>\n                {\n                    (this.state.responseDetails || []).map(responseDetails =>\n                    {\n                        return <ResponseDetailsView key={\"response-details-\" + responseDetails.id}\n                                                    responseDetails={responseDetails}\n                                                    client={this.props.client}\n                                                    removeGrantTypeDetails={this.removeGrantTypeDetails} />\n                    })\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nfunction ResponseDetailsView(props)\n{\n\n    let authCodeGrantType = \"authorization_code\";\n    let clientCredentialsGrantType = \"client_credentials\";\n    let resourceOwnerGrantType = \"password\";\n\n    let responseDetails = props.responseDetails;\n\n    if (authCodeGrantType === responseDetails.grantType)\n    {\n        return <React.Fragment key={authCodeGrantType + \"-\" + responseDetails.id}>\n            <AuthorizationCodeGrantWorkflow client={props.client}\n                                            requestDetails={responseDetails}\n                                            onRemove={() => props.removeGrantTypeDetails(\n                                                responseDetails)} />\n        </React.Fragment>\n    }\n\n    if (clientCredentialsGrantType === responseDetails.grantType)\n    {\n        return <React.Fragment key={clientCredentialsGrantType + \"-\" + responseDetails.id}>\n            <AccessTokenView header={\"Client Credentials Grant\"}\n                             headerClass={\"client-credentials-grant\"}\n                             accessTokenDetails={responseDetails}\n                             onRemove={() => props.removeGrantTypeDetails(\n                                 responseDetails)} />\n        </React.Fragment>\n    }\n\n    return <React.Fragment key={resourceOwnerGrantType + \"-\" + responseDetails.id}>\n        <AccessTokenView header={\"Resource Owner Password Credentials Grant\"}\n                         headerClass={\"resource-owner-password-credentials-grant\"}\n                         accessTokenDetails={responseDetails}\n                         onRemove={() => props.removeGrantTypeDetails(\n                             responseDetails)} />\n    </React.Fragment>\n}\n\nclass AuthorizationCodeGrantForm extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            intervals: [],\n            requestDetails: []\n        }\n        this.setState = this.setState.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.loadAuthorizationRequestDetails = this.loadAuthorizationRequestDetails.bind(this);\n        this.patchWorkflowSettings = this.patchWorkflowSettings.bind(this);\n    }\n\n    componentWillUnmount()\n    {\n        this.state.requestDetails.forEach(requestDetails =>\n        {\n            if (requestDetails.interval !== undefined)\n            {\n                clearInterval(requestDetails.interval);\n            }\n        })\n    }\n\n    loadAuthorizationRequestDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n        this.setState({getAuthcode: true, errorMessage: undefined});\n\n        let scimClient = new ScimClient(AUTH_CODE_GRANT_ENDPOINT, this.setState);\n        let resource = scimClient.getResourceFromFormReference(this.props.formReference);\n        resource[CURRENT_WORKFLOW_URI] = this.props.workflowDetails;\n\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({getAuthcode: false});\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({errorMessage: errorResponse.detail});\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let redirectUri = new Optional(this.props.workflowDetails).map(w => w.authCodeParameters)\n                                                                  .map(a => a.redirectUri)\n                                                                  .orElse(undefined);\n        let queryParams = new Optional(this.props.workflowDetails).map(w => w.authCodeParameters)\n                                                                  .map(a => a.queryParameters)\n                                                                  .orElse(undefined);\n\n        workflowSettingsClient.updateAuthCodeSettings(openIdClientId, redirectUri, queryParams);\n    }\n\n    render()\n    {\n        let authCodeParameters = this.props.workflowDetails.authCodeParameters\n                                 || {redirectUri: this.props.originalRedirectUri};\n\n        return (\n            <React.Fragment>\n                <FormInputField name=\"authCodeParameters.redirectUri\"\n                                label=\"Redirect URI\"\n                                placeholder=\"The redirect uri that is added to the request parameters\"\n                                value={authCodeParameters.redirectUri}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)}>\n                    <a href={\"/#\"} onClick={this.props.resetRedirectUri} className={\"action-link\"}>\n                        <Reply /> <span>reset redirect uri</span>\n                    </a>\n                </FormInputField>\n                <FormInputField name=\"authCodeParameters.queryParameters\"\n                                label=\"Additional URL Query\"\n                                value={authCodeParameters.queryParameters}\n                                placeholder=\"add an optional query string that is appended to the request URL\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button type=\"submit\" onClick={this.loadAuthorizationRequestDetails}>\n                            <LoadingSpinner show={this.state.getAuthcode} /> Get Authorization Code\n                        </Button>\n                        {\n                            this.state.errorMessage &&\n                            <Alert variant={\"danger\"}>\n                                <small className={\"error\"}>\n                                    <GoFlame /> {this.state.errorMessage}\n                                </small>\n                            </Alert>\n                        }\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nclass ClientCredentialsGrantForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n        this.setState = this.setState.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n        this.patchWorkflowSettings = this.patchWorkflowSettings.bind(this);\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n        this.setState({accessingToken: true})\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let scope = new Optional(this.props.workflowDetails).map(w => w.clientCredentialsParameters)\n                                                            .map(c => c.scope)\n                                                            .orElse(undefined);\n        let resource = {\n            grantType: \"client_credentials\",\n            openIdClientId: parseInt(this.props.client.id),\n            scope: scope\n        }\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({accessingToken: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let scope = new Optional(this.props.workflowDetails).map(w => w.clientCredentialsParameters)\n                                                            .map(c => c.scope)\n                                                            .orElse(undefined);\n\n        workflowSettingsClient.updateClientCredentialsSettings(openIdClientId, scope);\n    }\n\n    render()\n    {\n        let clientCredentialsParameters = this.props.workflowDetails.clientCredentialsParameters || {};\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <FormInputField name=\"clientCredentialsParameters.scope\"\n                                label=\"Scope\"\n                                value={clientCredentialsParameters.scope || \"\"}\n                                placeholder=\"The scope to access from the identity provider\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button id={\"upload\"} type=\"submit\" onClick={this.retrieveAccessTokenDetails}>\n                            <LoadingSpinner show={this.state.accessingToken} /> Get Access Token\n                        </Button>\n                        <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                           messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                        .orElse([])} />\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nclass ResourceOwnerPasswordCredentialsForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n\n        this.setState({accessingToken: true});\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        let resource = {\n            grantType: \"password\",\n            openIdClientId: parseInt(this.props.client.id),\n            username: username,\n            password: password,\n            scope: scope\n        }\n\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({accessingToken: false});\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        workflowSettingsClient.updateResourceOwnerPasswordCredentialsSettings(openIdClientId, username, password,\n            scope);\n    }\n\n    render()\n    {\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <FormInputField name=\"resourceOwnerPasswordParameters.username\"\n                                label=\"Username\"\n                                value={username}\n                                placeholder={\"the username to authenticate\"}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <FormInputField name=\"resourceOwnerPasswordParameters.password\"\n                                label=\"Password\"\n                                placeholder={\"the users password\"}\n                                value={password}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <FormInputField name=\"resourceOwnerPasswordParameters.scope\"\n                                label=\"Scope\"\n                                value={scope}\n                                placeholder=\"The scope to access from the identity provider\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button id={\"upload\"} type=\"submit\" onClick={this.retrieveAccessTokenDetails}>\n                            <LoadingSpinner show={this.state.accessingToken} /> Get Access Token\n                        </Button>\n                        <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                           messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                        .orElse([])} />\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport ScimClient from \"../scim/scim-client\";\nimport {ArrowLeftCircle} from \"react-bootstrap-icons\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport HttpSettings from \"./http-settings\";\nimport {Optional} from \"../services/utils\";\nimport OpenidClientWorkflow from \"./openid-client-workflow\";\nimport {ApplicationInfoContext} from \"../app\";\n\nexport default class OpenidClientOverview extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let openIdProviderId = this.props.match.params.providerId;\n        let clientId = this.props.match.params.clientId;\n\n        let openIdProviderResourcePath = \"/scim/v2/OpenIdProvider\";\n        new ScimClient(openIdProviderResourcePath, this.setState).getResource(openIdProviderId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(openIdProvider =>\n                {\n                    this.setState({provider: openIdProvider});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n\n        let clientResourcePath = \"/scim/v2/OpenIdClient\";\n        new ScimClient(clientResourcePath, this.setState).getResource(clientId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(client =>\n                {\n                    this.setState({client: client});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n    }\n\n\n    render()\n    {\n        let provider = new Optional(this.state.provider);\n        let client = new Optional(this.state.client);\n\n        return (\n            <React.Fragment>\n                <LinkContainer exact\n                               to={\"/views/openIdProvider/\" + this.props.match.params.providerId\n                                   + \"/openIdClients\"}>\n                    <a href={\"/#\"}>\n                        <h5 style={{height: \"35px\", padding: \"0\", paddingLeft: \"10px\"}}>\n                            <ArrowLeftCircle style={{color: \"bisque\"}} height={\"35px\"} size={\"25px\"} />\n                            <span style={{marginLeft: \"15px\"}}>Back to\n                                <span style={{color: \"lightgray\"}}> \"{provider.map(val => val.name).orElse(\"\")}\" </span>\n                                                               Overview\n                            </span>\n                        </h5>\n                    </a>\n                </LinkContainer>\n\n                <h5>Client: <span style={{color: \"lightgray\"}}>{client.map(c => c.clientId).orElse(\"\")}</span></h5>\n\n                <Tabs defaultActiveKey=\"workflow\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"workflow\" title=\"OpenID Workflow\">\n                        {\n                            new Optional(this.state.client).isPresent() &&\n                            <ApplicationInfoContext.Consumer>\n                                {appInfo =>\n                                    <OpenidClientWorkflow client={this.state.client}\n                                                          originalRedirectUri={appInfo.authCodeRedirectUri} />\n                                }\n                            </ApplicationInfoContext.Consumer>\n                        }\n                    </Tab>\n                    <Tab eventKey=\"clients\" title=\"HTTP Settings\">\n                        {\n                            new Optional(this.state.client).isPresent() &&\n                            <HttpSettings client={this.state.client} />\n                        }\n                    </Tab>\n                </Tabs>\n            </React.Fragment>\n        )\n    }\n}","import ScimClient from \"../scim/scim-client\";\nimport {SEARCH_REQUEST_URI, TOKEN_CATEGORY_ENDPOINT, TOKEN_CATEGORY_URI} from \"../scim/scim-constants\";\n\nexport class TokenCategoryClient\n{\n  \n  constructor()\n  {\n    this.scimClient = new ScimClient(TOKEN_CATEGORY_ENDPOINT, () =>\n    {\n    });\n  }\n  \n  createCategory(name, onSuccess, onError)\n  {\n    let category = {\n      schemas: [TOKEN_CATEGORY_URI],\n      name: name\n    };\n    this.scimClient.createResource(category)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  listCategories({\n                   startIndex,\n                   filter,\n                   sortBy,\n                   sortOrder\n                 } = {}, onSuccess, onError)\n  {\n    let searchRequest = {\n      schemas: [SEARCH_REQUEST_URI],\n      sortBy: sortBy,\n      sortOrder: sortOrder || \"ascending\",\n      filter: filter,\n      startIndex: startIndex\n    };\n    this.scimClient.listResourcesWithPost(searchRequest, onSuccess, onError);\n  }\n  \n  updateCategory(id, name, onSuccess, onError)\n  {\n    let category = {\n      schemas: [TOKEN_CATEGORY_URI],\n      name: name\n    };\n    this.scimClient.updateResource(category, id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  deleteCategory(category, onSuccess, onError)\n  {\n    this.scimClient.deleteResource(category.id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  onSuccess(category);\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n}\n","import ScimClient from \"../scim/scim-client\";\nimport {\n  BULK_ENDPOINT,\n  BULK_REQUEST_URI,\n  SEARCH_REQUEST_URI,\n  TOKEN_STORE_ENDPOINT,\n  TOKEN_STORE_URI\n} from \"../scim/scim-constants\";\n\nexport class TokenStoreClient\n{\n  constructor()\n  {\n    this.scimClient = new ScimClient(TOKEN_STORE_ENDPOINT, () =>\n    {\n    });\n  }\n  \n  createTokenStore(name, token, categoryId, onSuccess, onError)\n  {\n    let tokenStore = {\n      schemas: [TOKEN_STORE_URI],\n      name: name,\n      token: token,\n      categoryId: categoryId\n    };\n    this.scimClient.createResource(tokenStore)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  listTokenStores({\n                    startIndex,\n                    filter,\n                    sortBy,\n                    sortOrder\n                  } = {}, onSuccess, onError)\n  {\n    let searchRequest = {\n      schemas: [SEARCH_REQUEST_URI],\n      sortBy: sortBy,\n      sortOrder: sortOrder || \"ascending\",\n      filter: filter,\n      startIndex: startIndex\n    };\n    this.scimClient.listResourcesWithPost(searchRequest, onSuccess, onError);\n  }\n  \n  updateTokenStore(id, name, token, categoryId, onSuccess, onError)\n  {\n    let tokenStore = {\n      schemas: [TOKEN_STORE_URI],\n      name: name,\n      token: token,\n      categoryId: categoryId\n    };\n    this.scimClient.updateResource(tokenStore, id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  deleteTokenStore(token, onSuccess, onError)\n  {\n    this.scimClient.deleteResource(token.id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  onSuccess(token);\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  bulkDeleteTokenStores(tokenStoreArray, maxOperations, onSuccess, onError)\n  {\n    \n    function sendBulkRequest(bulkOperations)\n    {\n      let bulkRequest = {\n        \"schemas\": [BULK_REQUEST_URI],\n        \"Operations\": bulkOperations\n      };\n      \n      fetch(BULK_ENDPOINT, {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/scim+json'},\n        body: JSON.stringify(bulkRequest)\n      })\n        .then(response =>\n              {\n                if (response.status === 200)\n                {\n                  response.json()\n                          .then(resource =>\n                                {\n                                  let ops = resource.Operations;\n                                  let deleteSuccessIds = [];\n                                  let deleteFailedIds = [];\n                                  ops.forEach(deletedResponseOperations =>\n                                              {\n                                                if (deletedResponseOperations.status === 204)\n                                                {\n                                                  deleteSuccessIds.push(deletedResponseOperations.bulkId);\n                                                }\n                                                else\n                                                {\n                                                  deleteFailedIds.push(deletedResponseOperations.bulkId);\n                                                }\n                                              });\n                                  onSuccess(deleteSuccessIds, deleteFailedIds);\n                                });\n                }\n                else\n                {\n                  response.json()\n                          .then(errorResponse =>\n                                {\n                                  onError(errorResponse);\n                                });\n                }\n              });\n    }\n    \n    let operations = [];\n    for (let i = 0; i < tokenStoreArray.length; i++)\n    {\n      let tokenStore = tokenStoreArray[i];\n      operations.push(\n        {\n          method: \"DELETE\",\n          bulkId: tokenStore.id,\n          path: \"/TokenStore/\" + tokenStore.id\n        }\n      );\n      \n      if (operations.length === maxOperations)\n      {\n        sendBulkRequest([...operations]);\n        operations = [];\n      }\n    }\n    \n    if (operations.length > 0)\n    {\n      sendBulkRequest(operations);\n    }\n  }\n}\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {TokenStoreClient} from \"./token-store-client\";\nimport {Alert, Table} from \"react-bootstrap\";\nimport {CheckLg, Eye, EyeFill, PencilSquare, PlusLg, Save, Trash, XLg} from \"react-bootstrap-icons\";\nimport {Optional} from \"../services/utils\";\nimport {GoFlame} from \"react-icons/go\";\nimport {ScimServiceProviderContext} from \"../app\";\n\nexport function TokenStoreList(props)\n{\n  const [errors, setErrors] = useState({});\n  const [loadedOnce, setloadedOnce] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [tokenStoreList, setTokenStoreList] = useState([]);\n  \n  function addNewTokenStores(tokenStoreArray)\n  {\n    let newTokenStores = [...tokenStoreList].concat(tokenStoreArray);\n    newTokenStores.sort((c1, c2) => c1.name.localeCompare(c2.name));\n    setTotalResults(totalResults + tokenStoreArray.length);\n    setTokenStoreList(newTokenStores);\n    props.setCategoryEntires(props.category, totalResults + tokenStoreArray.length);\n  }\n  \n  function updateTokenStore(oldtokenStore, newTokenStore)\n  {\n    let copiedTokenStores = [...tokenStoreList];\n    let indexOf = copiedTokenStores.indexOf(oldtokenStore);\n    copiedTokenStores.splice(indexOf, 1, newTokenStore);\n    copiedTokenStores.sort((c1, c2) => c1.name.localeCompare(c2.name));\n    setTokenStoreList(copiedTokenStores);\n  }\n  \n  function removeTokenStore(tokenStoreArray)\n  {\n    let copiedTokenStores = [...tokenStoreList];\n    tokenStoreArray.forEach(tokenStore =>\n                            {\n                              let indexOf = copiedTokenStores.indexOf(tokenStore);\n                              copiedTokenStores.splice(indexOf, 1);\n                            });\n    setTotalResults(totalResults - tokenStoreArray.length);\n    setTokenStoreList(copiedTokenStores);\n    props.setCategoryEntires(props.category, totalResults - tokenStoreArray.length);\n  }\n  \n  function toggleSingleCeckbox(checked, tokenStore)\n  {\n    tokenStore.checked = checked;\n    let copiedTokenStores = [...tokenStoreList];\n    let indexOf = copiedTokenStores.indexOf(tokenStore);\n    copiedTokenStores.splice(indexOf, 1, tokenStore);\n    setTokenStoreList(copiedTokenStores);\n  }\n  \n  function toggleAllCheckboxes(checked)\n  {\n    let copiedTokenStores = [...tokenStoreList];\n    copiedTokenStores.forEach(tokenStore =>\n                              {\n                                tokenStore.checked = checked;\n                              });\n    setTokenStoreList(copiedTokenStores);\n  }\n  \n  useEffect(() =>\n            {\n              setloadedOnce(false);\n              setTotalResults(0);\n              setTokenStoreList([]);\n            }, [props.filter]);\n  \n  useEffect(() =>\n            {\n              let searchRequest = {\n                startIndex: tokenStoreList.length,\n                filter: new Optional(props.filter).map(v => v.trim())\n                                                  .map(v => v.length === 0 ? undefined : v)\n                                                  .map(v => \"token co \\\"\" + v + \"\\\" and categoryId eq \" + props.category.id)\n                                                  .orElse(\"categoryId eq \" + props.category.id),\n                sortBy: \"name\"\n              };\n    \n              function onSuccess(listResponse)\n              {\n                setTotalResults(listResponse.totalResults);\n                let newResources = listResponse.Resources || [];\n                addNewTokenStores([...newResources]);\n                setloadedOnce(true);\n              }\n    \n              function onError(errorResponse)\n              {\n                setErrors(errorResponse);\n              }\n    \n              if ((totalResults === 0 && !loadedOnce) || tokenStoreList.length < totalResults)\n              {\n                new TokenStoreClient().listTokenStores(searchRequest, onSuccess, onError);\n              }\n            }, [tokenStoreList]);\n  \n  return <React.Fragment>\n    {\n      errors && errors.length > 0 &&\n      <Alert variant={\"danger\"}>\n        <GoFlame /> {errors.details}\n      </Alert>\n    }\n    <TokenStoreTable category={props.category}\n                     tokenStoreList={tokenStoreList}\n                     addNewTokenStores={addNewTokenStores}\n                     updateTokenStore={updateTokenStore}\n                     removeTokenStore={removeTokenStore}\n                     toggleSingleCeckbox={toggleSingleCeckbox}\n                     toggleAllCheckboxes={toggleAllCheckboxes} />\n  </React.Fragment>;\n}\n\nfunction TokenStoreTable(props)\n{\n  \n  const [error, setError] = useState();\n  const [bulkDeleteMode, setBulkDeleteMode] = useState(false);\n  const [addNew, setAddNew] = useState(false);\n  \n  const serviceProviderContext = useContext(ScimServiceProviderContext);\n  \n  function deleteTokenStore(tokenStoreArray)\n  {\n    function onSuccess()\n    {\n      props.removeTokenStore(tokenStoreArray);\n    }\n    \n    function onError(errorResponse)\n    {\n      setError(errorResponse);\n    }\n    \n    new TokenStoreClient().deleteTokenStore(tokenStoreArray[0], onSuccess, onError);\n  }\n  \n  function bulkDeleteTokenStore()\n  {\n    let tokenStoreArray = props.tokenStoreList.filter(tokenStore => tokenStore.checked);\n    \n    function onSuccess(successfulDeleteIds, failedDeleteIds)\n    {\n      let deletedTokenStores = tokenStoreArray.filter(tokenStore => successfulDeleteIds.includes(tokenStore.id));\n      props.removeTokenStore(deletedTokenStores);\n      setBulkDeleteMode(false);\n    }\n    \n    function onError(errorResponse)\n    {\n      setError(errorResponse);\n      setBulkDeleteMode(false);\n    }\n    \n    new TokenStoreClient().bulkDeleteTokenStores(tokenStoreArray,\n                                                 serviceProviderContext.bulk.maxOperations,\n                                                 onSuccess,\n                                                 onError);\n  }\n  \n  return <React.Fragment>\n    {\n      error && error.length > 0 &&\n      <Alert variant={\"danger\"}>\n        <GoFlame /> {error.detail}\n      </Alert>\n    }\n    <Table striped bordered hover size=\"sm\" variant={\"dark\"}>\n      <thead>\n        <tr>\n          <th className={\"checkbox-column\"}>\n            <input type={\"checkbox\"}\n                   onChange={e => props.toggleAllCheckboxes(e.target.checked)} />\n          </th>\n          <th className={\"token-store-id-column\"}>id</th>\n          <th className={\"token-store-name-column\"}>name</th>\n          <th>token</th>\n          <th className={\"timestamp-column\"}>timestamps</th>\n          <th className={\"icon-column\"}>\n            {\n              !bulkDeleteMode &&\n              <React.Fragment>\n                <PlusLg className={\"listed-icon icon\"} onClick={() => setAddNew(true)} />\n                <Trash className={\"icon\"} onClick={() => setBulkDeleteMode(true)} />\n              </React.Fragment>\n            }\n            {\n              bulkDeleteMode &&\n              <span className={\"list-delete-insertion\"}>\n                sure? <CheckLg className={\"listed-icon icon\"} onClick={() => bulkDeleteTokenStore()} />\n                <XLg className={\"icon\"} onClick={() => setBulkDeleteMode(false)} />\n              </span>\n            }\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          addNew &&\n          <TokenStoreRow tokenStore={{\n            id: 0,\n            categoryId: parseInt(props.category.id)\n          }}\n                         editMode={true}\n                         addNewTokenStores={resourceArray =>\n                         {\n                           setAddNew(false);\n                           props.addNewTokenStores(resourceArray);\n                         }}\n                         removeTokenStore={() => setAddNew(false)} />\n        }\n        {\n          props.tokenStoreList.map(tokenStore => <TokenStoreRow key={tokenStore.id}\n                                                                tokenStore={tokenStore}\n                                                                toggleSingleCeckbox={props.toggleSingleCeckbox}\n                                                                addNewTokenStores={props.addNewTokenStores}\n                                                                updateTokenStore={props.updateTokenStore}\n                                                                removeTokenStore={deleteTokenStore} />)\n        }\n      </tbody>\n    </Table>\n  </React.Fragment>;\n}\n\nfunction TokenStoreRow(props)\n{\n  \n  const [error, setError] = useState();\n  const [deleteMode, setDeleteMode] = useState(false);\n  const [editMode, setEditMode] = useState(props.editMode);\n  const [viewTokenMode, setViewTokenMode] = useState(false);\n  \n  const [token, setToken] = useState(props.tokenStore.token || \"\");\n  const [tokenName, setTokenName] = useState(props.tokenStore.name || \"\");\n  \n  function onError(errorResponse)\n  {\n    setError(errorResponse);\n  }\n  \n  function createNewTokenStore()\n  {\n    function onSuccess(resource)\n    {\n      setEditMode(false);\n      props.addNewTokenStores([resource]);\n    }\n    \n    setError(null);\n    new TokenStoreClient().createTokenStore(tokenName, token, props.tokenStore.categoryId, onSuccess, onError);\n  }\n  \n  function updateTokenStore()\n  {\n    function onSuccess(resource)\n    {\n      setEditMode(false);\n      props.updateTokenStore(props.tokenStore, resource);\n    }\n    \n    setError(null);\n    if (props.tokenStore.name !== tokenName || props.tokenStore.token !== token)\n    {\n      new TokenStoreClient().updateTokenStore(props.tokenStore.id,\n                                              tokenName,\n                                              token,\n                                              props.tokenStore.categoryId,\n                                              onSuccess,\n                                              onError);\n    }\n    else\n    {\n      setEditMode(false);\n    }\n  }\n  \n  function resetChanges()\n  {\n    setTokenName(props.tokenStore.name);\n    setToken(props.tokenStore.token);\n    setEditMode(false);\n  }\n  \n  return <React.Fragment>\n    <tr>\n      <td><input type={\"checkbox\"} checked={props.tokenStore.checked || false}\n                 onChange={e => props.toggleSingleCeckbox(e.target.checked, props.tokenStore)} /></td>\n      <td>{props.tokenStore.id}</td>\n      <td>\n        {\n          !editMode &&\n          tokenName\n        }\n        {\n          editMode &&\n          <input type={\"text\"} value={tokenName} onChange={e => setTokenName(e.target.value)} />\n        }\n      </td>\n      <td className={\"overflow-column\"}>\n        {\n          !editMode &&\n          <React.Fragment>\n            {\n              !viewTokenMode &&\n              <article className={\"token-overview-short\"}>{token}</article>\n            }\n            {\n              viewTokenMode &&\n              <textarea className={\"token-overview\"} readOnly={true} value={token} />\n            }\n            {\n              !viewTokenMode &&\n              <Eye className={\"right-floating-icon eye-icon\"} onClick={() => setViewTokenMode(!viewTokenMode)} />\n            }\n            {\n              viewTokenMode &&\n              <EyeFill className={\"right-floating-icon eye-icon\"} onClick={() => setViewTokenMode(!viewTokenMode)} />\n            }\n          </React.Fragment>\n        }\n        {\n          editMode &&\n          <textarea value={token} onChange={e => setToken(e.target.value)} className={\"token-area\"} wrap=\"off\" />\n        }\n      </td>\n      <td>\n        <span>\n          created: {new Optional(props.tokenStore.meta).map(val => val.created)\n                                                       .map(val => new Date(val).toLocaleString())\n                                                       .orElse(null)}\n        </span>\n        <br />\n        <span>\n          modified: {new Optional(props.tokenStore.meta).map(val => val.lastModified)\n                                                        .map(val => new Date(val).toLocaleString())\n                                                        .orElse(null)}\n        </span>\n      </td>\n      <td>\n        {\n          !deleteMode &&\n          <React.Fragment>\n            {\n              !editMode &&\n              <PencilSquare onClick={() => setEditMode(!editMode)} className={\"listed-icon icon\"} />\n            }\n            {\n              editMode &&\n              <React.Fragment>\n                <Save className={\"listed-icon icon\"}\n                      onClick={() =>\n                      {\n                        if (props.tokenStore.id === 0)\n                        {\n                          createNewTokenStore();\n                        }\n                        else\n                        {\n                          updateTokenStore();\n                        }\n                      }} />\n                <XLg className={\"listed-icon icon\"}\n                     onClick={() => resetChanges()} />\n              </React.Fragment>\n            }\n            <Trash onClick={() => setDeleteMode(true)} className={\"icon\"} />\n          </React.Fragment>\n        }\n        {\n          deleteMode &&\n          <span className={\"list-delete-insertion\"}>\n            sure? <CheckLg className={\"listed-icon icon\"}\n                           onClick={() =>\n                           {\n                             setDeleteMode(false);\n                             props.removeTokenStore([props.tokenStore]);\n                           }} />\n            <XLg className={\"listed-icon icon\"}\n                 onClick={() => setDeleteMode(false)} />\n          </span>\n        }\n      </td>\n    </tr>\n  \n  </React.Fragment>;\n}\n","import React, {useEffect, useState} from \"react\";\nimport {TokenCategoryClient} from \"./token-category-client\";\nimport {Alert, Button, Col, Form, ListGroup, Row, Tab} from \"react-bootstrap\";\nimport {ArrowRightCircle, PencilSquare, PlusLg, Save, Trash, XLg} from \"react-bootstrap-icons\";\nimport {GoFlame} from \"react-icons/go\";\nimport {TokenStoreList} from \"./token-store-list\";\n\nexport function TokenCategoryList()\n{\n  \n  const [errors, setErrors] = useState({});\n  const [filter, setFilter] = useState(\"\");\n  const [loadedOnce, setloadedOnce] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [tokenCategoryList, setTokenCategoryList] = useState([]);\n  const [tokensRemovedByFilter, setTokensRemovedByFilter] = useState([]);\n  \n  function addNewCategories(categoryArray)\n  {\n    let newTokenCategories = [...tokenCategoryList, ...categoryArray];\n    newTokenCategories.sort((c1, c2) => c1.name.localeCompare(c2.name));\n    setTokenCategoryList(newTokenCategories);\n  }\n  \n  function updateCategory(oldCategory, newCategory)\n  {\n    let copiedList = [...tokenCategoryList];\n    let indexOf = copiedList.indexOf(oldCategory);\n    copiedList.splice(indexOf, 1, newCategory);\n    setTokenCategoryList([...copiedList]);\n  }\n  \n  function removeCategory(category)\n  {\n    let copiedList = [...tokenCategoryList];\n    let index = copiedList.indexOf(category);\n    copiedList.splice(index, 1);\n    setTotalResults(totalResults - 1);\n    setTokenCategoryList([...copiedList]);\n  }\n  \n  function setCategoryEntires(category, numberOfEntries)\n  {\n    category.numberOfEntries = numberOfEntries;\n    let copiedList = [...tokenCategoryList];\n    setTokenCategoryList([...copiedList]);\n  }\n  \n  useEffect(() =>\n            {\n              let searchRequest = {\n                startIndex: tokenCategoryList.length,\n                sortBy: \"name\"\n              };\n    \n              function onSuccess(listResponse)\n              {\n                setTotalResults(listResponse.totalResults);\n                let newResources = listResponse.Resources || [];\n                addNewCategories([...newResources]);\n                setloadedOnce(true);\n              }\n    \n              function onError(errorResponse)\n              {\n                setErrors(errorResponse);\n              }\n    \n              if ((totalResults === 0 && !loadedOnce) || tokenCategoryList.length < totalResults)\n              {\n                new TokenCategoryClient().listCategories(searchRequest, onSuccess, onError);\n              }\n            }, [tokenCategoryList]);\n  \n  useEffect(() =>\n            {\n    \n            }, [filter]);\n  \n  return <React.Fragment>\n    {\n      errors && errors.length > 0 &&\n      <Alert variant={\"danger\"}>\n        <Form.Text>\n          {JSON.stringify(errors)}\n        </Form.Text>\n      </Alert>\n    }\n    <Tab.Container id=\"list-group-tabs-example\">\n      <Row>\n        <Col sm={3}>\n          <h5>found a total of {totalResults} categories</h5>\n        </Col>\n        <Col>\n          <div className={\"filter-block\"}>\n              <span>\n                <span>search for token part: </span>\n                <input id={\"filter-input\"}\n                       onKeyUp={e =>\n                       {\n                         if (e.key === 'Enter')\n                         {\n                           setFilter(document.getElementById(\"filter-input\").value);\n                         }\n                       }} />\n                <Button onClick={e => setFilter(document.getElementById(\"filter-input\").value)}\n                >search</Button>\n              </span>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <ListGroup>\n            <CategoryHeader addToTokenCategoryList={resource =>\n            {\n              setTotalResults(totalResults + 1);\n              addNewCategories([resource]);\n            }} />\n            {\n              tokenCategoryList &&\n              tokenCategoryList.map(tokenCategory =>\n                                    {\n                                      return <CategoryListItem key={tokenCategory.id}\n                                                               category={tokenCategory}\n                                                               updateCategory={updateCategory}\n                                                               removeCategory={removeCategory} />;\n                                    })\n            }\n          </ListGroup>\n        </Col>\n        <Col sm={9}>\n          <Tab.Content>\n            {\n              tokenCategoryList &&\n              tokenCategoryList.map(tokenCategory =>\n                                    {\n                                      return <Tab.Pane key={tokenCategory.id}\n                                                       eventKey={\"#\" + tokenCategory.id}>\n                                        <TokenStoreList category={tokenCategory} filter={filter}\n                                                        setCategoryEntires={setCategoryEntires} />\n                                      </Tab.Pane>;\n                                    })\n            }\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n  </React.Fragment>;\n}\n\nfunction CategoryListItem(props)\n{\n  \n  const [errors, setErrors] = useState({});\n  const [editMode, setEditMode] = useState(false);\n  const [deleteMode, setDeleteMode] = useState(false);\n  const [value, setValue] = useState(props.category.name);\n  \n  function updateCategory()\n  {\n    setErrors(null);\n    \n    function onSuccess(newCategory)\n    {\n      props.updateCategory(props.category, newCategory);\n    }\n    \n    if (props.category.name !== value)\n    {\n      new TokenCategoryClient().updateCategory(props.category.id,\n                                               value,\n                                               onSuccess,\n                                               errorResponse => setErrors(errorResponse));\n    }\n  }\n  \n  function deleteCategory()\n  {\n    setErrors(null);\n    \n    function onSuccess(resource)\n    {\n      props.removeCategory(resource);\n    }\n    \n    new TokenCategoryClient().deleteCategory(props.category, onSuccess, errorResponse => setErrors(errorResponse));\n  }\n  \n  let numberOfEntries = props.category.numberOfEntries || 0;\n  \n  return <ListGroup.Item variant={(numberOfEntries === 0) ? \"dark\" : \"light\"}\n                         action\n                         href={\"#\" + props.category.id}\n                         onKeyDown={e => editMode && e.stopPropagation()}>\n    <ArrowRightCircle style={{margin: \"0 10px 0 0\"}} />\n    {\n      !editMode &&\n      <React.Fragment>\n        {value} [{numberOfEntries}]\n      </React.Fragment>\n    }\n    {\n      editMode &&\n      <input type={\"text\"}\n             className={\"listed-category-header-input\"}\n             value={value}\n             onChange={e => setValue(e.target.value)}\n             onKeyUp={e =>\n             {\n               if (e.key === 'Enter')\n               {\n                 updateCategory();\n                 setEditMode(!editMode);\n               }\n               else if (e.key === 'Escape')\n               {\n                 setValue(props.category.name);\n                 setEditMode(false);\n               }\n             }} />\n    }\n    <Trash className={\"add-list-item-icon delete-icon\"}\n           onClick={() => setDeleteMode(!deleteMode)} />\n    {\n      editMode &&\n      <XLg className={\"add-list-item-icon abort-icon listed-icon\"}\n           onClick={() =>\n           {\n             setValue(props.category.name);\n             setEditMode(false);\n           }} />\n    }\n    <EditIcon editMode={editMode}\n              classNames={\"add-list-item-icon edit-icon listed-icon\"}\n              onClick={() =>\n              {\n                if (editMode)\n                {\n                  props.category.name = value;\n                  updateCategory();\n                }\n                setEditMode(!editMode);\n              }} />\n    {\n      deleteMode &&\n      <DeleteCategoryBlock deleteMode={deleteMode} setDeleteMode={setDeleteMode} deleteCategory={deleteCategory} />\n    }\n    {\n      errors && errors.detail &&\n      <Alert variant={\"danger\"}>\n        <Form.Text>\n          <GoFlame /> {errors.detail}\n        </Form.Text>\n      </Alert>\n    }\n  </ListGroup.Item>;\n}\n\nfunction DeleteCategoryBlock(props)\n{\n  \n  return <div className={\"list-delete-insertion\"}>\n    <div className={\"list-delete-text\"}>\n      delete category?\n    </div>\n    <Button variant={\"danger\"}\n            className={\"listed-icon list-button\"}\n            onClick={() =>\n            {\n              props.deleteCategory();\n              props.setDeleteMode(false);\n            }}>\n      Yes\n    </Button>\n    <Button variant={\"secondary\"} className={\"listed-icon\"} onClick={() =>\n    {\n      props.setDeleteMode(false);\n    }}>\n      No\n    </Button>\n  </div>;\n}\n\nfunction EditIcon(props)\n{\n  return <React.Fragment>\n    {\n      !props.editMode &&\n      <PencilSquare className={props.classNames}\n                    onClick={props.onClick} />\n    }\n    {\n      props.editMode &&\n      <Save className={props.classNames}\n            onClick={props.onClick} />\n    }\n  </React.Fragment>;\n}\n\nfunction CategoryHeader(props)\n{\n  \n  const [errors, setErrors] = useState({});\n  const [category, setCategory] = useState();\n  \n  function saveNewCategory()\n  {\n    function onSaveSuccess(category)\n    {\n      props.addToTokenCategoryList(category);\n      setCategory(null);\n      setErrors(null);\n    }\n    \n    function onSaveError(errorResponse)\n    {\n      setErrors(errorResponse);\n    }\n    \n    new TokenCategoryClient().createCategory(category, onSaveSuccess, onSaveError);\n  }\n  \n  return <React.Fragment>\n    <ListGroup.Item variant={\"warning\"}>\n      Categories <PlusLg className={\"add-list-item-icon\"}\n                         onClick={() =>\n                         {\n                           if (!category)\n                           {\n                             setCategory(\"new_category\");\n                           }\n                         }} />\n    </ListGroup.Item>\n    {\n      category &&\n      <ListGroup.Item variant=\"secondary\">\n        <input type={\"text\"}\n               className={\"list-item-input\"}\n               value={category}\n               onChange={e => setCategory(e.target.value)}\n               onKeyUp={e =>\n               {\n                 if (e.key === 'Enter')\n                 {\n                   saveNewCategory();\n                 }\n               }} />\n        <XLg className={\"add-list-item-icon delete-icon edit\"}\n             onClick={() => setCategory(null)} />\n        <Save className={\"add-list-item-icon save-icon listed-icon edit\"}\n              onClick={() => saveNewCategory()} />\n        {\n          errors && errors.detail &&\n          <Alert variant={\"danger\"}>\n            <Form.Text>\n              <GoFlame /> {errors.detail}\n            </Form.Text>\n          </Alert>\n        }\n      </ListGroup.Item>\n    }\n  </React.Fragment>;\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport {LinkContainer} from 'react-router-bootstrap'\nimport SystemOverview from \"./admin/system/system-overview\";\nimport ScimClient from \"./scim/scim-client\";\nimport OpenidProvider from \"./openid/openid-provider\";\nimport JwtHandler from \"./jwt/jwt-handler\";\nimport OpenidClients from \"./openid/openid-clients\";\nimport OpenidClientOverview from \"./openid/openid-client-overview\";\nimport {AlertListMessages} from \"./base/form-base\";\nimport {GoFlame} from \"react-icons/go\";\nimport {TokenCategoryList} from \"./tokens/token-category\";\n\n\nexport const ApplicationInfoContext = React.createContext(null);\nexport const ScimServiceProviderContext = React.createContext(null);\n\nclass Application extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            serviceProviderConfig: {\n                bulk: {\n                    maxOperations: 5,\n                    maxPayloadSize: 2097152\n                },\n                filter: {\n                    maxResults: 5\n                }\n            }\n        }\n        this.setState = this.setState.bind(this);\n    }\n\n    async componentDidMount() {\n        let scimClient = new ScimClient(\"/scim/v2/ServiceProviderConfig\", this.setState);\n        scimClient.listResources().then(response => {\n            if (response.success) {\n                response.resource.then(serviceProviderConfig => {\n                    this.setState({serviceProviderConfig: serviceProviderConfig});\n                })\n            }\n        })\n\n        scimClient.getResource(null, \"/scim/v2/AppInfo\").then(response => {\n            if (response.success) {\n                response.resource.then(appInfo => {\n                    this.setState({appInfo: appInfo});\n                })\n            }\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Router>\n                    <Navbar collapseOnSelect expand=\"lg\" bg=\"navigation\">\n                        <Container>\n                            <Navbar.Brand href=\"#home\">Captain Goldfish's Rest Client</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                                <Nav className=\"me-auto\" />\n                                <Nav>\n                                    <Nav.Link href=\"#\">\n                                        <img src={logo} className=\"react-logo\" alt=\"logo\" />\n                                    </Nav.Link>\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Container>\n                    </Navbar>\n\n                    <Navbar bg=\"navigation-left\" className={\"navbar-left\"} expand=\"md\" variant=\"dark\">\n                        <Navbar.Collapse>\n\n                            <Nav className=\"flex-column\">\n                                <LinkContainer exact to=\"/views/openIdProvider\">\n                                    <Nav.Link>OpenID</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/jwts\">\n                                    <Nav.Link>JWTs</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/tokenCategories\">\n                                    <Nav.Link>Storage</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/system\">\n                                    <Nav.Link>System</Nav.Link>\n                                </LinkContainer>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n\n                    <div className=\"main\">\n                        <AlertListMessages variant={\"danger\"}\n                                           icon={<GoFlame />}\n                                           messages={(this.state.errors || {}).errorMessages} />\n\n                        <ApplicationInfoContext.Provider value={this.state.appInfo}>\n                            <ScimServiceProviderContext.Provider value={this.state.serviceProviderConfig}>\n                                {/* A <Switch> looks through its children <Route>s and\n                                 renders the first one that matches the current URL. */}\n                                <Switch>\n                                    <Route path=\"/views/system\">\n                                        <SystemOverview />\n                                    </Route>\n                                    <Route path={\"/views/openIdProvider/:providerId/client/:clientId\"}\n                                           component={OpenidClientOverview} />\n                                    <Route path={\"/views/openIdProvider/:id/openIdClients\"}\n                                           render={route => {\n                                               return <OpenidClients match={route.match}\n                                                                     serviceProviderConfig={this.state.serviceProviderConfig} />\n                                           }} />\n                                    <Route path=\"/views/openIdProvider\">\n                                        <OpenidProvider serviceProviderConfig={this.state.serviceProviderConfig} />\n                                    </Route>\n                                    <Route path=\"/views/jwts\">\n                                        <JwtHandler />\n                                    </Route>\n                                    <Route path=\"/views/tokenCategories\">\n                                        <TokenCategoryList />\n                                    </Route>\n                                    <Route path=\"/\">\n                                        <Redirect to=\"/views/jwts\" />\n                                    </Route>\n                                </Switch>\n                            </ScimServiceProviderContext.Provider>\n                        </ApplicationInfoContext.Provider>\n                    </div>\n                </Router>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default Application;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport reportWebVitals from './reportWebVitals';\nimport Application from \"./app\";\n\nReactDOM.render(\n    <Application />\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {Optional, toBase64} from \"../services/utils\";\nimport * as lodash from \"lodash\";\n\nexport default class ScimClient {\n\n    constructor(resourcePath, setState) {\n        this.resourcePath = resourcePath;\n        this.setState = setState;\n        this.resetErrors = this.resetErrors.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.createResource = this.createResource.bind(this);\n        this.getErrors = this.getErrors.bind(this);\n        this.isLoading = this.isLoading.bind(this);\n        this.parseErrorResponse = this.parseErrorResponse.bind(this);\n    }\n\n    isLoading(value) {\n        this.setState({isLoading: value});\n    }\n\n    resetErrors() {\n        this.setState({errors: {}});\n    }\n\n    handleError(jsonPromise) {\n        jsonPromise.then(errorResponse => {\n            let errors = {};\n            if (errorResponse.errors === undefined) {\n                errors.errorMessages = new Optional(errors.errorMessages).orElse([]);\n                if (errorResponse.detail === undefined) {\n                    errors.errorMessages.push(JSON.stringify(errorResponse));\n                } else {\n                    errors.errorMessages.push(errorResponse.detail);\n                }\n            } else {\n                errors = errorResponse.errors;\n            }\n            new Optional(this.setState).ifPresent(method => method({errors: errors}));\n        })\n    }\n\n    async createResource(resource) {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath, {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(resource)\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 201) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async getResource(id, resourcePath, params) {\n        this.isLoading(true);\n        this.resetErrors();\n\n        let path = new Optional(resourcePath).orElse(this.resourcePath);\n\n        let searchParams = new Optional(params).map(parameters => \"?\" + new URLSearchParams(parameters).toString())\n            .orElse(\"\");\n        let url = path + new Optional(id).map(val => \"/\" + encodeURIComponent(val)).orElse(\"\") + searchParams;\n\n        return await fetch(url, {\n            method: \"GET\"\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    listResources({startIndex, count, filter, sortBy, sortOrder, attributes, excludedAttributes} = {}) {\n        this.isLoading(true);\n        this.resetErrors();\n        let startIndexParam = new Optional(startIndex).map(val => \"startIndex=\" + val).orElse(null);\n        let countParam = new Optional(count).map(val => \"count=\" + val).orElse(null);\n        let filterParam = new Optional(filter).map(val => \"filter=\" + encodeURI(val)).orElse(null);\n        let sortByParam = new Optional(sortBy).map(val => \"sortBy=\" + encodeURI(val)).orElse(null);\n        let sortOrderParam = new Optional(sortOrder).map(val => \"sortOrder=\" + val).orElse(null);\n        let attributesParam = new Optional(attributes).map(val => \"attributes=\" + encodeURI(val)).orElse(null);\n        let excludedAttributesParam = new Optional(excludedAttributes).map(\n            val => \"excludedAttributes=\" + encodeURI(val)).orElse(null);\n\n        let query = Array.of(startIndexParam, countParam, filterParam, sortByParam, sortOrderParam, attributesParam,\n            excludedAttributesParam)\n            .filter(val => val != null)\n            .join(\"&\");\n\n        query = new Optional(query).filter(val => val.length > 0).map(val => \"?\" + val).orElse(\"\");\n\n        let requestUrl = this.resourcePath + query;\n\n        return fetch(requestUrl, {\n            method: \"GET\"\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                }\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    listResourcesWithPost(searchRequest, onSuccess, onError) {\n        let requestUrl = this.resourcePath + \"/.search\";\n\n        return fetch(requestUrl, {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(searchRequest)\n        }).then(response => {\n            if (response.status === 200) {\n                response.json().then(resource => {\n                    onSuccess(resource);\n                })\n            } else {\n                response.text().then(errorResponse => {\n                    onError(this.parseErrorResponse(errorResponse));\n                })\n            }\n        })\n    }\n\n    async updateResource(resource, id) {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"PUT\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(resource)\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async patchResource(patchBody, id) {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"PATCH\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(patchBody)\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    deleteResource(id) {\n        this.isLoading(true);\n        this.resetErrors();\n        return fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"DELETE\"\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 204) {\n                return {\n                    success: true,\n                    status: response.status\n                };\n            } else {\n                this.handleError(response.json());\n                return {\n                    success: false,\n                    status: response.status\n                }\n            }\n        })\n    }\n    \n    /**\n     * accesses the the form-reference with name \"this.formReference\" reads its input and select fields and builds a\n     * scim resource from it that will be used in the following request\n     */\n    async getResourceFromFormReference(formReference) {\n        let scimResource = {};\n\n        let handleInputField = async function (inputfield) {\n            let name = inputfield.name;\n            let inputFieldValue;\n            if (inputfield.type === 'file') {\n                if (inputfield.files !== undefined && inputfield.files.length === 1) {\n                    inputFieldValue = await toBase64(inputfield.files[0]);\n                } else {\n                    inputFieldValue = undefined;\n                }\n            } else if (inputfield.type === 'number') {\n                inputFieldValue = inputfield.valueAsNumber;\n            } else if (inputfield.type === 'checkbox') {\n                inputFieldValue = inputfield.checked;\n            } else if (inputfield.type === 'radio') {\n                if (inputfield.checked) {\n                    inputFieldValue = inputfield.value;\n                } else {\n                    inputFieldValue = scimResource[name];\n                }\n            } else {\n                let val = lodash.trim(inputfield.value);\n                if (lodash.isEmpty(val)) {\n                    val = undefined;\n                }\n                inputFieldValue = val;\n            }\n            lodash.set(scimResource, name, inputFieldValue);\n        };\n\n        let formInputFields = Array.from(formReference.current.getElementsByTagName('input'));\n        let textAreaFields = Array.from(formReference.current.getElementsByTagName('textarea'));\n        let formSelectFields = Array.from(formReference.current.getElementsByTagName('select'));\n        let allFormFields = formInputFields.concat(formSelectFields).concat(textAreaFields);\n\n        for (let inputField of allFormFields) {\n            await handleInputField(inputField);\n        }\n\n        return scimResource;\n    }\n\n    getErrors(state, fieldName) {\n        return new Optional(state).map(val => val.errors)\n            .map(val => val.fieldErrors)\n            .map(fieldErrors => fieldErrors[fieldName])\n            .orElse([]);\n    }\n\n    parseErrorResponse(errorResponse) {\n        try {\n            return JSON.parse(errorResponse);\n        } catch (e) {\n            return {detail: errorResponse};\n        }\n    }\n}\n\n\n","export const CERT_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:CertificateInfo\";\nexport const CURRENT_WORKFLOW_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:CurrentWorkflowSettings\";\nexport const TOKEN_CATEGORY_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:TokenCategory\";\nexport const TOKEN_STORE_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:TokenStore\";\nexport const SEARCH_REQUEST_URI = \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\";\nexport const BULK_REQUEST_URI = \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\";\n\nconst BASE_URL = \"/scim/v2\";\nexport const ACCESS_TOKEN_REQUEST_ENDPOINT = BASE_URL + \"/AccessTokenRequest\";\nexport const APP_INFO_ENDPOINT = BASE_URL + \"/AppInfo\";\nexport const AUTH_CODE_GRANT_ENDPOINT = BASE_URL + \"/AuthCodeGrantRequest\";\nexport const HTTP_CLIENT_SETTINGS_ENDPOINT = BASE_URL + \"/HttpClientSettings\";\nexport const JWT_BUILDER_ENDPOINT = BASE_URL + \"/JwtBuilder\";\nexport const KEYSTORE_ENDPOINT = BASE_URL + \"/Keystore\";\nexport const OPENID_CLIENT_ENDPOINT = BASE_URL + \"/OpenIdClient\";\nexport const OPENID_PROVIDER_ENDPOINT = BASE_URL + \"/OpenIdProvider\";\nexport const PROXY_ENDPOINT = BASE_URL + \"/Proxy\";\nexport const TRUSTSTORE_ENDPOINT = BASE_URL + \"/Truststore\";\nexport const CURRENT_WORKFLOW_SETTINGS_ENDPOINT = BASE_URL + \"/CurrentWorkflowSettings\";\nexport const TOKEN_CATEGORY_ENDPOINT = BASE_URL + \"/TokenCategory\";\nexport const TOKEN_STORE_ENDPOINT = BASE_URL + \"/TokenStore\";\nexport const BULK_ENDPOINT = BASE_URL + \"/Bulk\";\n","import {Optional} from \"../services/utils\";\nimport * as lodash from \"lodash\";\n\nexport default class ScimComponentBasics\n{\n    constructor({\n                    scimClient,\n                    formReference,\n                    getOriginalResource,\n                    getCurrentResource,\n                    setCurrentResource,\n                    setState,\n                    onCreateSuccess,\n                    onUpdateSuccess,\n                    onDeleteSuccess\n                } = {})\n    {\n        this.scimClient = scimClient;\n        this.formReference = formReference;\n        this.getOriginalResource = getOriginalResource;\n        this.getCurrentResource = getCurrentResource;\n        this.setCurrentResource = setCurrentResource;\n        this.setState = setState;\n        this.onCreateSuccess = onCreateSuccess;\n        this.onUpdateSuccess = onUpdateSuccess;\n        this.onDeleteSuccess = onDeleteSuccess;\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.createResource = this.createResource.bind(this);\n        this.updateResource = this.updateResource.bind(this);\n        this.deleteResource = this.deleteResource.bind(this);\n        this.setStateValue = this.setStateValue.bind(this);\n        this.resetEditMode = this.resetEditMode.bind(this);\n        this.updateInput = this.updateInput.bind(this);\n    }\n\n    onSubmit(e)\n    {\n        e.preventDefault();\n        if (new Optional(this.getCurrentResource().id).isPresent())\n        {\n            this.updateResource();\n        }\n        else\n        {\n            this.createResource();\n        }\n    }\n\n    async createResource()\n    {\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateOrUpdateResponse(response, this.onCreateSuccess);\n    }\n\n    async updateResource()\n    {\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.updateResource(resource, this.getOriginalResource().id);\n        this.handleCreateOrUpdateResponse(response, this.onUpdateSuccess);\n    }\n\n    handleCreateOrUpdateResponse(response, callback)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.setCurrentResource(resource);\n                this.setState({\n                    editMode: false,\n                    success: true\n                });\n                callback(resource);\n            })\n        }\n        else\n        {\n            response.resource.then(resource =>\n            {\n                this.setState({\n                    errors: {\n                        errorMessages: [resource.detail]\n                    }\n                });\n            })\n        }\n    }\n\n    deleteResource()\n    {\n        new Optional(this.getCurrentResource().id).ifNotPresent(id =>\n        {\n            this.onDeleteSuccess(undefined);\n        }).ifPresent(async id =>\n        {\n            await this.scimClient.deleteResource(id);\n            this.onDeleteSuccess(id);\n        })\n    }\n\n    setStateValue(name, value)\n    {\n        this.setState({\n            [name]: value,\n            success: false\n        });\n    }\n\n    resetEditMode()\n    {\n        let copiedResource = JSON.parse(JSON.stringify(this.getOriginalResource()))\n        this.setCurrentResource(copiedResource);\n        this.setState({\n            editMode: false,\n            success: false\n        });\n    }\n\n    updateInput(fieldname, value)\n    {\n        let object = this.getCurrentResource();\n        object = lodash.set(object, fieldname, value);\n        this.setCurrentResource(object);\n        this.setState({\n            success: false\n        });\n    }\n} ","export function toBase64(file)\n{\n    return new Promise((resolve, reject) =>\n    {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () =>\n        {\n            let encoded = reader.result.toString().replace(/^data:(.*,)?/, '');\n            if ((encoded.length % 4) > 0)\n            {\n                encoded += '='.repeat(4 - (encoded.length % 4));\n            }\n            resolve(encoded);\n        };\n        reader.onerror = error => reject(error);\n    });\n}\n\nexport function downloadBase64Data(base64Data, filename, filetype)\n{\n    let decoded = window.atob(base64Data);\n    var len = decoded.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++)\n    {\n        bytes[i] = decoded.charCodeAt(i);\n    }\n    let file = new Blob([bytes.buffer], {type: filetype});\n    let downloadAnchor = document.createElement(\"a\");\n    let url = URL.createObjectURL(file);\n    downloadAnchor.href = url;\n    downloadAnchor.download = filename;\n    downloadAnchor.click();\n    setTimeout(function ()\n    {\n        window.URL.revokeObjectURL(url);\n    }, 0);\n}\n\nexport function parseJws(token)\n{\n    if (typeof token !== 'string')\n    {\n        return null;\n    }\n    let jws = token.split('.');\n    if (jws.length !== 3)\n    {\n        return null;\n    }\n\n    function decode(content)\n    {\n        let base64 = content.replace(/-/g, '+').replace(/_/g, '/');\n        return decodeURIComponent(Buffer.from(base64, \"base64\").toString().split('').map(function (c)\n        {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    let header = decode(jws[0]);\n    let payload = decode(jws[1]);\n    let signature = jws[2];\n    return {\n        header: header,\n        payload: payload,\n        signature: signature\n    };\n}\n\nexport class Optional\n{\n    constructor(value)\n    {\n        this.value = value;\n    }\n\n    get()\n    {\n        return this.value;\n    }\n\n    isPresent()\n    {\n        return this.value !== undefined && this.value !== null;\n    }\n\n    ifPresent(handler)\n    {\n        if (this.isPresent())\n        {\n            handler(this.value);\n        }\n        return this;\n    }\n\n    ifNotPresent(handler)\n    {\n        if (!this.isPresent())\n        {\n            handler();\n        }\n        return this;\n    }\n\n    isEmpty()\n    {\n        return this.value === undefined || this.value === null;\n    }\n\n    filter(handler)\n    {\n        if (this.isPresent() && !handler(this.value))\n        {\n            this.value = null;\n        }\n        return this;\n    }\n\n    map(handler)\n    {\n        if (this.isPresent())\n        {\n            this.value = handler(this.value);\n        }\n        return this;\n    }\n\n    do(handler)\n    {\n        if (this.isPresent())\n        {\n            handler(this.value);\n        }\n        return this;\n    }\n\n    orElse(defaultValue)\n    {\n        if (this.isPresent())\n        {\n            return this.value;\n        }\n        else\n        {\n            return defaultValue;\n        }\n    }\n}\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {Optional} from \"../services/utils\";\nimport {ErrorMessageList} from \"./form-base\";\n\n\nexport class CardInputField extends React.Component\n{\n\n\n    constructor(props)\n    {\n        super(props);\n        this.bubbleEvent = this.bubbleEvent.bind(this);\n    }\n\n    bubbleEvent(e)\n    {\n        this.props.onChange(e.target.name, e.target.value);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.value !== this.props.value)\n        {\n            this.props.onChange(this.props.name, this.props.value);\n        }\n    }\n\n    render()\n    {\n        let controlId = new Optional(this.props.id).orElse(this.props.name);\n        let inputFieldType = this.props.type === undefined ? \"text\" : this.props.type;\n        let inputFieldName = this.props.name;\n        let inputFieldPlaceholder = this.props.placeholder === undefined ? this.props.name : this.props.placeholder;\n        let inputFieldErrorMessages = new Optional(this.props.onError).map(val => val(this.props.name)).orElse([]);\n        let isDisabled = this.props.disabled === true;\n        let isReadOnly = this.props.readOnly === true;\n\n        return (\n            <React.Fragment>\n                <Form.Control id={controlId}\n                              className={\"card-input-field \" + new Optional(this.props.className).orElse(\"\")}\n                              type={inputFieldType}\n                              name={inputFieldName}\n                              disabled={isDisabled}\n                              readOnly={isReadOnly}\n                              placeholder={inputFieldPlaceholder}\n                              onChange={this.bubbleEvent}\n                              value={this.props.value} />\n                <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </React.Fragment>\n        )\n    }\n}\n","import React, {useEffect, useState} from \"react\";\nimport bsCustomFileInput from \"bs-custom-file-input\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Optional} from \"../services/utils\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Alert, Button, Card, Collapse, Spinner} from \"react-bootstrap\";\nimport {\n  CaretDown,\n  CaretRight,\n  ExclamationLg,\n  PencilSquare,\n  PlusSquare,\n  Save,\n  TrashFill,\n  XLg,\n  XSquare\n} from \"react-bootstrap-icons\";\nimport {CardInputField} from \"./card-base\";\n\n/**\n * a simple input field that might also display error messages directly bound to this input field\n */\nexport function FormInputField(props)\n{\n  \n  let controlId = props.id || props.name;\n  let label = new Optional(props.label).map(label => <Form.Label column sm={2}>{label}</Form.Label>);\n  let inputFieldType = props.type === undefined ? \"text\" : props.type;\n  let inputFieldName = props.name;\n  let inputFieldPlaceholder = props.placeholder === undefined ? props.name : props.placeholder;\n  let inputFieldErrorMessages = props.onError(props.name);\n  let isDisabled = props.disabled === true;\n  let isReadOnly = props.readOnly === true;\n  let isHidden = props.type === \"hidden\" || props.isHidden;\n  let as = new Optional(props.as).orElse(\"input\");\n  \n  let sm = new Optional(props.sm).orElse(label.isPresent() ? 10 : 12);\n  return (\n    <Form.Group as={Row} controlId={controlId} style={{display: isHidden ? \"none\" : \"\"}}>\n      {label.get()}\n      <Col sm={sm}>\n        <Form.Control type={inputFieldType}\n                      as={as}\n                      name={inputFieldName}\n                      className={props.className}\n                      disabled={isDisabled}\n                      readOnly={isReadOnly}\n                      placeholder={inputFieldPlaceholder}\n                      onChange={props.onChange}\n                      value={props.value} />\n        \n        {\n          props.children\n        }\n        \n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * a simple input field that might also display error messages directly bound to this input field\n */\nexport class FormCheckbox extends React.Component\n{\n  \n  render()\n  {\n    let controlId = new Optional(this.props.id).orElse(this.props.name);\n    let label = new Optional(this.props.label).map(label => <Form.Label column sm={2}>{label}</Form.Label>);\n    let inputFieldName = this.props.name;\n    let inputFieldErrorMessages = this.props.onError(this.props.name);\n    let isHidden = this.props.type === \"hidden\";\n    let isReadOnly = this.props.readOnly === true;\n    let checked = new Optional(this.props.checked).orElse(false);\n    \n    let sm = new Optional(this.props.sm).orElse(label.isPresent() ? 10 : 12);\n    return (\n      <Form.Group as={Row} style={{display: isHidden ? \"none\" : \"\"}}>\n        {label.get()}\n        <Col sm={sm} style={{alignSelf: \"center\"}}>\n          <Form.Check id={controlId}\n                      name={inputFieldName}\n                      readOnly={isReadOnly}\n                      type=\"switch\"\n                      onChange={this.props.onChange}\n                      checked={checked} />\n          \n          <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                            fieldErrors={inputFieldErrorMessages} />\n        </Col>\n      </Form.Group>\n    );\n  }\n}\n\n/**\n * a select input field that might also display error messages directly bound to this input field\n */\nexport class FormSelectField extends React.Component\n{\n  \n  render()\n  {\n    let labelText = this.props.label === undefined ? this.props.name : this.props.label;\n    let inputFieldErrorMessages = this.props.onError(this.props.name);\n    \n    let inputFieldOptions = new Optional(this.props.options).map(options =>\n                                                                 {\n                                                                   return options.map((value) =>\n                                                                                      {\n                                                                                        return <option\n                                                                                          key={value}>{value}</option>;\n                                                                                      });\n                                                                 })\n                                                            .orElse([]);\n    \n    return (\n      <Form.Group as={Row} controlId={this.props.name}>\n        <Form.Label column sm={2}>\n          {labelText}\n        </Form.Label>\n        <Col sm={10}>\n          <Form.Control as=\"select\"\n                        name={this.props.name}>\n            {inputFieldOptions}\n          </Form.Control>\n          \n          <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                            fieldErrors={inputFieldErrorMessages} />\n        </Col>\n      </Form.Group>\n    );\n  }\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormFileField(props)\n{\n  \n  useEffect(() =>\n            {\n              bsCustomFileInput.init();\n              return () =>\n              {\n                bsCustomFileInput.destroy();\n              };\n            }, [] /* do this only once */);\n  \n  let labelText = props.label === undefined ? props.name : props.label;\n  let inputFieldErrorMessages = props.onError(props.name);\n  \n  return (\n    <Form.Group as={Row} controlId={props.name}>\n      <Form.Label column sm={2}>{labelText}</Form.Label>\n      <Col sm={10}>\n        <Form.Control type={\"file\"} name={props.name} />\n        \n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormObjectList(props)\n{\n  \n  let labelText = props.label === undefined ? props.name : props.label;\n  let inputFieldErrorMessages = props.onError(props.name);\n  \n  return (\n    <Form.Group as={Row} controlId={props.name}>\n      <Form.Label column sm={2}>{labelText}</Form.Label>\n      <Col sm={10}>\n        <Form.Control as=\"select\"\n                      size=\"sm\"\n                      type={\"number\"}\n                      custom\n                      name={props.name}\n                      onChange={props.onChange}\n                      value={props.selected}>\n          {\n            props.selections.map((value, index) =>\n                                 {\n                                   return (\n                                     <option key={index}\n                                             value={value.id}\n                                             defaultValue={props.selected === value}>\n                                       {value.value}\n                                     </option>\n                                   );\n                                 })\n          }\n        </Form.Control>\n        \n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormRadioSelection(props)\n{\n  \n  let labelText = props.label === undefined ? props.name : props.label;\n  let displayType = new Optional(props.displayType).orElse(\"vertical\");\n  let displayClass = displayType === \"vertical\" ? \"block\" : \"inline\";\n  let inputFieldErrorMessages = props.onError(props.name);\n  \n  return (\n    <Form.Group as={Row} controlId={props.name}>\n      <Form.Label column sm={2}>{labelText}</Form.Label>\n      <Col sm={10} style={{alignSelf: \"center\"}}>\n        {\n          props.selections.map((object, index) =>\n                               {\n                                 return <Form.Check key={index}\n                                                    style={{\n                                                      display: displayClass,\n                                                      marginRight: \"45px\"\n                                                    }}\n                                                    type=\"radio\"\n                                                    label={object.display}\n                                                    value={object.value}\n                                                    name={props.name}\n                                                    checked={props.selected === object.value}\n                                                    onChange={props.onChange}\n                                                    id={props.name + \"-\" + object.value}\n                                 />;\n                               })\n        }\n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * displays error messages for a {@link ConfigPageForm} element\n */\nexport function ErrorMessageList(props)\n{\n  let doNotRenderComponent = new Optional(props.fieldErrors).map(val => false)\n                                                            .orElse(true);\n  \n  if (doNotRenderComponent)\n  {\n    return null;\n  }\n  \n  let backgroundClass = props.backgroundClass === undefined ? \"bg-danger\" : props.backgroundClass;\n  \n  return (\n    <ul id={props.controlId} className=\"error-list\">\n      {props.fieldErrors.map((message, index) =>\n                               <ErrorListItem key={\"error-message-\" + index} backgroundClass={backgroundClass}\n                                              message={message} />)}\n    </ul>\n  );\n}\n\n/**\n * a simple error message for either the {@link ErrorMessageList} or an error that is directly bound to an\n * input field\n */\nexport function ErrorListItem(props)\n{\n  return (\n    <li className=\"error-list-item\">\n      <small className={props.backgroundClass + \" error\"}>\n        <GoFlame /> {props.message}\n      </small>\n    </li>\n  );\n}\n\nexport function AlertListMessages(props)\n{\n  let variant = props.variant || \"info\";\n  let icon = props.icon || <ExclamationLg />;\n  return (\n    <React.Fragment>\n      {\n        (props.messages || []).length > 0 &&\n        <Alert variant={variant}>\n          <ul className=\"error-list\">\n            {\n              props.messages.map((message, index) =>\n                                 {\n                                   return <li key={\"alert-\" + variant + \"-message-\" + index}\n                                              className={\"error-list-item\"}>\n                                     <small className={\"error\"}>\n                                       {icon} {message}\n                                     </small>\n                                   </li>;\n                                 })\n            }\n          </ul>\n        </Alert>\n      }\n    </React.Fragment>\n  );\n}\n\nexport function LoadingSpinner(props)\n{\n  if (props.show)\n  {\n    return (\n      <span style={{marginRight: 5 + 'px'}}>\n              <Spinner animation=\"border\" variant=\"warning\" size=\"sm\" role=\"status\" />\n            </span>\n    );\n  }\n  else\n  {\n    return null;\n  }\n}\n\nexport function ErrorMessagesAlert(props)\n{\n  return (\n    new Optional(props.errors).map(errors => errors.errorMessages)\n                              .filter(messages => messages.length > 0)\n                              .isPresent() &&\n    <Alert id={\"error-messages-alert\"} variant={\"danger\"}\n           show={props.errors.errorMessages !== undefined}>\n      <ErrorMessageList fieldErrors={props.errors.errorMessages} backgroundClass={\"\"} />\n    </Alert>\n  );\n}\n\nexport function CardControlIcons(props)\n{\n  return (\n    <div className=\"card-control-icons\">\n      {props.spinner}\n      {\n        props.editMode &&\n        <React.Fragment>\n          <Save title={\"save\"} id={\"save-icon-\" + props.resource.id}\n                onClick={() =>\n                {\n                  if (props.resource.id === undefined)\n                  {\n                    props.createResource();\n                  }\n                  else\n                  {\n                    props.updateResource(props.resource.id);\n                  }\n                }}\n                style={{marginRight: 5 + 'px'}} />\n          {\n            props.resource.id !== undefined &&\n            <XLg title={\"reset-edit\"} id={\"reset-update-icon-\" + props.resource.id}\n                 onClick={props.resetEditMode} style={{marginRight: 5 + 'px'}} />\n          }\n        </React.Fragment>\n      }\n      {\n        !props.editMode &&\n        <PencilSquare title={\"edit\"} id={\"update-icon-\" + props.resource.id}\n                      onClick={props.edit} style={{marginRight: 5 + 'px'}} />\n      }\n      <TrashFill title={\"delete\"} id={\"delete-icon-\" + props.resource.id}\n                 onClick={props.showModal} />\n    </div>\n  );\n}\n\nexport function CardDateRows(props)\n{\n  return (\n    <React.Fragment>\n      <tr>\n        <th>Created</th>\n        <td className={\"card-value-cell\"}>\n          {\n            new Optional(props.resource).map(val => val.meta)\n                                        .map(\n                                          val => val.created)\n                                        .map(val => new Date(val).toUTCString())\n                                        .orElse(null)\n          }\n        </td>\n      </tr>\n      <tr>\n        <th>LastModified</th>\n        <td className={\"card-value-cell\"}>\n          {\n            new Optional(props.resource).map(val => val.meta)\n                                        .map(\n                                          val => val.lastModified)\n                                        .map(val => new Date(val).toUTCString())\n                                        .orElse(\n                                          null)\n          }\n        </td>\n      </tr>\n    </React.Fragment>\n  );\n}\n\nexport function ModifiableCardEntry(props)\n{\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      {\n        props.editMode &&\n        <CardInputField value={new Optional(props.resourceValue).orElse(\"\")}\n                        id={props.name + \"-\" + props.resourceId}\n                        type={props.type}\n                        name={props.name}\n                        placeholder={props.placeholder}\n                        onChange={props.onChange}\n                        onError={props.onError} />\n      }\n      {\n        !props.editMode &&\n        props.resourceValue\n      }\n    </td>\n  </tr>;\n}\n\nexport function HiddenCardEntry(props)\n{\n  return <tr style={{display: \"none\"}}>\n    <td>\n      <CardInputField value={new Optional(props.value).orElse(\"\")}\n                      id={props.name + \"-\" + props.resourceId}\n                      type={props.type}\n                      name={props.name}\n                      placeholder={props.placeholder}\n                      onChange={props.onChange}\n                      onError={props.onError} />\n    </td>\n  </tr>;\n}\n\nexport function ModifiableCardFileEntry(props)\n{\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      {\n        props.editMode &&\n        <XSquare key={\"remove-key\"} type={\"button\"} className={\"remove-index\"}\n                 onClick={e => props.onRemove(props.name, undefined)} />\n      }\n      <div className={new Optional(props.resourceValue).map(val => \"light-border\")\n                                                       .orElse(\"\")}>\n        {props.resourceValue}\n      </div>\n      {\n        props.editMode &&\n        <CardInputField type={\"file\"}\n                        id={props.name + \"-\" + props.resourceId}\n                        name={props.name}\n                        placeholder={props.placeholder}\n                        onChange={props.onChange}\n                        onError={props.onError} />\n      }\n    </td>\n  </tr>;\n}\n\nexport function CardRadioSelector(props)\n{\n  let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name))\n                                                           .orElse([]);\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      <fieldset>\n        {\n          !props.editMode &&\n          props.selected\n        }\n        {\n          props.editMode &&\n          props.selections.map((value, index) =>\n                               {\n                                 return (\n                                   <Form.Check\n                                     key={index}\n                                     type=\"radio\"\n                                     label={value}\n                                     value={value}\n                                     checked={props.selected === value}\n                                     onChange={props.onChange}\n                                     name={props.name}\n                                     id={props.name + \"-\" + value}\n                                   />\n                                 );\n                               })\n        }\n      </fieldset>\n      <ErrorMessageList controlId={props.name + \"-error-list\"}\n                        fieldErrors={inputFieldErrorMessages} />\n    </td>\n  </tr>;\n}\n\nexport function CardListSelector(props)\n{\n  let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name))\n                                                           .orElse([]);\n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      <fieldset>\n        {\n          !props.editMode &&\n          props.selected\n        }\n        {\n          props.editMode &&\n          <Form.Control as=\"select\"\n                        size=\"sm\"\n                        custom\n                        name={props.name}\n                        id={props.name}\n                        onChange={props.onChange}\n                        value={props.selected}\n          >\n            {\n              props.selections.map((value, index) =>\n                                   {\n                                     return (\n                                       <option key={index}\n                                               defaultValue={props.selected === value}>\n                                         {value}\n                                       </option>\n                                     );\n                                   })\n            }\n          </Form.Control>\n        }\n      </fieldset>\n      <ErrorMessageList controlId={props.name + \"-error-list\"}\n                        fieldErrors={inputFieldErrorMessages} />\n    </td>\n  </tr>;\n}\n\nexport function ModifiableCardList(props)\n{\n  let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name))\n                                                           .orElse([]);\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      {\n        props.editMode &&\n        <React.Fragment>\n          {\n            new Optional(props.resourceValue)\n              .map(endpointArray =>\n                   {\n                     return endpointArray.map((endpoint, index) =>\n                                              {\n                                                return (\n                                                  <div\n                                                    key={props.name + \"-container-\" + props.resourceId + \"-\" + index}>\n                                                    <XSquare key={\"remove-\" + props.resourceId + \"-\" + index}\n                                                             type={\"button\"}\n                                                             className={\"remove-index\"}\n                                                             onClick={e => props.onRemove(index)} />\n                                                    <CardInputField\n                                                      key={props.name + \"-\" + props.resourceId + \"-\" + index}\n                                                      className={\"list-item\"}\n                                                      value={new Optional(endpoint).orElse(\"\")}\n                                                      id={props.name + \"-\" + props.resourceId + \"-\" + index}\n                                                      name={props.name + \"[\" + index + \"]\"}\n                                                      placeholder={props.placeholder}\n                                                      onChange={props.onChange}\n                                                      onError={props.onError} />\n                                                  </div>\n                                                );\n                  \n                                              });\n                   })\n              .orElse([])\n          }\n          <ErrorMessageList controlId={props.name + \"-error-list\"}\n                            fieldErrors={inputFieldErrorMessages} />\n          <Button key={\"add\"} type={\"button\"} className={\"add-item\"} onClick={props.onAdd}>\n            <PlusSquare /> Add new\n          </Button>\n        </React.Fragment>\n      }\n      {\n        !props.editMode &&\n        new Optional(props.resourceValue)\n          .map(endpointArray =>\n               {\n                 return (\n                   <ul>\n                     {\n                       endpointArray.map(endpoint =>\n                                         {\n                                           return (<li key={endpoint}>{endpoint}</li>);\n                                         })\n                     }\n                   </ul>\n                 );\n               })\n          .orElse([])\n      }\n    </td>\n  </tr>;\n}\n\nexport function Collapseable(props)\n{\n  const [open, setOpen] = useState(props.open || false);\n  \n  let variant = props.variant || \"primary\";\n  let headerClass = new Optional(props.headerClass).map(val => \" \" + val)\n                                                   .orElse(\"\");\n  let bodyClass = new Optional(props.bodyClass).map(val => \" \" + val)\n                                               .orElse(\"\");\n  \n  return (\n    <React.Fragment>\n      <Alert className={\"collapse-header\" + headerClass}\n             variant={variant}\n             onClick={() => setOpen(!open)}>\n        {\n          open === true &&\n          <CaretDown />\n        }\n        {\n          open === false &&\n          <CaretRight />\n        }\n        {props.header}\n        {\n          props.remove !== undefined &&\n          <XLg onClick={props.remove} className={\"remove-collapse\"} />\n        }\n      </Alert>\n      <Collapse in={open}>\n        <Card className={bodyClass}>\n          <Card.Body>\n            {props.content()}\n          </Card.Body>\n        </Card>\n      </Collapse>\n    </React.Fragment>\n  );\n}\n"],"sourceRoot":""}