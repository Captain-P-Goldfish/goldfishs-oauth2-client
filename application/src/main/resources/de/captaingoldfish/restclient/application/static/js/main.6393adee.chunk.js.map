{
  "version": 3,
  "sources": [
    "jwt/jwt-parser.js",
    "reportWebVitals.js",
    "logo.svg",
    "media/secure-download-icon.png",
    "base/modal.js",
    "media/certificate.png",
    "base/certificate-list.js",
    "admin/system/application-keystore.js",
    "admin/system/application-truststore.js",
    "admin/system/proxy-management.js",
    "admin/system/system-overview.js",
    "openid/openid-provider.js",
    "jwt/jwt-builder.js",
    "jwt/jwt-handler.js",
    "openid/openid-clients.js",
    "openid/http-settings.js",
    "openid/auth-code-grant/access-token-view.js",
    "openid/auth-code-grant/authorization-code-grant-workflow.js",
    "scim/current-workflow-settings-client.js",
    "openid/openid-client-workflow.js",
    "openid/openid-client-overview.js",
    "app.js",
    "index.js",
    "scim/scim-client.js",
    "scim/scim-constants.js",
    "scim/scim-component-basics.js",
    "services/utils.js",
    "base/form-base.js",
    "base/card-base.js"
  ],
  "names": [
    "JwtParser",
    "props",
    "state",
    "isMounted",
    "selectedKey",
    "currentJwt",
    "setState",
    "bind",
    "scimClient",
    "ScimClient",
    "JWT_BUILDER_ENDPOINT",
    "formReference",
    "createRef",
    "onUpdateSuccess",
    "handleKeySelectionSelection",
    "parseJwt",
    "prettyPrintJwtJson",
    "scimComponentBasics",
    "ScimComponentBasics",
    "getOriginalResource",
    "jwtBuilder",
    "id",
    "getCurrentResource",
    "setCurrentResource",
    "resource",
    "this",
    "value",
    "a",
    "document",
    "getElementById",
    "header",
    "JSON",
    "stringify",
    "parse",
    "undefined",
    "split",
    "parts",
    "jwtDetails",
    "jwtPartDecoder",
    "tokenPart",
    "decodeURIComponent",
    "Buffer",
    "from",
    "toString",
    "length",
    "parseHeader",
    "infoMessages",
    "warnMessages",
    "base64Header",
    "base64Body",
    "parsedBody",
    "body",
    "decodedTokenString",
    "json",
    "ex",
    "jwtParts",
    "getJwtParts",
    "isJws",
    "Optional",
    "map",
    "orElse",
    "isJwe",
    "headerToDisplay",
    "details",
    "bodyToDisplay",
    "errors",
    "Fragment",
    "variant",
    "icon",
    "messages",
    "errorMessages",
    "detail",
    "d",
    "onSubmit",
    "ref",
    "sm",
    "title",
    "onSelect",
    "keyInfos",
    "isPresent",
    "keyInfo",
    "Item",
    "eventKey",
    "alias",
    "keyAlgorithm",
    "keyLength",
    "className",
    "style",
    "marginLeft",
    "color",
    "type",
    "onClick",
    "e",
    "show",
    "isLoading",
    "marginTop",
    "Control",
    "name",
    "as",
    "onChange",
    "target",
    "part",
    "index",
    "readOnly",
    "onError",
    "fieldName",
    "getErrors",
    "React",
    "Component",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "then",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "Modal",
    "role",
    "tabIndex",
    "message",
    "Button",
    "submitButtonText",
    "onCancel",
    "cancelButtonText",
    "CertificateCardEntry",
    "loaded",
    "scimResourcePath",
    "deleteEntry",
    "showModal",
    "hideModal",
    "loadData",
    "deleteResource",
    "success",
    "onDeleteSuccess",
    "showSpinner",
    "getResource",
    "response",
    "certInfo",
    "ScimConstants",
    "cert",
    "info",
    "certificateTooltip",
    "Tooltip",
    "privateKeyTooltip",
    "Card",
    "border",
    "bg",
    "Header",
    "hasPrivateKey",
    "OverlayTrigger",
    "placement",
    "delay",
    "hide",
    "overlay",
    "Body",
    "Image",
    "src",
    "CertIcon",
    "fluid",
    "Subtitle",
    "Text",
    "issuerDn",
    "subjectDn",
    "sha256Fingerprint",
    "Date",
    "validFrom",
    "toUTCString",
    "validTo",
    "CertificateList",
    "CardDeck",
    "certificateAliases",
    "certAlias",
    "ApplicationKeystore",
    "setAliasSelectionResponse",
    "onAliasSelectionSuccess",
    "copiedResource",
    "aliasSelectionResponse",
    "newKeyInfo",
    "onCreateSuccess",
    "KeystoreUpload",
    "upload",
    "handleCreateResponse",
    "preventDefault",
    "getResourceFromFormReference",
    "createResource",
    "Alert",
    "Form",
    "label",
    "placeholder",
    "Group",
    "Row",
    "Col",
    "span",
    "offset",
    "AliasSelection",
    "save",
    "stateId",
    "val",
    "aliasSelection",
    "aliases",
    "options",
    "KeystoreEntryList",
    "downloadKeystore",
    "listResources",
    "listResponse",
    "Resources",
    "prevProps",
    "prevState",
    "snapshot",
    "aliasDeleted",
    "indexOfAlias",
    "array",
    "attr",
    "i",
    "findIndexOf",
    "splice",
    "downloading",
    "KEYSTORE_ENDPOINT",
    "attributes",
    "base64ApplicationKeystore",
    "applicationKeystore",
    "downloadBase64Data",
    "Badge",
    "href",
    "downloadIcon",
    "ApplicationTruststore",
    "onMergeSuccess",
    "onUploadSuccess",
    "mergedAliases",
    "newAliases",
    "addedCertificateAlias",
    "TruststoreUploadForm",
    "addedAliases",
    "duplicateAliases",
    "duplicateCertificates",
    "truststoreUploadResponse",
    "ifPresent",
    "do",
    "sort",
    "duplicateCertificateAliases",
    "numberOfDuplicateAliases",
    "numberOfDuplicateCerts",
    "CertificateUploadForm",
    "addedAlias",
    "certificateUploadResponse",
    "CertificateEntryList",
    "downloadTruststore",
    "concat",
    "indexOf",
    "TRUSTSTORE_ENDPOINT",
    "base64ApplicationTruststore",
    "applicationTruststore",
    "ProxyManagement",
    "proxyList",
    "addNewProxy",
    "addProxy",
    "removeProxy",
    "startIndex",
    "currentPage",
    "window",
    "MAX_RESULTS",
    "filter",
    "isNaN",
    "count",
    "sortBy",
    "newResources",
    "oldResources",
    "concatedResources",
    "lodash",
    "newProxy",
    "deletedProxyId",
    "proxy",
    "unshift",
    "oldProxy",
    "p",
    "newProxyList",
    "ProxyCardEntry",
    "editMode",
    "setStateValue",
    "spinner",
    "updateResource",
    "resetEditMode",
    "edit",
    "hidden",
    "Table",
    "size",
    "borderless",
    "striped",
    "resourceId",
    "resourceValue",
    "hostname",
    "updateInput",
    "port",
    "username",
    "password",
    "SystemOverview",
    "Tabs",
    "defaultActiveKey",
    "Tab",
    "OpenidProvider",
    "providerList",
    "addNewProvider",
    "removeProvider",
    "serviceProviderConfig",
    "maxResults",
    "provider",
    "newProvider",
    "deletedProviderName",
    "oldProvider",
    "OpenIdProviderCardEntry",
    "Nav",
    "exact",
    "to",
    "marginRight",
    "height",
    "discoveryEndpoint",
    "authorizationEndpoint",
    "tokenEndpoint",
    "resourceEndpoints",
    "onAdd",
    "push",
    "onRemove",
    "signatureVerificationKey",
    "JwtBuilder",
    "addX5Sha256tHeader",
    "handleSignatureAlgorithmSelection",
    "handleEncryptionAlgorithmSelection",
    "handleContentEncryptionAlgorithmSelection",
    "handleHeaderChange",
    "handleBodyChange",
    "addJwtBody",
    "addDefaultJwtAttributes",
    "addKeyIdToHeader",
    "handleAddSha256Thumbprint",
    "addHeader",
    "jwtInfo",
    "signatureAlgorithms",
    "jwt",
    "enc",
    "encryptionAlgorithms",
    "Exception",
    "iss",
    "aud",
    "sub",
    "iat",
    "getTime",
    "exp",
    "jti",
    "mergedBody",
    "event",
    "isSelected",
    "checked",
    "kidMatchesHeader",
    "kid",
    "Container",
    "Dropdown",
    "DropdownButton",
    "cursor",
    "Check",
    "JwtHandler",
    "ApplicationInfoContext",
    "Consumer",
    "appInfo",
    "OpenidClients",
    "clientList",
    "addNewClient",
    "removeClient",
    "openIdProviderId",
    "match",
    "params",
    "openIdProvider",
    "errorResponse",
    "loadKeystoreInfos",
    "lr",
    "r",
    "keystore",
    "client",
    "newClient",
    "deletedClientId",
    "oldClient",
    "c",
    "clientId",
    "padding",
    "paddingLeft",
    "OpenIdClientCardEntry",
    "authenticationType",
    "forEach",
    "selections",
    "selected",
    "clientSecret",
    "signingKeyRef",
    "signatureAlgorithm",
    "audience",
    "decryptionKeyRef",
    "HttpSettings",
    "httpSettings",
    "settings",
    "proxies",
    "originalSetting",
    "enableHostnameVerifier",
    "useHostnameVerifier",
    "console",
    "error",
    "loadProxies",
    "isHidden",
    "requestTimeout",
    "connectionTimeout",
    "socketTimeout",
    "proxyReference",
    "tlsClientAuthAliasReference",
    "AccessTokenView",
    "AccessTokenCollapsible",
    "headerClass",
    "content",
    "AccessTokenDetailsView",
    "accessTokenDetails",
    "remove",
    "useState",
    "open",
    "setOpen",
    "Collapse",
    "in",
    "AccessTokenRequestView",
    "AccessTokenResponseView",
    "bodyClass",
    "NameValueList",
    "keyPrefix",
    "nameValueList",
    "requestHeaders",
    "requestParams",
    "responseDetails",
    "responseStatusCode",
    "statusCode",
    "responseHeaders",
    "plainResponse",
    "contentType",
    "toLowerCase",
    "tokenResponse",
    "nameValuePair",
    "AccessTokenResponse",
    "parseJsonContent",
    "isContentTypeJson",
    "includes",
    "stateExtension",
    "Object",
    "keys",
    "key",
    "AuthorizationCodeGrantWorkflow",
    "forceUpdate",
    "loadAuthorizationQueryParameterView",
    "getAuthRequestStatus",
    "loadAuthorizationCodeResponseDetailsView",
    "retrieveAccessTokenDetails",
    "interval",
    "clearInterval",
    "requestDetails",
    "authorizationCodeGrantUrl",
    "setInterval",
    "AUTH_CODE_GRANT_ENDPOINT",
    "stateParam",
    "fromEntries",
    "URL",
    "searchParams",
    "authorizationResponseUrl",
    "authCodeQueryParams",
    "showInfoMessage",
    "ACCESS_TOKEN_REQUEST_ENDPOINT",
    "queryParamsObject",
    "grantType",
    "openIdClientId",
    "parseInt",
    "redirectUri",
    "redirect_uri",
    "authorizationCode",
    "code",
    "marginBottom",
    "AuthorizationCodeGrantDetails",
    "CurrentWorkflowSettingsClient",
    "CURRENT_WORKFLOW_SETTINGS_ENDPOINT",
    "openidClientId",
    "queryParameters",
    "callback",
    "authCodeParameters",
    "patchResource",
    "scope",
    "clientCredentialsParameters",
    "resourceOwnerPasswordParameters",
    "patchOperation",
    "schemas",
    "Operations",
    "op",
    "method",
    "status",
    "OpenidClientWorkflow",
    "context",
    "authCodeGrantType",
    "clientCredentialsGrantType",
    "resourceOwnerGrantType",
    "originalRedirectUri",
    "workflowDetails",
    "CURRENT_WORKFLOW_URI",
    "resetRedirectUri",
    "handleNestedElementChange",
    "handleGrantTypeResponseDetails",
    "removeGrantTypeDetails",
    "wrapperObject",
    "responseDetailsArray",
    "fieldname",
    "detailsObject",
    "detailsIndex",
    "authTypes",
    "display",
    "displayType",
    "handleChange",
    "handleResponse",
    "ResponseDetailsView",
    "AuthorizationCodeGrantForm",
    "intervals",
    "loadAuthorizationRequestDetails",
    "patchWorkflowSettings",
    "workflowSettingsClient",
    "w",
    "queryParams",
    "updateAuthCodeSettings",
    "ClientCredentialsGrantForm",
    "updateClientCredentialsSettings",
    "ResourceOwnerPasswordCredentialsForm",
    "updateResourceOwnerPasswordCredentialsSettings",
    "OpenidClientOverview",
    "providerId",
    "authCodeRedirectUri",
    "createContext",
    "ScimServiceProviderContext",
    "Application",
    "bulk",
    "maxOperations",
    "maxPayloadSize",
    "Navbar",
    "collapseOnSelect",
    "expand",
    "Brand",
    "Toggle",
    "Link",
    "logo",
    "alt",
    "Provider",
    "path",
    "component",
    "render",
    "route",
    "ReactDOM",
    "resourcePath",
    "resetErrors",
    "handleError",
    "jsonPromise",
    "fetch",
    "headers",
    "tmpResponse",
    "parameters",
    "URLSearchParams",
    "url",
    "encodeURIComponent",
    "sortOrder",
    "excludedAttributes",
    "startIndexParam",
    "countParam",
    "filterParam",
    "encodeURI",
    "sortByParam",
    "sortOrderParam",
    "attributesParam",
    "excludedAttributesParam",
    "query",
    "Array",
    "of",
    "join",
    "requestUrl",
    "patchBody",
    "scimResource",
    "handleInputField",
    "inputfield",
    "files",
    "toBase64",
    "inputFieldValue",
    "valueAsNumber",
    "formInputFields",
    "current",
    "getElementsByTagName",
    "textAreaFields",
    "formSelectFields",
    "allFormFields",
    "inputField",
    "fieldErrors",
    "CERT_URI",
    "BASE_URL",
    "handleCreateOrUpdateResponse",
    "ifNotPresent",
    "object",
    "file",
    "Promise",
    "resolve",
    "reject",
    "reader",
    "FileReader",
    "readAsDataURL",
    "onload",
    "encoded",
    "result",
    "replace",
    "repeat",
    "onerror",
    "base64Data",
    "filename",
    "filetype",
    "decoded",
    "atob",
    "len",
    "bytes",
    "Uint8Array",
    "charCodeAt",
    "Blob",
    "buffer",
    "downloadAnchor",
    "createElement",
    "createObjectURL",
    "download",
    "click",
    "setTimeout",
    "revokeObjectURL",
    "handler",
    "defaultValue",
    "FormInputField",
    "controlId",
    "Label",
    "column",
    "inputFieldType",
    "inputFieldName",
    "inputFieldPlaceholder",
    "inputFieldErrorMessages",
    "isDisabled",
    "disabled",
    "isReadOnly",
    "get",
    "children",
    "ErrorMessageList",
    "FormCheckbox",
    "alignSelf",
    "FormSelectField",
    "labelText",
    "inputFieldOptions",
    "FormFileField",
    "useEffect",
    "bsCustomFileInput",
    "init",
    "destroy",
    "button",
    "FormObjectList",
    "custom",
    "FormRadioSelection",
    "displayClass",
    "backgroundClass",
    "ErrorListItem",
    "AlertListMessages",
    "LoadingSpinner",
    "animation",
    "ErrorMessagesAlert",
    "CardControlIcons",
    "CardDateRows",
    "meta",
    "created",
    "lastModified",
    "ModifiableCardEntry",
    "HiddenCardEntry",
    "ModifiableCardFileEntry",
    "CardRadioSelector",
    "CardListSelector",
    "ModifiableCardList",
    "endpointArray",
    "endpoint",
    "Collapseable",
    "CardInputField",
    "bubbleEvent"
  ],
  "mappings": "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",
  "file": "static/js/main.6393adee.chunk.js",
  "sourcesContent": [
    "import React, {createRef} from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {AlertListMessages, FormInputField, LoadingSpinner} from \"../base/form-base\";\nimport Button from \"react-bootstrap/Button\";\nimport {Optional} from \"../services/utils\";\nimport {Col, Container, Dropdown, DropdownButton, Row} from \"react-bootstrap\";\nimport {ExclamationTriangle} from \"react-bootstrap-icons\";\nimport {GoFlame} from \"react-icons/go\";\nimport {JWT_BUILDER_ENDPOINT} from \"../scim/scim-constants\";\n\nexport default class JwtParser extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isMounted: false,\n            selectedKey: \"\",\n            currentJwt: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n        };\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(JWT_BUILDER_ENDPOINT, this.setState);\n        this.formReference = createRef();\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.handleKeySelectionSelection = this.handleKeySelectionSelection.bind(this);\n        this.parseJwt = this.parseJwt.bind(this);\n        this.prettyPrintJwtJson = this.prettyPrintJwtJson.bind(this);\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.state.jwtBuilder || {id: 1},\n            getCurrentResource: () => this.state.jwtBuilder || {id: 1},\n            setCurrentResource: resource =>\n            {\n            },\n            setState: this.setState,\n            onUpdateSuccess: this.onUpdateSuccess\n        });\n    }\n\n    componentDidMount()\n    {\n        this.setState({isMounted: true});\n    }\n\n    async handleKeySelectionSelection(value)\n    {\n        await this.setState({selectedKey: value})\n        let hiddenKeyIdInputField = document.getElementById(\"jwt-parser-key-id\");\n        hiddenKeyIdInputField.value = value;\n    }\n\n    onUpdateSuccess(resource)\n    {\n        let jwtBuilder = resource;\n        jwtBuilder.header = JSON.stringify(JSON.parse(resource.header), undefined, 4);\n        this.setState({jwtBuilder: jwtBuilder});\n    }\n\n    getJwtParts()\n    {\n        if (this.state.isMounted === false)\n        {\n            return null;\n        }\n        let token = document.getElementById(\"jwt-to-parse\").value;\n        return (token || \"\").split(\".\");\n    }\n\n    parseJwt(parts)\n    {\n        if (this.state.isMounted === false)\n        {\n            return null;\n        }\n        let jwtDetails = {};\n        jwtDetails.parts = parts;\n\n        let jwtPartDecoder = function (tokenPart)\n        {\n            return decodeURIComponent(Buffer.from(tokenPart, \"base64\").toString());\n        };\n\n        if (parts.length === 5)\n        {\n            let base64Header = parts[0];\n            let parseHeader = jwtPartDecoder(base64Header);\n            jwtDetails.header = this.prettyPrintJwtJson(parseHeader);\n            jwtDetails.infoMessages = [\"JWE must be parsed at backend\"];\n            return jwtDetails;\n        }\n\n        if (parts.length !== 3)\n        {\n            jwtDetails.warnMessages = [\"Not a valid JSON Web Token\"];\n            return jwtDetails;\n        }\n\n        let base64Header = parts[0];\n        let base64Body = parts[1];\n\n        let parseHeader = jwtPartDecoder(base64Header);\n        let parsedBody = jwtPartDecoder(base64Body);\n        jwtDetails.header = this.prettyPrintJwtJson(parseHeader);\n        jwtDetails.body = this.prettyPrintJwtJson(parsedBody);\n        return jwtDetails;\n    }\n\n    prettyPrintJwtJson(decodedTokenString)\n    {\n        try\n        {\n            let json = JSON.parse(decodedTokenString);\n            return JSON.stringify(json, null, 2);\n        } catch (ex)\n        {\n            return decodedTokenString;\n        }\n    }\n\n    render()\n    {\n        let jwtParts = this.getJwtParts();\n        let jwtDetails = this.parseJwt(jwtParts) || {};\n        let isJws = new Optional(jwtParts).map(parts => parts.length === 3).orElse(false);\n        let isJwe = new Optional(jwtParts).map(parts => parts.length === 5).orElse(false);\n\n        let headerToDisplay = new Optional(this.state.jwtBuilder).map(details => details.header).orElse(\n            jwtDetails.header);\n        let bodyToDisplay = new Optional(this.state.jwtBuilder).map(details => details.body).orElse(jwtDetails.body);\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                   messages={errors.errorMessages || new Optional(errors.detail).map(d => [d]).orElse(\n                                       [])} />\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <AlertListMessages icon={<GoFlame />} variant={\"danger\"}\n                                       messages={(this.state.errorMessages || []).errors} />\n                    <AlertListMessages icon={<ExclamationTriangle />} variant={\"warning\"}\n                                       messages={jwtDetails.warnMessages} />\n                    <AlertListMessages variant={\"info\"} messages={jwtDetails.infoMessages} />\n                    <Container>\n                        <Row>\n                            <Col sm={3}>\n                                <Dropdown>\n                                    <DropdownButton id={\"jwt-parser-aliases\"}\n                                                    title={\"available keys\"}\n                                                    onSelect={this.handleKeySelectionSelection}>\n                                        {\n                                            new Optional(this.props.keyInfos).isPresent() &&\n                                            this.props.keyInfos.map((keyInfo) =>\n                                            {\n                                                return <Dropdown.Item key={keyInfo.alias}\n                                                                      eventKey={keyInfo.alias}>{keyInfo.alias + \" (\"\n                                                                                                + keyInfo.keyAlgorithm\n                                                                                                + \"-\"\n                                                                                                + keyInfo.keyLength\n                                                                                                + \"-bit)\"}</Dropdown.Item>\n                                            })\n                                        }\n                                    </DropdownButton>\n                                    <p>\n                                        selected key:\n                                        <span className={\"code\"}\n                                              style={{marginLeft: \"15px\", color: \"lightgreen\"}}>\n                                        {this.state.selectedKey}\n                                    </span>\n                                    </p>\n                                </Dropdown>\n\n                                {\n                                    (isJwe === true || isJws === true) &&\n                                    <Button id={\"parse-jwt\"} type=\"submit\" onClick={e =>\n                                    {\n                                        this.setState({jwtBuilder: undefined})\n                                    }\n                                    }>\n                                        <LoadingSpinner show={this.state.isLoading} />\n                                        {\n                                            isJws === true &&\n                                            <span>Verify Signature</span>\n                                        }\n                                        {\n                                            isJwe === true &&\n                                            <span>Decrypt</span>\n                                        }\n                                    </Button>\n                                }\n                                {\n                                    this.state.jwtBuilder && isJws &&\n                                    <h5 style={{color: \"lightgreen\", marginTop: \"50px\"}}>Signature valid</h5>\n                                }\n                                {\n                                    this.state.jwtBuilder && isJwe &&\n                                    <h5 style={{color: \"lightgreen\", marginTop: \"50px\"}}>Successfully decrypted</h5>\n                                }\n                            </Col>\n                            <Col sm={4} className={\"form-group\"}>\n                                <Form.Control id={\"jwt-to-parse\"}\n                                              name={\"jwt\"}\n                                              sm={12}\n                                              as={\"textarea\"}\n                                              value={this.state.currentJwt}\n                                              onChange={e => this.setState({\n                                                  currentJwt: e.target.value,\n                                                  jwtBuilder: undefined\n                                              })} />\n                                {\n                                    <div id={\"jwt-input\"}\n                                         className={\"jwt-overlay\"}>\n                                        {\n                                            (jwtDetails.parts || []).map((part, index) =>\n                                            {\n                                                return <span key={\"jwt-part-\" + index}\n                                                             className={\"jwt-part jwt-part-\" + (index <= 4 ? index\n                                                                                                           : \"over\")}>\n                                                {\n                                                    index > 0 &&\n                                                    <span className={\"jwt-dot-separator\"}>\n                                                        .<br />\n                                                    </span>\n                                                }\n                                                    {part}\n                                            </span>\n                                            })\n                                        }\n                                    </div>\n                                }\n                            </Col>\n                            <Col sm={5}>\n                                <FormInputField id={\"jwt-parser-key-id\"}\n                                                name=\"keyId\"\n                                                readOnly={true}\n                                                type=\"hidden\"\n                                                value={this.state.selectedKey}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                                <FormInputField id={\"jwt-parsed-header\"}\n                                                name=\"header\"\n                                                className={\"jwt-part-0\"}\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                value={headerToDisplay}\n                                                onChange={() =>\n                                                {/*do nothing*/\n                                                }}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                                <FormInputField id={\"jwt-parsed-body\"}\n                                                name=\"body\"\n                                                className={\"jwt-part-1\"}\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                value={bodyToDisplay}\n                                                onChange={() =>\n                                                {/*do nothing*/\n                                                }}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n",
    "const reportWebVitals = onPerfEntry =>\n{\n    if (onPerfEntry && onPerfEntry instanceof Function)\n    {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) =>\n        {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n",
    "export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";",
    "export default __webpack_public_path__ + \"static/media/secure-download-icon.a0cef591.png\";",
    "import React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nexport default class Modal extends React.Component\n{\n\n    render()\n    {\n        return (\n            this.props.show === true &&\n            <div id={this.props.id} role=\"dialog\" aria-modal=\"true\" tabIndex=\"-1\" className={\"card-modal\"}>\n                <div className={\"card-modal-content\"}>\n                    <h5 id={this.props.id + \"-header\"} className={\"card-title\"}>\n                        {this.props.title}\n                    </h5>\n                    <p id={this.props.id + \"-text\"}>{this.props.message}</p>\n                    <Button id={this.props.id + \"-button-accept\"}\n                            role=\"accept\"\n                            className={\"left\"}\n                            variant={this.props.variant === undefined ? \"info\" : this.props.variant}\n                            type={\"button\"}\n                            onClick={this.props.onSubmit}>\n                        {this.props.submitButtonText}\n                    </Button>\n                    <Button id={this.props.id + \"-button-cancel\"}\n                            role=\"cancel\"\n                            className={\"right\"}\n                            variant=\"secondary\"\n                            type={\"button\"}\n                            onClick={this.props.onCancel}>\n                        {this.props.cancelButtonText}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}",
    "export default __webpack_public_path__ + \"static/media/certificate.3484f279.png\";",
    "import React from \"react\";\nimport {Card, CardDeck, Image, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport Modal from \"./modal\";\nimport {AwardFill, KeyFill, TrashFill} from \"react-bootstrap-icons\";\nimport CertIcon from \"../media/certificate.png\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimClient from \"../scim/scim-client\";\nimport * as ScimConstants from \"../scim/scim-constants\";\nimport {LoadingSpinner} from \"./form-base\";\nimport {Optional} from \"../services/utils\";\n\n\nexport class CertificateCardEntry extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {loaded: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.deleteEntry = this.deleteEntry.bind(this);\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    async deleteEntry()\n    {\n        let response = await this.scimClient.deleteResource(this.props.alias);\n\n        if (response.success)\n        {\n            if (this.props.onDeleteSuccess !== undefined)\n            {\n                this.props.onDeleteSuccess(this.props.alias);\n            }\n        }\n        else\n        {\n            // TODO\n        }\n    }\n\n    async loadData()\n    {\n        this.setState({showSpinner: true});\n\n        let response = await this.scimClient.getResource(this.props.alias);\n\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let certInfo = resource[ScimConstants.CERT_URI];\n                this.setState({\n                    loaded: true,\n                    cert: certInfo,\n                    certInfo: certInfo.info\n                });\n            });\n        }\n        else\n        {\n            // TODO\n        }\n    }\n\n    showModal()\n    {\n        this.setState({showModal: true})\n    }\n\n    hideModal()\n    {\n        this.setState({showModal: false})\n    }\n\n    render()\n    {\n        const certificateTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                Certificate\n            </Tooltip>\n        );\n        const privateKeyTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                Private Key and Certificate\n            </Tooltip>\n        );\n\n        return (\n            <Card id={\"alias-card-\" + this.props.alias} key={this.props.alias}\n                  border={\"warning\"} bg={\"dark\"} className={\"alias-card\"}>\n                <Modal id={\"delete-dialog-\" + this.props.alias}\n                       show={this.state.showModal}\n                       variant=\"danger\"\n                       title={\"Delete '\" + this.props.alias + \"'\"}\n                       message=\"Are you sure?\"\n                       submitButtonText=\"delete\"\n                       onSubmit={this.deleteEntry}\n                       cancelButtonText=\"cancel\"\n                       onCancel={this.hideModal}>\n                </Modal>\n                <Card.Header id={\"alias-name-\" + this.props.alias}>\n                    {this.props.alias} {new Optional(this.props.keyInfo).map(info =>\n                    <React.Fragment>\n                        <br />\n                        (\n                        <span className={\"keyInfo\"}>\n                            {info.keyAlgorithm + \": \"\n                             + info.keyLength + \"-bit \"}\n                            {\n                                info.hasPrivateKey &&\n                                <OverlayTrigger placement=\"right\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={privateKeyTooltip}>\n                                    <KeyFill />\n                                </OverlayTrigger>\n                            }\n                            {\n                                !info.hasPrivateKey &&\n                                <OverlayTrigger placement=\"right\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={certificateTooltip}>\n                                    <AwardFill />\n                                </OverlayTrigger>\n                            }\n                        </span>\n                        )\n                    </React.Fragment>\n                )\n                                                                        .orElse(null)}\n                    <div className=\"card-control-icons\">\n                        <LoadingSpinner show={this.state.isLoading} />\n                        <TrashFill id={\"delete-icon-\" + this.props.alias} onClick={this.showModal} />\n                    </div>\n                </Card.Header>\n                <Card.Body>\n                    {\n                        this.state.loaded === false &&\n                        <React.Fragment>\n                            <div className={\"load-certificate-icon-container\"}>\n                                <Image src={CertIcon} className={\"load-certificate-icon\"} fluid /> <br />\n                                <Button id={\"load-certificate-data-button-for-\" + this.props.alias}\n                                        className={\"card-load-icon\"}\n                                        type={\"button\"}\n                                        onClick={this.loadData}>\n                                    Load Data\n                                </Button>\n                            </div>\n                        </React.Fragment>\n                    }\n                    {\n                        this.state.loaded === true &&\n                        <React.Fragment>\n                            <Card.Subtitle>Issuer</Card.Subtitle>\n                            <Card.Text id={\"issuer-dn-\" + this.props.alias}>\n                                {this.state.certInfo.issuerDn}\n                            </Card.Text>\n                            <Card.Subtitle>Subject</Card.Subtitle>\n                            <Card.Text id={\"subject-dn-\" + this.props.alias}>\n                                {this.state.certInfo.subjectDn}\n                            </Card.Text>\n                            <Card.Subtitle>SHA-256 Fingerprint</Card.Subtitle>\n                            <Card.Text id={\"sha-256-\" + this.props.alias}>\n                                {this.state.certInfo.sha256Fingerprint}\n                            </Card.Text>\n                            <Card.Subtitle>Valid From</Card.Subtitle>\n                            <Card.Text id={\"valid-from-\" + this.props.alias}>\n                                {new Date(this.state.certInfo.validFrom).toUTCString()}\n                            </Card.Text>\n                            <Card.Subtitle>Valid Until</Card.Subtitle>\n                            <Card.Text id={\"valid-until-\" + this.props.alias}>\n                                {new Date(this.state.certInfo.validTo).toUTCString()}\n                            </Card.Text>\n                        </React.Fragment>\n                    }\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default function CertificateList(props)\n{\n\n    return (\n        <React.Fragment>\n            <CardDeck id=\"keystore-certificate-entries\">\n                {\n                    props.certificateAliases !== undefined &&\n                    props.certificateAliases.map((certAlias) =>\n                    {\n                        return <CertificateCardEntry key={certAlias}\n                                                     scimResourcePath={props.scimResourcePath}\n                                                     alias={certAlias}\n                                                     onDeleteSuccess={props.onDeleteSuccess} />\n                    })\n                }\n            </CardDeck>\n        </React.Fragment>\n    );\n}",
    "import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {ErrorMessagesAlert, FormFileField, FormInputField, FormSelectField, LoadingSpinner} from \"../../base/form-base\";\nimport {downloadBase64Data, Optional} from \"../../services/utils\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {Alert, Badge, CardDeck, Image} from \"react-bootstrap\";\nimport downloadIcon from \"../../media/secure-download-icon.png\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {CertificateCardEntry} from \"../../base/certificate-list\";\nimport {KEYSTORE_ENDPOINT} from \"../../scim/scim-constants\";\n\n\nexport default class ApplicationKeystore extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.scimResourcePath = \"/scim/v2/Keystore\";\n        this.state = {};\n        this.setAliasSelectionResponse = this.setAliasSelectionResponse.bind(this);\n        this.onAliasSelectionSuccess = this.onAliasSelectionSuccess.bind(this);\n    }\n\n    setAliasSelectionResponse(resource)\n    {\n        let copiedResource = JSON.parse(JSON.stringify(resource));\n        this.setState({aliasSelectionResponse: copiedResource})\n    }\n\n    onAliasSelectionSuccess(resource)\n    {\n        this.setState({newKeyInfo: {value: resource.keyInfos[0]}})\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <KeystoreUpload scimResourcePath={this.scimResourcePath}\n                                setAliasSelectionResponse={this.setAliasSelectionResponse} />\n                <AliasSelection scimResourcePath={this.scimResourcePath}\n                                aliasSelectionResponse={this.state.aliasSelectionResponse}\n                                onCreateSuccess={this.onAliasSelectionSuccess} />\n                <KeystoreEntryList scimResourcePath={this.scimResourcePath}\n                                   newKeyInfo={this.state.newKeyInfo} />\n            </React.Fragment>\n        )\n    }\n}\n\nclass KeystoreUpload extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            success: false,\n            showSpinner: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.props.setAliasSelectionResponse(resource);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2>Keystore Upload</h2>\n                <Alert id={\"uploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Keystore was successfully uploaded</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"uploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"fileUpload.keystoreFile\"\n                                   label=\"Keystore File\"\n                                   placeholder=\"Select a keystore file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"fileUpload.keystorePassword\"\n                                    label=\"Keystore Password\"\n                                    type=\"password\"\n                                    placeholder=\"Keystore Password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"upload\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Upload\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass AliasSelection extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {success: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.save = this.save.bind(this);\n    }\n\n    async save(e)\n    {\n        e.preventDefault();\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.props.onCreateSuccess(resource);\n                this.setState({newKeyInfo: resource.keyInfos[0]});\n            })\n        }\n        else\n        {\n            this.setState({newKeyInfo: undefined});\n        }\n    }\n\n    render()\n    {\n        let stateId = new Optional(this.props.aliasSelectionResponse).map(val => val.aliasSelection)\n                                                                     .map(val => val.stateId)\n                                                                     .orElse(0);\n        let aliases = new Optional(this.props.aliasSelectionResponse).map(val => val.aliasSelection)\n                                                                     .map(val => val.aliases)\n                                                                     .orElse([]);\n        let className = new Optional(this.props.aliasSelectionResponse).map(val => \"\").orElse(\"disabled\")\n        return (\n            <React.Fragment>\n                <h2>Alias Selection</h2>\n                <Alert id={\"aliasSelectionForm-alert-success\"}\n                       variant={\"success\"}\n                       show={new Optional(this.state.newKeyInfo).isPresent()}>\n                    <Form.Text><GoThumbsup /> Entry with alias\n                                              '{new Optional(this.state.newKeyInfo).map(info => info.alias)\n                                                                                   .orElse(\"\")}'\n                                              was successfully added</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"aliasSelectionForm\"} onSubmit={this.save} ref={this.formReference} className={className}>\n                    <FormInputField name=\"aliasSelection.stateId\"\n                                    type=\"hidden\"\n                                    value={stateId}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormSelectField name=\"aliasSelection.aliases\"\n                                     label=\"Alias\"\n                                     options={aliases}\n                                     onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"aliasSelection.aliasOverride\"\n                                    label=\"Alias Override\"\n                                    type=\"text\"\n                                    placeholder=\"Store under another alias\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"aliasSelection.privateKeyPassword\"\n                                    label=\"Private Key Password\"\n                                    type=\"password\"\n                                    placeholder=\"Optional if password is identical to keystore password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"save\"} type=\"Save\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass KeystoreEntryList extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {keyInfos: []};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.onDeleteSuccess = this.onDeleteSuccess.bind(this);\n        this.downloadKeystore = this.downloadKeystore.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let response = await this.scimClient.listResources();\n        if (response.success)\n        {\n            response.resource.then(listResponse =>\n            {\n                this.setState({\n                    keyInfos: new Optional(listResponse.Resources[0]).map(val => val.keyInfos)\n                                                                     .orElse([])\n                })\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.newKeyInfo !== this.props.newKeyInfo &&\n            new Optional(this.props.newKeyInfo).map(info => info.value).isPresent())\n        {\n            this.setState(\n                {\n                    keyInfos: [...this.state.keyInfos, this.props.newKeyInfo.value],\n                    aliasDeleted: undefined\n                });\n\n        }\n    }\n\n    onDeleteSuccess(alias)\n    {\n        let keyInfos = this.state.keyInfos;\n\n        let findIndexOf = function findWithAttr(array, attr, value)\n        {\n            for (var i = 0; i < array.length; i += 1)\n            {\n                if (array[i][attr] === value)\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        const indexOfAlias = findIndexOf(keyInfos, \"alias\", alias)\n        if (indexOfAlias > -1)\n        {\n            keyInfos.splice(indexOfAlias, 1);\n        }\n        this.setState({\n            aliasDeleted: alias,\n            keyInfos: keyInfos\n        })\n    }\n\n    downloadKeystore(e)\n    {\n        e.preventDefault();\n        this.setState({downloading: true})\n        this.scimClient.getResource(\"1\", KEYSTORE_ENDPOINT, {attributes: \"applicationKeystore\"}).then(response =>\n        {\n            this.setState({downloading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    let base64ApplicationKeystore = resource.applicationKeystore;\n                    downloadBase64Data(base64ApplicationKeystore, \"application-keystore-pw-123456.p12\", \"p12\")\n                })\n            }\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2 id=\"application-certificate-info-header\">\n                    <p>Application Keystore Infos</p>\n                    <Badge className=\"download-keystore-icon\">\n                        <a id={\"keystore-download-link\"} href={\"/#\"} onClick={this.downloadKeystore}>\n                            <LoadingSpinner show={this.state.downloading || false} />\n                            <Image src={downloadIcon} fluid />\n                            <p>Download</p>\n                        </a>\n                    </Badge>\n                </h2>\n                <Alert id=\"card-list-infos-alert\"\n                       variant={\"info\"}>\n                    <Form.Text>\n                        <InfoCircle /> Application Keystore contains\n                                       \"{new Optional(this.state.keyInfos).map(val => val.length)\n                                                                          .orElse(0)}\"\n                                       entries\n                    </Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={this.state.aliasDeleted !== undefined}>\n                    <Form.Text>\n                        <GoThumbsup /> Key entry for alias \"{this.state.aliasDeleted}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <CardDeck id=\"keystore-certificate-entries\">\n                    {\n                        this.state.keyInfos.map(keyInfo =>\n                        {\n                            return <CertificateCardEntry key={keyInfo.alias}\n                                                         scimResourcePath={this.props.scimResourcePath}\n                                                         alias={keyInfo.alias}\n                                                         keyInfo={keyInfo}\n                                                         onDeleteSuccess={this.onDeleteSuccess} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n}",
    "import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {ErrorMessagesAlert, FormFileField, FormInputField, LoadingSpinner} from \"../../base/form-base\";\nimport {downloadBase64Data, Optional} from \"../../services/utils\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {Alert, Badge, Image} from \"react-bootstrap\";\nimport downloadIcon from \"../../media/secure-download-icon.png\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\nimport {GoFlame, GoThumbsup} from \"react-icons/go\";\nimport CertificateList from \"../../base/certificate-list\";\nimport {TRUSTSTORE_ENDPOINT} from \"../../scim/scim-constants\";\n\n\nexport default class ApplicationTruststore extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.scimResourcePath = \"/scim/v2/Truststore\";\n        this.state = {};\n        this.onMergeSuccess = this.onMergeSuccess.bind(this);\n        this.onUploadSuccess = this.onUploadSuccess.bind(this);\n    }\n\n    onMergeSuccess(mergedAliases)\n    {\n        this.setState({newAliases: mergedAliases});\n    }\n\n    onUploadSuccess(addedCertificateAlias)\n    {\n        this.setState({newAliases: [addedCertificateAlias]});\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <TruststoreUploadForm scimResourcePath={this.scimResourcePath}\n                                      onMergeSuccess={this.onMergeSuccess} />\n                <CertificateUploadForm scimResourcePath={this.scimResourcePath}\n                                       aliasSelectionResponse={this.state.aliasSelectionResponse}\n                                       onUploadSuccess={this.onUploadSuccess} />\n                <CertificateEntryList scimResourcePath={this.scimResourcePath}\n                                      newAliases={this.state.newAliases} />\n            </React.Fragment>\n        )\n    }\n}\n\nclass TruststoreUploadForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            success: false,\n            showSpinner: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        this.setState({\n            addedAliases: [],\n            duplicateAliases: [],\n            duplicateCertificates: []\n        });\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let truststoreUploadResponse = resource.truststoreUploadResponse;\n\n                let addedAliases;\n                let duplicateAliases;\n                let duplicateCertificates;\n\n                new Optional(truststoreUploadResponse).ifPresent(response =>\n                {\n                    addedAliases = response.aliases;\n                    duplicateAliases = new Optional(response.duplicateAliases).do(val => val.sort())\n                                                                              .orElse([]);\n                    duplicateCertificates = new Optional(response.duplicateCertificateAliases).do(val => val.sort())\n                                                                                              .orElse([])\n                })\n\n                this.setState({\n                    addedAliases: new Optional(addedAliases).orElse([]),\n                    duplicateAliases: new Optional(duplicateAliases).orElse([]),\n                    duplicateCertificates: new Optional(duplicateCertificates).orElse([])\n                });\n\n                this.props.onMergeSuccess(addedAliases);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        let numberOfDuplicateAliases = new Optional(this.state.duplicateAliases).map(val => val.length).orElse(0);\n        let numberOfDuplicateCerts = new Optional(this.state.duplicateCertificates).map(val => val.length).orElse(0);\n\n        return (\n            <React.Fragment>\n                <h2>Truststore Upload</h2>\n                <Alert id={\"truststoreUploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Truststore was successfully merged</Form.Text>\n                </Alert>\n                <Alert id={\"upload-form-alert-duplicate-aliases\"} variant={\"warning\"}\n                       show={numberOfDuplicateAliases > 0}>\n                    <Form.Text>\n                        <GoFlame /> The following aliases could not be added because the alias is\n                                    duplicated.<br />\n                                    Number of not added aliases: {numberOfDuplicateAliases} <br />\n                                    [{this.state.duplicateAliases}]\n                    </Form.Text>\n                </Alert>\n                <Alert id={\"upoad-form-alert-duplicate-certificates\"} variant={\"warning\"}\n                       show={numberOfDuplicateCerts > 0}>\n                    <Form.Text>\n                        <GoFlame /> The following aliases could not be added because the certificate is already\n                                    present: [{this.state.duplicateCertificates}]\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"truststoreUploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"truststoreUpload.truststoreFile\"\n                                   label=\"Truststore File\"\n                                   placeholder=\"Select a truststore file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)}\n                    />\n                    <FormInputField name=\"truststoreUpload.truststorePassword\"\n                                    label=\"Truststore Password\"\n                                    type=\"password\"\n                                    placeholder=\"Truststore Password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"uploadTruststore\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Upload\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass CertificateUploadForm extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {success: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        this.setState({\n            addedAlias: undefined\n        });\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let certificateUploadResponse = resource.certificateUploadResponse;\n\n                let addedAlias;\n                new Optional(certificateUploadResponse).ifPresent(response =>\n                {\n                    addedAlias = response.alias;\n                })\n\n                this.setState({\n                    addedAlias: addedAlias\n                });\n\n                this.props.onUploadSuccess(addedAlias);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2>Certificate Upload</h2>\n                <Alert id={\"certificateUploadForm-alert-success\"}\n                       variant={\"success\"}\n                       show={new Optional(this.state.addedAlias).isPresent()}>\n                    <Form.Text><GoThumbsup /> Entry with alias '{this.state.addedAlias}' was successfully\n                                              added</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"certificateUploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"certificateUpload.certificateFile\"\n                                   label=\"Certificate File\"\n                                   placeholder=\"Select a certificate file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"certificateUpload.alias\"\n                                    label=\"Alias\"\n                                    placeholder=\"Certificate Alias\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"uploadCertificate\"} type=\"Save\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass CertificateEntryList extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {aliases: []};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.onDeleteSuccess = this.onDeleteSuccess.bind(this);\n        this.downloadTruststore = this.downloadTruststore.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let response = await this.scimClient.listResources();\n        if (response.success)\n        {\n            response.resource.then(listResponse =>\n            {\n                let aliases = new Optional(listResponse.Resources[0]).map(val => val.aliases).orElse([]);\n                aliases.sort();\n                this.setState({\n                    aliases: aliases\n                })\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (new Optional(this.props.newAliases).isPresent() && prevProps.newAliases !== this.props.newAliases)\n        {\n            let aliases = this.state.aliases.concat(this.props.newAliases);\n            aliases.sort();\n            this.setState({aliases: aliases, aliasDeleted: undefined});\n        }\n    }\n\n    onDeleteSuccess(alias)\n    {\n        let aliases = this.state.aliases;\n        const indexOfAlias = aliases.indexOf(alias)\n        if (indexOfAlias > -1)\n        {\n            aliases.splice(indexOfAlias, 1);\n        }\n        this.setState({\n            aliasDeleted: alias,\n            aliases: aliases\n        })\n    }\n\n    downloadTruststore(e)\n    {\n        e.preventDefault();\n        this.setState({downloading: true})\n        this.scimClient.getResource(\"1\", TRUSTSTORE_ENDPOINT, {attributes: \"applicationTruststore\"}).then(response =>\n        {\n            this.setState({downloading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    let base64ApplicationTruststore = resource.applicationTruststore;\n                    downloadBase64Data(base64ApplicationTruststore, \"application-truststore-pw-123456.jks\", \"jks\")\n                })\n            }\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2 id=\"application-certificate-info-header\">\n                    <p>Application Truststore Infos</p>\n                    <Badge className=\"download-keystore-icon\">\n                        <a id={\"truststore-download-link\"} href={\"/#\"} onClick={this.downloadTruststore}>\n                            <LoadingSpinner show={this.state.downloading || false} />\n                            <Image src={downloadIcon} fluid />\n                            <p>Download</p>\n                        </a>\n                    </Badge>\n                </h2>\n                <Alert id=\"card-list-infos-alert\"\n                       variant={\"info\"}>\n                    <Form.Text>\n                        <InfoCircle /> Application Truststore contains\n                                       \"{new Optional(this.state.aliases).map(val => val.length)\n                                                                         .orElse(0)}\"\n                                       entries\n                    </Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={this.state.aliasDeleted !== undefined}>\n                    <Form.Text>\n                        <GoThumbsup /> Key entry for alias \"{this.state.aliasDeleted}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <CertificateList certificateAliases={this.state.aliases}\n                                 scimResourcePath={this.props.scimResourcePath}\n                                 onDeleteSuccess={this.onDeleteSuccess} />\n            </React.Fragment>\n        );\n    }\n}",
    "import React, {createRef} from \"react\";\nimport ScimClient from \"../../scim/scim-client\";\nimport Modal from \"../../base/modal\";\nimport {Alert, Card, CardDeck, Table} from \"react-bootstrap\";\nimport {FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {Optional} from \"../../services/utils\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    ErrorMessagesAlert,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../../base/form-base\";\nimport * as lodash from \"lodash\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimComponentBasics from \"../../scim/scim-component-basics\";\n\n\nexport default class ProxyManagement extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            proxyList: [],\n            showSpinner: false\n        }\n        this.scimResourcePath = \"/scim/v2/Proxy\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewProxy = this.addNewProxy.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.addProxy = this.addProxy.bind(this);\n        this.removeProxy = this.removeProxy.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = new Optional((this.state.currentPage * window.MAX_RESULTS) + 1).filter(val => !isNaN(val))\n                                                                                        .orElse(1);\n        let count = window.MAX_RESULTS;\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'id'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.proxyList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    proxyList: concatedResources,\n                    errors: {},\n                    newProxy: undefined,\n                    deletedProxyId: undefined\n                })\n            })\n        });\n    }\n\n    addNewProxy()\n    {\n        let proxyList = [...this.state.proxyList];\n        const resource = proxyList.filter(proxy => proxy.id === undefined);\n        if (resource.length === 0)\n        {\n            proxyList.unshift({});\n            this.setState({\n                proxyList: proxyList,\n                newProxy: undefined,\n                deletedProxyId: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newProxy: undefined,\n                deletedProxyId: undefined\n            })\n        }\n    }\n\n    onUpdateSuccess(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        let oldProxy = lodash.find(proxyList, p => p.id === proxy.id);\n        lodash.merge(oldProxy, proxy);\n        this.setState({\n            proxyList: proxyList,\n            newProxy: undefined,\n            deletedProxyId: undefined\n        })\n    }\n\n    onCreateSuccess(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        let oldProxy = lodash.find(proxyList, p => p.id === undefined);\n        lodash.merge(oldProxy, proxy);\n        this.setState({\n            proxyList: proxyList,\n            newProxy: oldProxy,\n            deletedProxyId: undefined\n        })\n    }\n\n    addProxy(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        proxyList.unshift(proxy);\n\n        this.setState({\n            proxyList: proxyList,\n            newProxy: undefined,\n            deletedProxyId: undefined\n        })\n    }\n\n    removeProxy(id)\n    {\n        let proxyList = [...this.state.proxyList];\n        const newProxyList = proxyList.filter(proxy => proxy.id !== id)\n        this.setState({\n            proxyList: newProxyList,\n            newProxy: undefined,\n            deletedProxyId: id,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <p className={\"add-new-resource\"} onClick={this.addNewProxy}>\n                    <span className={\"add-new-resource\"}>Add new Proxy <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>Proxies</h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newProxy).isPresent()}>\n                    <Form.Text><GoThumbsup /> Proxy with id\n                                              '{new Optional(this.state.newProxy).map(proxy => proxy.id)\n                                                                                 .orElse(-1)}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedProxyId).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> Proxy with ID \"{this.state.deletedProxyId}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.proxyList.map((proxy) =>\n                        {\n                            return <ProxyCardEntry key={new Optional(proxy.id).orElse(\"new\")}\n                                                   scimResourcePath={this.scimResourcePath}\n                                                   proxy={proxy}\n                                                   onCreateSuccess={this.onCreateSuccess}\n                                                   onUpdateSuccess={this.onUpdateSuccess}\n                                                   onDeleteSuccess={this.removeProxy} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n\n}\n\nclass ProxyCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.proxy).map(val => val.id).map(val => false).orElse(true),\n            proxy: JSON.parse(JSON.stringify(props.proxy))\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.proxy,\n            getCurrentResource: () => this.state.proxy,\n            setCurrentResource: resource => this.setState({proxy: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n    render()\n    {\n        return (\n            <Card id={\"proxy-card-\" + this.state.proxy.id} key={this.state.proxy.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card provider-card\"}>\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.proxy.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete Proxy with ID '\" + this.state.proxy.id + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success-\" + this.state.proxy.id} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> Proxy was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"proxy-card-header-\" + this.state.proxy.id}>\n                        <div className={\"card-name-header\"}>\n                            {\n                                this.state.proxy.id !== undefined &&\n                                <h5>Proxy '{this.state.proxy.id}'</h5>\n                            }\n                        </div>\n                        <CardControlIcons resource={this.state.proxy}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.scimComponentBasics.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <ModifiableCardEntry header={\"Hostname\"}\n                                                         name={\"hostname\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.hostname}\n                                                         placeholder={\"The URL to the OpenID Providers discovery endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Port\"}\n                                                         name={\"port\"}\n                                                         type={\"number\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.port}\n                                                         placeholder={\"The port number of the Proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Username\"}\n                                                         name={\"username\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.username}\n                                                         placeholder={\"The username to authenticate at the proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Password\"}\n                                                         name={\"password\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.password}\n                                                         placeholder={\"The password to authenticate at the Proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardDateRows resource={this.state.proxy} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n",
    "import {Tab, Tabs} from \"react-bootstrap\";\nimport ApplicationKeystore from \"./application-keystore\";\nimport ApplicationTruststore from \"./application-truststore\";\nimport ProxyManagement from \"./proxy-management\";\n\nexport default function SystemOverview()\n{\n    return (\n        <Tabs defaultActiveKey=\"keystore\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"keystore\" title=\"Application Keystore\">\n                <ApplicationKeystore />\n            </Tab>\n            <Tab eventKey=\"truststore\" title=\"Application Truststore\">\n                <ApplicationTruststore />\n            </Tab>\n            <Tab eventKey=\"proxies\" title=\"Proxies\">\n                <ProxyManagement />\n            </Tab>\n        </Tabs>\n    )\n}",
    "import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Optional} from \"../services/utils\";\nimport {Alert, Card, CardDeck, Nav, Table} from \"react-bootstrap\";\nimport {ArrowRightCircle, FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    ErrorMessagesAlert,\n    LoadingSpinner,\n    ModifiableCardEntry,\n    ModifiableCardFileEntry,\n    ModifiableCardList\n} from \"../base/form-base\";\nimport * as lodash from \"lodash\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport Modal from \"../base/modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {CardInputField} from \"../base/card-base\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\nexport default class OpenidProvider extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            errors: {},\n            providerList: [],\n            currentPage: 0\n        };\n        this.scimResourcePath = \"/scim/v2/OpenIdProvider\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewProvider = this.addNewProvider.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.removeProvider = this.removeProvider.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = (this.state.currentPage * this.props.serviceProviderConfig.filter.maxResults) + 1;\n        let count = this.props.serviceProviderConfig.filter.maxResults;\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'name'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.providerList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    providerList: concatedResources,\n                    errors: {}\n                })\n            })\n        });\n    }\n\n    addNewProvider()\n    {\n        let providerList = [...this.state.providerList];\n        const resource = providerList.filter(provider => provider.id === undefined);\n        if (resource.length === 0)\n        {\n            providerList.unshift({});\n            this.setState({\n                providerList: providerList,\n                newProvider: undefined,\n                deletedProviderName: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newProvider: undefined,\n                deletedProviderName: undefined\n            })\n        }\n    }\n\n    onUpdateSuccess(provider)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = lodash.find(providerList, p => p.id === provider.id);\n        lodash.merge(oldProvider, provider);\n        this.setState({\n            providerList: providerList,\n            newProvider: undefined,\n            deletedProviderName: undefined\n        })\n    }\n\n    onCreateSuccess(provider)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = lodash.find(providerList, p => p.id === undefined);\n        lodash.merge(oldProvider, provider);\n        this.setState({\n            providerList: providerList,\n            newProvider: oldProvider,\n            deletedProviderName: undefined\n        })\n    }\n\n    removeProvider(id)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = providerList.filter(provider => provider.id === id)[0];\n        lodash.remove(providerList, provider => provider.id === id);\n        this.setState({\n            providerList: providerList,\n            newProvider: undefined,\n            deletedProviderName: oldProvider.name,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n\n                <p className={\"add-new-resource\"} onClick={this.addNewProvider}>\n                    <span className={\"add-new-resource\"}>Add new Provider <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>\n                    <span>OpenID Provider List</span>\n                </h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newProvider).isPresent()}>\n                    <Form.Text><GoThumbsup /> Provider with name\n                                              '{new Optional(this.state.newProvider).map(provider => provider.name)\n                                                                                    .orElse(\"-\")}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedProviderName).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> OpenID Provider \"{this.state.deletedProviderName}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.providerList.map((provider) =>\n                        {\n                            return <OpenIdProviderCardEntry key={new Optional(provider.id).orElse(\"new\")}\n                                                            scimResourcePath={this.scimResourcePath}\n                                                            provider={provider}\n                                                            onCreateSuccess={this.onCreateSuccess}\n                                                            onUpdateSuccess={this.onUpdateSuccess}\n                                                            onDeleteSuccess={this.removeProvider} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n}\n\nclass OpenIdProviderCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.provider).map(val => val.id).map(val => false).orElse(true),\n            provider: JSON.parse(JSON.stringify(props.provider))\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.provider,\n            getCurrentResource: () => this.state.provider,\n            setCurrentResource: resource => this.setState({provider: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n\n    render()\n    {\n        return (\n            <Card id={\"provider-card-\" + this.state.provider.id} key={this.state.provider.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card provider-card\"}>\n                <Nav className=\"flex-column\">\n                </Nav>\n\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.provider.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete OpenID Provider with name '\" + this.state.provider.name + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success\"} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> OpenID Provider was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"provider-card-header-\" + this.state.provider.id}>\n                        <div className={\"card-name-header\"}>\n                            {\n                                this.state.editMode === false &&\n                                <React.Fragment>\n                                    <LinkContainer exact\n                                                   to={\"/openIdProvider/\" + this.props.provider.id + \"/openIdClients\"}>\n                                        <a href={\"/#\"}>\n                                            <h5>\n                                                <ArrowRightCircle style={{color: \"bisque\", marginRight: \"15px\"}}\n                                                                  size={\"20px\"} height={\"30px\"} />\n                                                {this.state.provider.name}\n                                            </h5>\n                                        </a>\n                                    </LinkContainer>\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.editMode === true &&\n                                <CardInputField\n                                    value={new Optional(this.state.provider.name).orElse(\"\")}\n                                    type={\"text\"}\n                                    id={\"name-\" + this.state.provider.id}\n                                    name={\"name\"}\n                                    placeholder={\"OpenID Provider identifier\"}\n                                    onChange={this.scimComponentBasics.updateInput}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n                            }\n                        </div>\n                        <CardControlIcons resource={this.state.provider}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.scimComponentBasics.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <ModifiableCardEntry header={\"Discovery Endpoint\"}\n                                                         name={\"discoveryEndpoint\"}\n                                                         resourceId={this.state.provider.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.provider.discoveryEndpoint}\n                                                         placeholder={\"The URL to the OpenID Providers discovery endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Authorization Endpoint\"}\n                                                         name={\"authorizationEndpoint\"}\n                                                         resourceId={this.state.provider.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.provider.authorizationEndpoint}\n                                                         placeholder={\"The URL to the OpenID Providers authorization endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Token Endpoint\"}\n                                                         name={\"tokenEndpoint\"}\n                                                         resourceId={this.state.provider.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.provider.tokenEndpoint}\n                                                         placeholder={\"The URL to the OpenID Providers token endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardList header={\"Resource Endpoints\"}\n                                                        name={\"resourceEndpoints\"}\n                                                        resourceId={this.state.provider.id}\n                                                        editMode={this.state.editMode}\n                                                        resourceValue={this.state.provider.resourceEndpoints}\n                                                        placeholder={\"An optional resource endpoint that is provided\"}\n                                                        onAdd={() =>\n                                                        {\n                                                            let resourceEndpoints = new Optional(\n                                                                this.state.provider.resourceEndpoints).map(\n                                                                array => [...array]).orElse([]);\n                                                            resourceEndpoints.push(\"\");\n                                                            let provider = this.state.provider;\n                                                            provider.resourceEndpoints = resourceEndpoints;\n                                                            this.setState({provider: provider})\n                                                        }}\n                                                        onRemove={(index) =>\n                                                        {\n                                                            let resourceEndpoints = [...this.state.provider.resourceEndpoints];\n                                                            resourceEndpoints.splice(index, 1);\n                                                            let provider = this.state.provider;\n                                                            provider.resourceEndpoints = resourceEndpoints;\n                                                            this.setState({provider: provider})\n                                                        }}\n                                                        onChange={this.scimComponentBasics.updateInput}\n                                                        onError={fieldName => this.scimClient.getErrors(\n                                                            this.state, fieldName)} />\n                                    <ModifiableCardFileEntry header={\"Signature Verification Key\"}\n                                                             name={\"signatureVerificationKey\"}\n                                                             resourceId={this.state.provider.id}\n                                                             editMode={this.state.editMode}\n                                                             resourceValue={this.state.provider.signatureVerificationKey}\n                                                             placeholder={\"Public key to verify JWT signatures\"}\n                                                             onChange={this.scimComponentBasics.updateInput}\n                                                             onError={fieldName => this.scimClient.getErrors(\n                                                                 this.state, fieldName)}\n                                                             onRemove={this.scimComponentBasics.updateInput} />\n                                    <CardDateRows resource={this.state.provider} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        )\n    }\n}\n",
    "import React, {createRef} from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {ErrorListItem, FormCheckbox, FormInputField, LoadingSpinner} from \"../base/form-base\";\nimport Button from \"react-bootstrap/Button\";\nimport {Optional} from \"../services/utils\";\nimport {Alert, Col, Container, Dropdown, DropdownButton, OverlayTrigger, Row, Tooltip} from \"react-bootstrap\";\nimport * as lodash from \"lodash\";\n\nexport default class JwtBuilder extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            jwtBuilder: {},\n            header: {},\n            body: {},\n            addX5Sha256tHeader: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(\"/scim/v2/JwtBuilder\", this.setState);\n        this.formReference = createRef();\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.handleKeySelectionSelection = this.handleKeySelectionSelection.bind(this);\n        this.handleSignatureAlgorithmSelection = this.handleSignatureAlgorithmSelection.bind(this);\n        this.handleEncryptionAlgorithmSelection = this.handleEncryptionAlgorithmSelection.bind(this);\n        this.handleContentEncryptionAlgorithmSelection = this.handleContentEncryptionAlgorithmSelection.bind(this);\n        this.handleHeaderChange = this.handleHeaderChange.bind(this);\n        this.handleBodyChange = this.handleBodyChange.bind(this);\n        this.addJwtBody = this.addJwtBody.bind(this);\n        this.addDefaultJwtAttributes = this.addDefaultJwtAttributes.bind(this);\n        this.addKeyIdToHeader = this.addKeyIdToHeader.bind(this);\n        this.handleAddSha256Thumbprint = this.handleAddSha256Thumbprint.bind(this);\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.jwtBuilder,\n            getCurrentResource: () => this.state.jwtBuilder,\n            setCurrentResource: resource =>\n            {\n            },\n            setState: this.setState,\n            onCreateSuccess: this.onCreateSuccess\n        });\n    }\n\n    componentDidMount()\n    {\n        this.addHeader();\n        this.addDefaultJwtAttributes();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.jwtInfo !== this.props.jwtInfo && this.props.jwtInfo !== undefined)\n        {\n            this.handleSignatureAlgorithmSelection(this.props.jwtInfo.signatureAlgorithms[0])\n            this.addHeader();\n        }\n    }\n\n    onCreateSuccess(resource)\n    {\n        let jwtArea = document.getElementById(\"jwt\");\n        jwtArea.value = resource.jwt;\n\n        this.setState({header: JSON.parse(resource.header)});\n        this.addHeader();\n    }\n\n    async handleKeySelectionSelection(value)\n    {\n        await this.setState({selectedKey: value})\n        let hiddenKeyIdInputField = document.getElementById(\"keyId\");\n        hiddenKeyIdInputField.value = value;\n    }\n\n    addKeyIdToHeader()\n    {\n        let header = this.state.header;\n        header[\"kid\"] = this.state.selectedKey\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleSignatureAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"alg\"] = value\n        header[\"enc\"] = undefined\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleEncryptionAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"alg\"] = value\n        header[\"enc\"] = new Optional(this.state.header.enc).orElse(new Optional(this.state.jwtInfo)\n            .map(val => val.encryptionAlgorithms[0]).orElse(\"\"));\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleContentEncryptionAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"enc\"] = value\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleHeaderChange(e)\n    {\n        try\n        {\n            let header = JSON.parse(e.target.value);\n            this.setState({header: header})\n        } catch (Exception)\n        {\n        }\n    }\n\n    handleBodyChange(e)\n    {\n        try\n        {\n            let body = JSON.parse(e.target.value);\n            this.setState({body: body})\n        } catch (Exception)\n        {\n        }\n    }\n\n    addHeader()\n    {\n        let headerArea = document.getElementById(\"jwt-builder-header\");\n        headerArea.value = JSON.stringify(this.state.header, undefined, 4);\n    }\n\n    async addDefaultJwtAttributes()\n    {\n        let body = {\n            iss: new Optional(this.state.body.iss).orElse(\"\"),\n            aud: new Optional(this.state.body.aud).orElse(\"\"),\n            sub: new Optional(this.state.body.sub).orElse(\"\"),\n            iat: new Date().getTime(),\n            exp: new Date().getTime() + (3600 * 24),\n            jti: new Optional(this.state.body.jti).orElse(\"\")\n        }\n        let mergedBody = lodash.merge(this.state.body, body)\n\n        await this.setState({body: mergedBody});\n        this.addJwtBody();\n    }\n\n    addJwtBody()\n    {\n        let bodyArea = document.getElementById(\"jwt-builder-body\");\n        bodyArea.value = JSON.stringify(this.state.body, undefined, 4);\n    }\n\n    handleAddSha256Thumbprint(event)\n    {\n        let isSelected = event.target.checked;\n        this.setState({addX5Sha256tHeader: isSelected});\n    }\n\n    render()\n    {\n        let kidMatchesHeader = this.state.selectedKey === this.state.header.kid;\n\n        return (\n            <Container>\n                <Row>\n                    <Col sm={12}>\n                        {\n                            ((this.state.errors || {}).errorMessages || []).length > 0 &&\n                            <Alert variant={\"danger\"}>\n                                <ul className=\"error-list\">\n                                    {this.state.errors.errorMessages.map((message, index) =>\n                                        <ErrorListItem key={\"error-message-\" + index} message={message} />)}\n                                </ul>\n                            </Alert>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Dropdown>\n                            <DropdownButton id={\"jwt-builder-aliases\"}\n                                            title={\"available keys\"}\n                                            onSelect={this.handleKeySelectionSelection}>\n                                {\n                                    new Optional(this.props.keyInfos).isPresent() &&\n                                    this.props.keyInfos.map((keyInfo) =>\n                                    {\n                                        return <Dropdown.Item key={keyInfo.alias}\n                                                              eventKey={keyInfo.alias}>{keyInfo.alias + \" (\"\n                                                                                        + keyInfo.keyAlgorithm\n                                                                                        + \"-\" + keyInfo.keyLength\n                                                                                        + \"-bit)\"}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                            <p>selected key:\n\n                                <OverlayTrigger\n                                    placement={\"top\"}\n                                    overlay={\n                                        <Tooltip>\n                                            Add as 'kid' to JOSE-header\n                                        </Tooltip>\n                                    }\n                                >\n                                <span className={\"code\"}\n                                      style={{\n                                          marginLeft: \"15px\",\n                                          color: kidMatchesHeader ? \"lightgreen\" : \"lightcoral\",\n                                          cursor: \"pointer\"\n                                      }}\n                                      onClick={this.addKeyIdToHeader}>\n                                   {this.state.selectedKey}\n                                </span>\n                                </OverlayTrigger>\n                            </p>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"signatureAlgorithms\"}\n                                            title={\"signature algorithms\"}\n                                            onSelect={this.handleSignatureAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).map(val => val[\"signatureAlgorithms\"]).isPresent()\n                                    &&\n                                    this.props.jwtInfo[\"signatureAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"keyWrapAlgorithms\"}\n                                            title={\"key wrap algorithms\"}\n                                            onSelect={this.handleEncryptionAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).map(val => val[\"keyWrapAlgorithms\"]).isPresent()\n                                    &&\n                                    this.props.jwtInfo[\"keyWrapAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"contentEncryptionAlgorithms\"}\n                                            title={\"content encryption algorithms\"}\n                                            onSelect={this.handleContentEncryptionAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).isPresent() &&\n                                    this.props.jwtInfo[\"encryptionAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Button type={\"button\"} className={\"functional-button\"} onClick={this.addDefaultJwtAttributes}>\n                            extend by JWT attributes\n                        </Button>\n\n                        <Form.Check onChange={this.handleAddSha256Thumbprint}\n                                    className={\"jwt sha-256-check\"}\n                                    label={\"Add SHA-256 thumbprint to header\"} />\n\n                    </Col>\n                    <Col sm={9}>\n                        <Container>\n                            <Row>\n                                <Col>\n                                    <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n                                        <FormInputField name=\"keyId\"\n                                                        type=\"hidden\"\n                                                        value={this.state.selectedKey || \"\"}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                        <FormCheckbox name=\"addX5Sha256tHeader\"\n                                                      type=\"hidden\"\n                                                      readOnly={true}\n                                                      checked={this.state.addX5Sha256tHeader}\n                                                      onError={fieldName => this.scimClient.getErrors(this.state,\n                                                          fieldName)} />\n                                        <FormInputField id={\"jwt-builder-header\"}\n                                                        name=\"header\"\n                                                        type=\"text\"\n                                                        as=\"textarea\"\n                                                        onChange={this.handleHeaderChange}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                        <FormInputField id={\"jwt-builder-body\"}\n                                                        name=\"body\"\n                                                        type=\"text\"\n                                                        as=\"textarea\"\n                                                        onChange={this.handleBodyChange}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                    </Form>\n                                </Col>\n                                <Col sm={5}>\n                                    <Form.Control id={\"jwt\"}\n                                                  sm={5}\n                                                  as={\"textarea\"}\n                                                  onChange={this.handleBodyChange} />\n\n                                </Col>\n                            </Row>\n                        </Container>\n                        <Button id={\"create-jwt\"} type={\"button\"} onClick={this.scimComponentBasics.onSubmit}>\n                            <LoadingSpinner show={this.state.isLoading} /> Create\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n",
    "import React from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport JwtParser from \"./jwt-parser\";\nimport JwtBuilder from \"./jwt-builder\";\nimport {ApplicationInfoContext} from \"../app\";\n\nexport default class JwtHandler extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(\"/scim/v2/JwtBuilder\", this.setState);\n    }\n\n    componentDidMount()\n    {\n        this.scimClient.getResource(null, \"/scim/v2/Keystore\").then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({keyInfos: listResponse.Resources[0].keyInfos});\n                })\n            }\n        });\n    }\n\n\n    render()\n    {\n        return (\n            <ApplicationInfoContext.Consumer>\n                {appInfo =>\n                    appInfo &&\n                    <Tabs defaultActiveKey=\"jwtparser\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"jwtparser\" title=\"JWT Parser\">\n                            <JwtParser keyInfos={this.state.keyInfos} jwtInfo={appInfo.jwtInfo} />\n                        </Tab>\n                        <Tab eventKey=\"jwtbuilder\" title=\"JWT Builder\">\n                            <JwtBuilder keyInfos={this.state.keyInfos} jwtInfo={appInfo.jwtInfo} />\n                        </Tab>\n                    </Tabs>\n                }\n            </ApplicationInfoContext.Consumer>\n        )\n    }\n}\n",
    "import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Optional} from \"../services/utils\";\nimport * as lodash from \"lodash\";\nimport {ArrowLeftCircle, ArrowRightCircle, FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {Alert, Card, CardDeck, Table} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    CardListSelector,\n    CardRadioSelector,\n    ErrorMessagesAlert,\n    HiddenCardEntry,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../base/form-base\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Modal from \"../base/modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {ApplicationInfoContext} from \"../app\";\n\n\nexport default class OpenidClients extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            errors: {},\n            clientList: [],\n            aliases: [],\n            currentPage: 0,\n            keyInfos: [],\n            provider: {}\n        };\n        this.scimResourcePath = \"/scim/v2/OpenIdClient\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewClient = this.addNewClient.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.removeClient = this.removeClient.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = (this.state.currentPage * this.props.serviceProviderConfig.filter.maxResults) + 1;\n        let count = this.props.serviceProviderConfig.filter.maxResults;\n\n        let openIdProviderId = this.props.match.params.id;\n        let openIdProviderResourcePath = \"/scim/v2/OpenIdProvider\";\n        await this.scimClient.getResource(openIdProviderId, openIdProviderResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(openIdProvider =>\n                {\n                    this.setState({provider: openIdProvider});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'clientId'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.clientList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    clientList: concatedResources,\n                    errors: {}\n                })\n            })\n        });\n\n        this.loadKeystoreInfos();\n    }\n\n    async loadKeystoreInfos()\n    {\n        let keystoreResourcePath = \"/scim/v2/Keystore\";\n        this.scimClient.getResource(undefined, keystoreResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({\n                        keyInfos: new Optional(listResponse).map(lr => lr.Resources).map(r => r[0]).map(\n                            keystore => keystore.keyInfos).orElse([])\n                    });\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n    }\n\n    addNewClient()\n    {\n        let clientList = [...this.state.clientList];\n        const resource = clientList.filter(client => client.id === undefined);\n        if (resource.length === 0)\n        {\n            clientList.unshift({});\n            this.setState({\n                clientList: clientList,\n                newClient: undefined,\n                deletedClientId: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newClient: undefined,\n                deletedClientId: undefined\n            })\n        }\n    }\n\n    onCreateSuccess(client)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = lodash.find(clientList, c => c.id === undefined);\n        lodash.merge(oldClient, client);\n        this.setState({\n            providerList: clientList,\n            newProvider: oldClient,\n            deletedClientId: undefined\n        })\n    }\n\n    onUpdateSuccess(client)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = lodash.find(clientList, p => p.id === client.id);\n        lodash.merge(oldClient, client);\n        this.setState({\n            clientList: clientList,\n            newProxy: undefined,\n            deletedClientId: undefined\n        })\n    }\n\n    removeClient(id)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = clientList.filter(client => client.id === id)[0];\n        lodash.remove(clientList, client => client.id === id);\n        this.setState({\n            clientList: clientList,\n            newClient: undefined,\n            deletedClientId: oldClient.clientId,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <LinkContainer exact\n                               to={\"/openIdProvider/\"}>\n                    <a href={\"/#\"}>\n                        <h5 style={{height: \"35px\", padding: \"0\", paddingLeft: \"10px\"}}>\n                            <ArrowLeftCircle style={{color: \"bisque\"}} height={\"35px\"} size={\"25px\"} />\n                            <span style={{marginLeft: \"15px\"}}>Back to Provider Overview</span>\n                        </h5>\n                    </a>\n                </LinkContainer>\n\n                <h5>Provider: <span style={{color: \"lightgray\"}}>{this.state.provider.name}</span></h5>\n\n                <p className={\"add-new-resource\"} onClick={this.addNewClient}>\n                    <span className={\"add-new-resource\"}>Add new Client <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>\n                    <span>OpenID Client List</span>\n                </h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newClient).isPresent()}>\n                    <Form.Text><GoThumbsup /> Client with clientId\n                                              '{new Optional(this.state.newClient).map(client => client.clientId)\n                                                                                  .orElse(\"-\")}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedClientId).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> OpenID Client \"{this.state.deletedClientId}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.clientList.map((client) =>\n                        {\n                            return <OpenIdClientCardEntry key={new Optional(client.id).orElse(\"new\")}\n                                                          provider={this.state.provider}\n                                                          scimResourcePath={this.scimResourcePath}\n                                                          client={client}\n                                                          keyInfos={this.state.keyInfos}\n                                                          onCreateSuccess={this.onCreateSuccess}\n                                                          onUpdateSuccess={this.onUpdateSuccess}\n                                                          onDeleteSuccess={this.removeClient} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        )\n    }\n}\n\nclass OpenIdClientCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.client).map(val => val.id).map(val => false).orElse(true),\n            authenticationType: props.client.authenticationType,\n            client: JSON.parse(JSON.stringify(props.client))\n        }\n        this.setState = this.setState.bind(this);\n        this.resetEditMode = this.resetEditMode.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.client,\n            getCurrentResource: () => this.state.client,\n            setCurrentResource: resource => this.setState({client: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n    async resetEditMode()\n    {\n        this.scimComponentBasics.resetEditMode();\n        let client = JSON.parse(JSON.stringify(this.props.client));\n        await this.setState({client: client, authenticationType: client.authenticationType});\n    }\n\n    render()\n    {\n        let aliases = [];\n        this.props.keyInfos.forEach(keyInfo =>\n        {\n            if (keyInfo.hasPrivateKey === true)\n            {\n                aliases.push(keyInfo.alias);\n            }\n        });\n        return (\n            <Card id={\"client-card-\" + this.state.client.id} key={this.state.client.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card client-card\"}>\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.client.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete OpenID Client with clientId '\" + this.state.client.clientId + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success\"} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> OpenID Client was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"client-card-header-\" + this.state.client.id}>\n                        <div className={\"card-name-header\"}>\n                            <div className={\"card-name-header\"}>\n                                {\n                                    this.state.client.clientId !== undefined &&\n                                    <LinkContainer exact\n                                                   to={\"/openIdProvider/\" + this.props.provider.id + \"/client/\"\n                                                       + this.state.client.id}>\n                                        <a href={\"/#\"}>\n                                            <h5>\n                                                <ArrowRightCircle style={{color: \"bisque\", marginRight: \"15px\"}}\n                                                                  size={\"20px\"} height={\"30px\"} />\n                                                Client '{this.state.client.clientId}'\n                                            </h5>\n                                        </a>\n                                    </LinkContainer>\n                                }\n                            </div>\n                        </div>\n                        <CardControlIcons resource={this.state.client}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <HiddenCardEntry name=\"openIdProviderId\"\n                                                     type=\"number\"\n                                                     value={this.props.provider.id}\n                                                     onError={fieldName => this.scimClient.getErrors(this.state,\n                                                         fieldName)} />\n                                    <ModifiableCardEntry header={\"Client ID\"}\n                                                         name={\"clientId\"}\n                                                         resourceId={this.state.client.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.client.clientId}\n                                                         placeholder={\"The identifier for this client at its OpenID Provider\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardRadioSelector header={\"Authentication Type\"}\n                                                       name={\"authenticationType\"}\n                                                       editMode={this.state.editMode}\n                                                       selections={[\"basic\", \"jwt\"]}\n                                                       selected={new Optional(this.state.authenticationType).orElse(\n                                                           \"basic\")}\n                                                       onChange={e =>\n                                                       {\n                                                           this.scimComponentBasics.updateInput(e.target.name,\n                                                               e.target.value);\n                                                           this.setState({authenticationType: e.target.value})\n                                                       }}\n                                                       onError={fieldName => this.scimClient.getErrors(this.state,\n                                                           fieldName)}\n                                    />\n                                    {\n                                        this.state.authenticationType === \"basic\" &&\n                                        <ModifiableCardEntry header={\"Client Secret\"}\n                                                             name={\"clientSecret\"}\n                                                             resourceId={this.state.client.id}\n                                                             editMode={this.state.editMode}\n                                                             resourceValue={this.state.client.clientSecret}\n                                                             placeholder={\"The password to access the OpenID Providers token endpoint\"}\n                                                             onChange={this.scimComponentBasics.updateInput}\n                                                             onError={fieldName => this.scimClient.getErrors(\n                                                                 this.state, fieldName)} />\n\n                                    }\n                                    {\n                                        this.state.authenticationType === \"jwt\" &&\n                                        <React.Fragment>\n                                            <CardListSelector header={\"Signature Key Reference\"}\n                                                              name={\"signingKeyRef\"}\n                                                              editMode={this.state.editMode}\n                                                              selections={[\"\", ...aliases]}\n                                                              selected={this.state.client.signingKeyRef}\n                                                              onChange={e => this.scimComponentBasics.updateInput(\n                                                                  e.target.name, e.target.value)}\n                                                              onError={fieldName => this.scimClient.getErrors(\n                                                                  this.state, fieldName)}\n\n                                            />\n                                            <ApplicationInfoContext.Consumer>\n                                                {appInfo =>\n                                                    <CardListSelector header={\"JWT Signature Algorithm\"}\n                                                                      name={\"signatureAlgorithm\"}\n                                                                      editMode={this.state.editMode}\n                                                                      selections={[\"\",\n                                                                                   ...appInfo.jwtInfo.signatureAlgorithms]}\n                                                                      selected={this.state.client.signatureAlgorithm}\n                                                                      onChange={e => this.scimComponentBasics.updateInput(\n                                                                          e.target.name, e.target.value)}\n                                                                      onError={fieldName => this.scimClient.getErrors(\n                                                                          this.state, fieldName)}\n\n                                                    />\n                                                }\n                                            </ApplicationInfoContext.Consumer>\n                                            <ModifiableCardEntry header={\"Audience\"}\n                                                                 name={\"audience\"}\n                                                                 resourceId={this.state.client.audience}\n                                                                 editMode={this.state.editMode}\n                                                                 resourceValue={this.state.client.audience}\n                                                                 placeholder={\"audience value that should match the providers issuer-value\"}\n                                                                 onChange={this.scimComponentBasics.updateInput}\n                                                                 onError={fieldName => this.scimClient.getErrors(\n                                                                     this.state, fieldName)} />\n                                            <CardListSelector header={\"Decryption Key Reference\"}\n                                                              name={\"decryptionKeyRef\"}\n                                                              editMode={this.state.editMode}\n                                                              selections={[\"\", ...aliases]}\n                                                              selected={this.state.client.decryptionKeyRef}\n                                                              onChange={e => this.scimComponentBasics.updateInput(\n                                                                  e.target.name, e.target.value)}\n\n                                            />\n                                        </React.Fragment>\n                                    }\n                                    <CardDateRows resource={this.state.client} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}",
    "import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Alert} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {ErrorMessagesAlert, FormCheckbox, FormInputField, FormObjectList, LoadingSpinner} from \"../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport {Optional} from \"../services/utils\";\n\nexport default class HttpSettings extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n\n        let httpSettings = this.props.client['urn:ietf:params:scim:schemas:captaingoldfish:2.0:HttpClientSettings'];\n        this.state = {\n            success: false,\n            showSpinner: false,\n            settings: {},\n            proxies: [],\n            keyInfos: [],\n            originalSetting: JSON.parse(JSON.stringify(httpSettings)),\n            httpSettings: httpSettings,\n            enableHostnameVerifier: httpSettings.useHostnameVerifier\n        }\n        this.setState = this.setState.bind(this);\n        let resourcePath = \"/scim/v2/HttpClientSettings\";\n        this.scimClient = new ScimClient(resourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => new Optional(this.state.originalSetting).orElse({}),\n            getCurrentResource: () => this.state.httpSettings,\n            setCurrentResource: resource => this.setState({client: resource}),\n            setState: this.setState,\n            onCreateSuccess: (resource) => console.error(\"create must not be called!\"),\n            onUpdateSuccess: this.onUpdateSuccess\n        });\n\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        await this.loadProxies();\n        await this.loadKeystoreInfos();\n    }\n\n    async loadProxies()\n    {\n        let proxyResourcePath = \"/scim/v2/Proxy\";\n        await new ScimClient(proxyResourcePath, this.setState).listResources().then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({proxies: listResponse.Resources});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n    }\n\n    async loadKeystoreInfos()\n    {\n        let keystoreResourcePath = \"/scim/v2/Keystore\";\n        this.scimClient.getResource(undefined, keystoreResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({\n                        keyInfos: new Optional(listResponse).map(lr => lr.Resources).map(r => r[0]).map(\n                            keystore => keystore.keyInfos).orElse([])\n                    });\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n    }\n\n    onUpdateSuccess()\n    {\n\n    }\n\n    render()\n    {\n        let proxies = [];\n        this.state.proxies.forEach(proxy =>\n        {\n            proxies.push({id: proxy.id, value: proxy.hostname + \":\" + proxy.port});\n        });\n\n        let aliases = [];\n        this.state.keyInfos.forEach(keyInfo =>\n        {\n            if (keyInfo.hasPrivateKey === true)\n            {\n                aliases.push({\n                    id: keyInfo.alias,\n                    value: keyInfo.alias + \" (\" + keyInfo.keyAlgorithm + \"-\" + keyInfo.keyLength + \")\"\n                });\n            }\n        });\n\n        return (\n            <React.Fragment>\n                <h2>Http Client Settings for {this.props.client.clientId}</h2>\n                <Alert id={\"uploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Http Client Settings were successfully saved</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n                    <FormInputField name=\"id\"\n                                    isHidden={true}\n                                    type=\"string\"\n                                    readOnly={true}\n                                    value={this.state.httpSettings.id}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"openIdClientReference\"\n                                    isHidden={true}\n                                    type=\"number\"\n                                    readOnly={true}\n                                    value={new Optional(this.props.client.id).orElse(\"\")}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"requestTimeout\"\n                                    type=\"number\"\n                                    label=\"Request Timeout\"\n                                    value={this.state.httpSettings.requestTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"connectionTimeout\"\n                                    label=\"Connection Timeout\"\n                                    type=\"number\"\n                                    value={this.state.httpSettings.connectionTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"socketTimeout\"\n                                    label=\"Socket Timeout\"\n                                    type=\"number\"\n                                    value={this.state.httpSettings.socketTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormCheckbox id={\"useHostnameVerifier\"}\n                                  name=\"useHostnameVerifier\"\n                                  label=\"Enable Hostname Verifier\"\n                                  checked={this.state.enableHostnameVerifier}\n                                  onChange={(e) => this.setState({enableHostnameVerifier: e.target.checked})}\n                                  onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormObjectList name={\"proxyReference\"}\n                                    label={\"Proxy\"}\n                                    selections={[\"\", ...proxies]}\n                                    selected={this.state.httpSettings.proxyReference}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n                    <FormObjectList name={\"tlsClientAuthAliasReference\"}\n                                    label={\"TLS Client Auth Key Reference\"}\n                                    selections={[\"\", ...aliases]}\n                                    selected={this.state.httpSettings.tlsClientAuthAliasReference}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"upload\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}",
    "import React, {useState} from \"react\";\nimport {Alert, Card, Collapse} from \"react-bootstrap\";\nimport {CaretDown, CaretRight, XLg} from \"react-bootstrap-icons\";\nimport {Collapseable, ErrorListItem} from \"../../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Optional} from \"../../services/utils\";\n\n\nexport default function AccessTokenView(props)\n{\n    return <div className={\"grant-type-workflow\"}>\n        <AccessTokenCollapsible\n            header={props.header}\n            headerClass={props.headerClass}\n            content={() =>\n            {\n                return <AccessTokenDetailsView accessTokenDetails={props.accessTokenDetails} />\n            }}\n            remove={props.onRemove}>\n        </AccessTokenCollapsible>\n    </div>\n}\n\nfunction AccessTokenCollapsible(props)\n{\n    const [open, setOpen] = useState(true);\n\n    let headerClass = new Optional(props.headerClass).map(val => \" \" + val).orElse(\"\");\n\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header\" + headerClass}\n                   onClick={() =>\n                   {\n                       setOpen(!open);\n                   }}\n            >\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                {props.header}\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={\"workflow-card\"}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    );\n}\n\nexport function AccessTokenDetailsView(props)\n{\n    return <div className={\"workflow-details\"}>\n        <AccessTokenRequestView accessTokenDetails={props.accessTokenDetails} />\n        <AccessTokenResponseView accessTokenDetails={props.accessTokenDetails} />\n    </div>\n}\n\nfunction AccessTokenRequestView(props)\n{\n    let requestViewContent = function ()\n    {\n        return <React.Fragment>\n            <Collapseable header={\"Request Header\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={((props.accessTokenDetails || {})\n                                                                            .requestHeaders || [])} />} />\n            <Collapseable header={\"Request Parameter\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={((props.accessTokenDetails || {})\n                                                                            .requestParams || [])} />} />\n        </React.Fragment>\n    }\n    return <Collapseable header={\"Access Token Request Details\"}\n                         variant={\"workflow-details\"}\n                         content={requestViewContent} />\n}\n\nfunction AccessTokenResponseView(props)\n{\n\n    let responseDetails = (props.accessTokenDetails || {});\n    let responseStatusCode = responseDetails.statusCode;\n    let responseHeaders = responseDetails.responseHeaders || [];\n    let plainResponse = responseDetails.plainResponse || \"\";\n    let contentType = (responseHeaders.filter(header => header.name.toLowerCase() === \"content-type\")[0]\n                       || []).value;\n\n    let header = function ()\n    {\n        return <span>Access Token Response Details\n                <span className={\"bold\"}> (Status: {responseStatusCode})</span>\n            </span>\n    }\n    let responseViewContent = function ()\n    {\n        return <React.Fragment>\n            <Collapseable header={\"Response Header\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={responseHeaders} />} />\n            <Collapseable header={\"Access Token Response\"}\n                          open={true}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          content={() => <AccessTokenResponse contentType={contentType}\n                                                              tokenResponse={plainResponse} />} />\n        </React.Fragment>\n    }\n    return <Collapseable header={header()}\n                         open={true}\n                         variant={\"workflow-details\"}\n                         content={responseViewContent} />\n}\n\nfunction NameValueList(props)\n{\n    return <React.Fragment>\n        {\n            props.nameValueList.map((nameValuePair, index) =>\n            {\n                return <Row key={props.keyPrefix + index}>\n                    <Col sm={2}>{nameValuePair.name}</Col>\n                    <Col sm={10}>{nameValuePair.value}</Col>\n                </Row>\n            })\n        }\n    </React.Fragment>\n}\n\nexport class AccessTokenResponse extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {errorMessages: []}\n    }\n\n    componentDidMount()\n    {\n        this.parseJsonContent();\n    }\n\n    async parseJsonContent()\n    {\n        let isContentTypeJson = (this.props.contentType || \"\").toLowerCase().includes(\"application/json\");\n        try\n        {\n            let stateExtension = {};\n            stateExtension.json = JSON.parse(this.props.tokenResponse);\n            if (!isContentTypeJson)\n            {\n                stateExtension.errorMessages = [...this.state.errorMessages,\n                                                \"Found invalid content-type: \" + this.props.contentType\n                                                + \". Response is valid JSON but content-type header does not match.\"];\n            }\n            this.setState(stateExtension)\n        } catch (e)\n        {\n            console.error(e)\n            if (isContentTypeJson)\n            {\n                this.setState({\n                    errorMessages: [...this.state.errorMessages, \"Expected content to be JSON but could not parse it\",\n                                    e.message]\n                })\n            }\n        }\n    }\n\n    render()\n    {\n        return (\n            <div id={\"access-token-response-container\"}>\n                {\n                    this.state.errorMessages.length > 0 &&\n                    <Alert variant={\"danger\"}>\n                        <ul className=\"error-list\">\n                            {this.state.errorMessages.map((message, index) =>\n                                <ErrorListItem key={\"error-message-\" + index} message={message} />)}\n                        </ul>\n                    </Alert>\n                }\n                {\n                    this.state.json &&\n                    Object.keys(this.state.json).map((key, index) =>\n                    {\n                        return <Row key={\"access-token-response-json-param-\" + index}>\n                            <Col sm={2}>{key}</Col>\n                            <Col sm={10}> {this.state.json[key]} </Col>\n                        </Row>\n                    })\n                }\n                {\n                    !this.state.json &&\n                    <Row key={\"access-token-response-json-param-_\"}>\n                        <Col sm={2}>access_token</Col>\n                        <Col sm={10}> {this.props.tokenResponse} </Col>\n                    </Row>\n                }\n            </div>\n        )\n    }\n}",
    "import React, {useState} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport {AlertListMessages, Collapseable, LoadingSpinner} from \"../../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport {CaretDown, CaretRight, ExclamationLg, XLg} from \"react-bootstrap-icons\";\nimport {Alert, Card, Collapse} from \"react-bootstrap\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {ACCESS_TOKEN_REQUEST_ENDPOINT, AUTH_CODE_GRANT_ENDPOINT} from \"../../scim/scim-constants\";\nimport Button from \"react-bootstrap/Button\";\nimport {AccessTokenDetailsView} from \"./access-token-view\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Optional} from \"../../services/utils\";\n\nexport default class AuthorizationCodeGrantWorkflow extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.loadAuthorizationQueryParameterView = this.loadAuthorizationQueryParameterView.bind(this);\n        this.getAuthRequestStatus = this.getAuthRequestStatus.bind(this);\n        this.loadAuthorizationCodeResponseDetailsView = this.loadAuthorizationCodeResponseDetailsView.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n    }\n\n    componentWillUnmount()\n    {\n        if (this.state.interval)\n        {\n            clearInterval(this.state.interval);\n        }\n    }\n\n    componentDidMount()\n    {\n        let getAuthRequestStatus = this.getAuthRequestStatus;\n        window.open(this.props.requestDetails.authorizationCodeGrantUrl,\n            '_blank',\n            'location=yes,height=570,width=520,scrollbars=yes,status=yes');\n        this.state.interval = setInterval(function ()\n        {\n            getAuthRequestStatus();\n        }, 2000);\n    }\n\n    getAuthRequestStatus()\n    {\n        let scimClient = new ScimClient(AUTH_CODE_GRANT_ENDPOINT, this.setState);\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n        let stateParam = authCodeQueryParams.state;\n\n        let state = this.state;\n        let setState = this.setState;\n\n        scimClient.getResource(stateParam).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    clearInterval(state.interval);\n                    delete state.interval\n                    setState({\n                        authorizationResponseUrl: resource.authorizationResponseUrl\n                    });\n                })\n            }\n        });\n    }\n\n    loadAuthorizationQueryParameterView()\n    {\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n\n        let showInfoMessage = this.state.authorizationResponseUrl === undefined;\n\n        return <div className={\"workflow-details\"}>\n            <Alert variant={\"info\"} show={showInfoMessage}>\n                <ExclamationLg /> The authorization code grant will try to open a new browser window. Make sure your\n                                  popup blocker does not block this. If you closed this window before finishing the\n                                  login process. Close this workflow and start again.\n            </Alert>\n            <Collapseable header={\"Authorization Request Details\"} variant={\"workflow-details\"} content={() =>\n            {\n                return <React.Fragment>\n                    <Row>\n                        <Col sm={2} className={\"url-base-value\"}>authCodeUrl</Col>\n                        <Col sm={10}\n                             className={\"url-base-value\"}>{this.props.requestDetails.authorizationCodeGrantUrl}</Col>\n                    </Row>\n                    {\n                        Object.keys(authCodeQueryParams).map((key, index) =>\n                        {\n                            return <Row key={\"auth-code-request-row-\" + index}>\n                                <Col sm={2}>{key}</Col>\n                                <Col sm={10}>{authCodeQueryParams[key]}</Col>\n                            </Row>\n                        })\n                    }\n                </React.Fragment>\n            }} />\n        </div>\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let authorizationResponseUrl = new URL(this.state.authorizationResponseUrl);\n        const queryParamsObject = Object.fromEntries(authorizationResponseUrl.searchParams);\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n\n        let resource = {\n            grantType: \"authorization_code\",\n            openIdClientId: parseInt(this.props.client.id),\n            redirectUri: authCodeQueryParams.redirect_uri,\n            authorizationCode: queryParamsObject.code\n        }\n        scimClient.createResource(resource).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    this.setState({accessTokenDetails: resource})\n                })\n            }\n        });\n    }\n\n    loadAuthorizationCodeResponseDetailsView()\n    {\n        if (!this.state.authorizationResponseUrl)\n        {\n            return null;\n        }\n        let authorizationResponseUrl = new URL(this.state.authorizationResponseUrl);\n        const queryParamsObject = Object.fromEntries(authorizationResponseUrl.searchParams);\n\n        let errors = this.state.errors || {};\n        return <div className={\"workflow-details\"}>\n            {\n                <React.Fragment>\n                    <Collapseable header={\"Authorization Response Details\"}\n                                  open={true}\n                                  variant={\"workflow-details\"}\n                                  content={() =>\n                                  {\n                                      return <React.Fragment>\n                                          <Row>\n                                              <Col sm={2} className={\"url-base-value\"}>authResponseUrl</Col>\n                                              <Col sm={10} className={\"url-base-value\"}>\n                                                  {this.state.authorizationResponseUrl}\n                                              </Col>\n                                          </Row>\n                                          {\n                                              Object.keys(queryParamsObject).map((key, index) =>\n                                              {\n                                                  return <Row key={\"auth-code-response-row-\" + index}>\n                                                      <Col sm={2}>{key}</Col>\n                                                      <Col sm={10}>{queryParamsObject[key]}</Col>\n                                                  </Row>\n                                              })\n                                          }\n                                      </React.Fragment>\n                                  }}\n                    />\n\n                    <Button type=\"submit\" onClick={e =>\n                    {\n                        this.setState({isLoading: true});\n                        this.retrieveAccessTokenDetails(e);\n                    }}\n                            style={{marginTop: \"15px\", marginBottom: \"15px\"}}>\n                        <LoadingSpinner show={this.state.isLoading} /> Get Access Token\n                    </Button>\n                    {\n                        this.state.accessTokenDetails &&\n                        <AccessTokenDetailsView accessTokenDetails={this.state.accessTokenDetails} />\n                    }\n\n                    <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                       messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                    .orElse(\n                                                                                                        [])} />\n                </React.Fragment>\n            }\n        </div>\n    }\n\n    render()\n    {\n        return (\n            <div className={\"grant-type-workflow\"}>\n                {\n                    <AuthorizationCodeGrantDetails\n                        isLoading={this.state.authorizationResponseUrl === undefined}\n                        content={() =>\n                        {\n                            return <React.Fragment>\n                                {this.loadAuthorizationQueryParameterView()}\n                                {this.loadAuthorizationCodeResponseDetailsView()}\n                            </React.Fragment>\n                        }}\n                        remove={this.props.onRemove} />\n                }\n            </div>\n        );\n    }\n}\n\nfunction AuthorizationCodeGrantDetails(props)\n{\n    const [open, setOpen] = useState(true);\n\n    let variant = \"dark\";\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header authorization-code-grant\"}\n                   variant={variant}\n                   onClick={() =>\n                   {\n                       setOpen(!open);\n                   }}\n            >\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                <span><LoadingSpinner show={props.isLoading} /> Authorization Code Grant/Flow</span>\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={\"workflow-card\"}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    );\n}\n\n\n",
    "import ScimClient from \"./scim-client\";\nimport {CURRENT_WORKFLOW_SETTINGS_ENDPOINT} from \"./scim-constants\";\nimport {Optional} from \"../services/utils\";\n\nexport default class CurrentWorkflowSettingsClient\n{\n\n    constructor(setState)\n    {\n        this.scimClient = new ScimClient(CURRENT_WORKFLOW_SETTINGS_ENDPOINT, setState);\n    }\n\n    updateAuthCodeSettings(openidClientId, redirectUri, queryParameters, callback)\n    {\n        let resource = {\n            authCodeParameters: {\n                redirectUri: redirectUri,\n                queryParameters: queryParameters\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    updateClientCredentialsSettings(openidClientId, scope, callback)\n    {\n        let resource = {\n            clientCredentialsParameters: {\n                scope: scope\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    updateResourceOwnerPasswordCredentialsSettings(openidClientId, username, password, scope, callback)\n    {\n        let resource = {\n            resourceOwnerPasswordParameters: {\n                username: username,\n                password: password,\n                scope: scope\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    patchResource(openIdClientId, resource, callback)\n    {\n        let patchOperation = {\n            schemas: [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n            Operations: [\n                {\n                    op: \"replace\",\n                    value: resource\n                }\n            ]\n        };\n\n        this.scimClient.patchResource(patchOperation, openIdClientId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    new Optional(callback).ifPresent(method => method(resource, response.status));\n                })\n            }\n        })\n    }\n}",
    "import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {\n    AlertListMessages,\n    ErrorMessagesAlert,\n    FormInputField,\n    FormRadioSelection,\n    LoadingSpinner\n} from \"../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {Reply} from \"react-bootstrap-icons\";\nimport AuthorizationCodeGrantWorkflow from \"./auth-code-grant/authorization-code-grant-workflow\";\nimport * as lodash from \"lodash\";\nimport ScimClient from \"../scim/scim-client\";\nimport {ACCESS_TOKEN_REQUEST_ENDPOINT, AUTH_CODE_GRANT_ENDPOINT, CURRENT_WORKFLOW_URI} from \"../scim/scim-constants\";\nimport AccessTokenView from \"./auth-code-grant/access-token-view\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Optional} from \"../services/utils\";\nimport CurrentWorkflowSettingsClient from \"../scim/current-workflow-settings-client\";\n\nexport default class OpenidClientWorkflow extends React.Component\n{\n\n    constructor(props, context)\n    {\n        super(props, context)\n        this.authCodeGrantType = \"authorization_code\";\n        this.clientCredentialsGrantType = \"client_credentials\";\n        this.resourceOwnerGrantType = \"password\";\n\n        this.state = {\n            authenticationType: this.authCodeGrantType,\n            originalRedirectUri: props.originalRedirectUri,\n            workflowDetails: this.props.client[CURRENT_WORKFLOW_URI] || {},\n            isLoading: false,\n            responseDetails: []\n        }\n\n        this.formReference = createRef();\n        this.resetRedirectUri = this.resetRedirectUri.bind(this);\n        this.handleNestedElementChange = this.handleNestedElementChange.bind(this);\n        this.handleGrantTypeResponseDetails = this.handleGrantTypeResponseDetails.bind(this);\n        this.removeGrantTypeDetails = this.removeGrantTypeDetails.bind(this);\n    }\n\n    async resetRedirectUri(e)\n    {\n        e.preventDefault();\n        let wrapperObject = this.state;\n        lodash.set(wrapperObject, \"workflowDetails.authCodeParameters.redirectUri\", this.state.originalRedirectUri);\n        this.setState(wrapperObject)\n    }\n\n    handleGrantTypeResponseDetails(type, responseDetails)\n    {\n        let responseDetailsArray = (this.state.responseDetails || []);\n        responseDetails.grantType = type;\n        responseDetailsArray.unshift(responseDetails);\n        let wrapperObject = {};\n        wrapperObject.responseDetails = responseDetailsArray\n        this.setState(wrapperObject);\n    }\n\n    handleNestedElementChange(fieldname, value)\n    {\n        let wrapperObject = this.state.workflowDetails;\n        lodash.set(wrapperObject, fieldname, value);\n        this.setState({workflowDetails: wrapperObject})\n    }\n\n    removeGrantTypeDetails(details)\n    {\n        let detailsObject = this.state.responseDetails;\n        let detailsIndex = detailsObject.indexOf(details);\n        detailsObject.splice(detailsIndex, 1);\n        let wrapperObject = {};\n        wrapperObject.responseDetails = detailsObject;\n        this.setState(wrapperObject)\n    }\n\n    render()\n    {\n        let authTypes = [\n            {value: this.authCodeGrantType, display: \"Authorization Code Grant/Flow\"},\n            {value: this.clientCredentialsGrantType, display: \"Client Credentials Grant\"},\n            {value: this.resourceOwnerGrantType, display: \"Resource Owner Password Credentials Grant\"}\n        ]\n\n        return (\n            <React.Fragment>\n                <h2>OpenID Connect Workflow</h2>\n                <ErrorMessagesAlert errors={this.state.errors} />\n\n                <Form ref={this.formReference} onSubmit={e => e.preventDefault()}>\n                    <FormRadioSelection name=\"authenticationType\"\n                                        label=\"AuthenticationType Type\"\n                                        displayType={\"vertical\"}\n                                        selected={this.state.authenticationType}\n                                        selections={authTypes}\n                                        onChange={e => this.setState({authenticationType: e.target.value})}\n                                        onError={() =>\n                                        {\n                                        }} />\n                    {\n                        this.state.authenticationType === this.authCodeGrantType &&\n                        <AuthorizationCodeGrantForm formReference={this.formReference}\n                                                    workflowDetails={this.state.workflowDetails}\n                                                    isLoading={this.state.isLoading}\n                                                    handleChange={this.handleNestedElementChange}\n                                                    resetRedirectUri={this.resetRedirectUri}\n                                                    handleResponse={details => this.handleGrantTypeResponseDetails(\n                                                        this.authCodeGrantType, details)}\n                                                    onError={() =>\n                                                    {\n                                                    }} />\n                    }\n                    {\n                        this.state.authenticationType === this.clientCredentialsGrantType &&\n                        <ClientCredentialsGrantForm formReference={this.formReference}\n                                                    workflowDetails={this.state.workflowDetails}\n                                                    client={this.props.client}\n                                                    isLoading={this.state.isLoading}\n                                                    handleChange={this.handleNestedElementChange}\n                                                    handleResponse={details => this.handleGrantTypeResponseDetails(\n                                                        this.clientCredentialsGrantType, details)}\n                                                    onError={() =>\n                                                    {\n                                                    }} />\n                    }\n                    {\n                        this.state.authenticationType === this.resourceOwnerGrantType &&\n                        <ResourceOwnerPasswordCredentialsForm\n                            client={this.props.client}\n                            workflowDetails={this.state.workflowDetails}\n                            isLoading={this.state.isLoading}\n                            handleChange={this.handleNestedElementChange}\n                            handleResponse={details => this.handleGrantTypeResponseDetails(\n                                this.state.authenticationType, details)}\n                            onError={() =>\n                            {\n                            }} />\n                    }\n                </Form>\n                {\n                    (this.state.responseDetails || []).map(responseDetails =>\n                    {\n                        return <ResponseDetailsView key={\"response-details-\" + responseDetails.id}\n                                                    responseDetails={responseDetails}\n                                                    client={this.props.client}\n                                                    removeGrantTypeDetails={this.removeGrantTypeDetails} />\n                    })\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nfunction ResponseDetailsView(props)\n{\n\n    let authCodeGrantType = \"authorization_code\";\n    let clientCredentialsGrantType = \"client_credentials\";\n    let resourceOwnerGrantType = \"password\";\n\n    let responseDetails = props.responseDetails;\n\n    if (authCodeGrantType === responseDetails.grantType)\n    {\n        return <React.Fragment key={authCodeGrantType + \"-\" + responseDetails.id}>\n            <AuthorizationCodeGrantWorkflow client={props.client}\n                                            requestDetails={responseDetails}\n                                            onRemove={() => props.removeGrantTypeDetails(\n                                                responseDetails)} />\n        </React.Fragment>\n    }\n\n    if (clientCredentialsGrantType === responseDetails.grantType)\n    {\n        return <React.Fragment key={clientCredentialsGrantType + \"-\" + responseDetails.id}>\n            <AccessTokenView header={\"Client Credentials Grant\"}\n                             headerClass={\"client-credentials-grant\"}\n                             accessTokenDetails={responseDetails}\n                             onRemove={() => props.removeGrantTypeDetails(\n                                 responseDetails)} />\n        </React.Fragment>\n    }\n\n    return <React.Fragment key={resourceOwnerGrantType + \"-\" + responseDetails.id}>\n        <AccessTokenView header={\"Resource Owner Password Credentials Grant\"}\n                         headerClass={\"resource-owner-password-credentials-grant\"}\n                         accessTokenDetails={responseDetails}\n                         onRemove={() => props.removeGrantTypeDetails(\n                             responseDetails)} />\n    </React.Fragment>\n}\n\nclass AuthorizationCodeGrantForm extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            intervals: [],\n            requestDetails: []\n        }\n        this.setState = this.setState.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.loadAuthorizationRequestDetails = this.loadAuthorizationRequestDetails.bind(this);\n        this.patchWorkflowSettings = this.patchWorkflowSettings.bind(this);\n    }\n\n    componentWillUnmount()\n    {\n        this.state.requestDetails.forEach(requestDetails =>\n        {\n            if (requestDetails.interval !== undefined)\n            {\n                clearInterval(requestDetails.interval);\n            }\n        })\n    }\n\n    loadAuthorizationRequestDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n\n        let scimClient = new ScimClient(AUTH_CODE_GRANT_ENDPOINT, this.setState);\n        let resource = scimClient.getResourceFromFormReference(this.props.formReference);\n        resource[CURRENT_WORKFLOW_URI] = this.props.workflowDetails;\n\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let redirectUri = new Optional(this.props.workflowDetails).map(w => w.authCodeParameters)\n                                                                  .map(a => a.redirectUri)\n                                                                  .orElse(undefined);\n        let queryParams = new Optional(this.props.workflowDetails).map(w => w.authCodeParameters)\n                                                                  .map(a => a.queryParameters)\n                                                                  .orElse(undefined);\n\n        workflowSettingsClient.updateAuthCodeSettings(openIdClientId, redirectUri, queryParams);\n    }\n\n    render()\n    {\n        let authCodeParameters = this.props.workflowDetails.authCodeParameters || {};\n\n        return (\n            <React.Fragment>\n                <FormInputField name=\"authCodeParameters.redirectUri\"\n                                label=\"Redirect URI\"\n                                placeholder=\"The redirect uri that is added to the request parameters\"\n                                value={authCodeParameters.redirectUri}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)}>\n                    <a href={\"/#\"} onClick={this.props.resetRedirectUri} className={\"action-link\"}>\n                        <Reply /> <span>reset redirect uri</span>\n                    </a>\n                </FormInputField>\n                <FormInputField name=\"authCodeParameters.queryParameters\"\n                                label=\"Additional URL Query\"\n                                value={authCodeParameters.queryParameters}\n                                placeholder=\"add an optional query string that is appended to the request URL\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button type=\"submit\" onClick={this.loadAuthorizationRequestDetails}>\n                            <LoadingSpinner show={this.props.isLoading} /> Get Authorization Code\n                        </Button>\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nclass ClientCredentialsGrantForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n        this.setState = this.setState.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n        this.patchWorkflowSettings = this.patchWorkflowSettings.bind(this);\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n        this.setState({isLoading: true})\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let scope = new Optional(this.props.workflowDetails).map(w => w.clientCredentialsParameters)\n                                                            .map(c => c.scope)\n                                                            .orElse(undefined);\n        let resource = {\n            grantType: \"client_credentials\",\n            openIdClientId: parseInt(this.props.client.id),\n            scope: scope\n        }\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({isLoading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let scope = new Optional(this.props.workflowDetails).map(w => w.clientCredentialsParameters)\n                                                            .map(c => c.scope)\n                                                            .orElse(undefined);\n\n        workflowSettingsClient.updateClientCredentialsSettings(openIdClientId, scope);\n    }\n\n    render()\n    {\n        let clientCredentialsParameters = this.props.workflowDetails.clientCredentialsParameters || {};\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <FormInputField name=\"clientCredentialsParameters.scope\"\n                                label=\"Scope\"\n                                value={clientCredentialsParameters.scope || \"\"}\n                                placeholder=\"The scope to access from the identity provider\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button id={\"upload\"} type=\"submit\" onClick={this.retrieveAccessTokenDetails}>\n                            <LoadingSpinner show={this.state.isLoading} /> Get Access Token\n                        </Button>\n                        <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                           messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                        .orElse([])} />\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nclass ResourceOwnerPasswordCredentialsForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n\n        this.setState({isLoading: true});\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        let resource = {\n            grantType: \"password\",\n            openIdClientId: parseInt(this.props.client.id),\n            username: username,\n            password: password,\n            scope: scope\n        }\n\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({isLoading: false});\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        workflowSettingsClient.updateResourceOwnerPasswordCredentialsSettings(openIdClientId, username, password,\n            scope);\n    }\n\n    render()\n    {\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <FormInputField name=\"resourceOwnerPasswordParameters.username\"\n                                label=\"Username\"\n                                value={username}\n                                placeholder={\"the username to authenticate\"}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <FormInputField name=\"resourceOwnerPasswordParameters.password\"\n                                label=\"Password\"\n                                placeholder={\"the users password\"}\n                                value={password}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <FormInputField name=\"resourceOwnerPasswordParameters.scope\"\n                                label=\"Scope\"\n                                value={scope}\n                                placeholder=\"The scope to access from the identity provider\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button id={\"upload\"} type=\"submit\" onClick={this.retrieveAccessTokenDetails}>\n                            <LoadingSpinner show={this.state.isLoading} /> Get Access Token\n                        </Button>\n                        <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                           messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                        .orElse([])} />\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n",
    "import React from \"react\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport ScimClient from \"../scim/scim-client\";\nimport {ArrowLeftCircle} from \"react-bootstrap-icons\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport HttpSettings from \"./http-settings\";\nimport {Optional} from \"../services/utils\";\nimport OpenidClientWorkflow from \"./openid-client-workflow\";\nimport {ApplicationInfoContext} from \"../app\";\n\nexport default class OpenidClientOverview extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let openIdProviderId = this.props.match.params.providerId;\n        let clientId = this.props.match.params.clientId;\n\n        let openIdProviderResourcePath = \"/scim/v2/OpenIdProvider\";\n        new ScimClient(openIdProviderResourcePath, this.setState).getResource(openIdProviderId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(openIdProvider =>\n                {\n                    this.setState({provider: openIdProvider});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n\n        let clientResourcePath = \"/scim/v2/OpenIdClient\";\n        new ScimClient(clientResourcePath, this.setState).getResource(clientId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(client =>\n                {\n                    this.setState({client: client});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n    }\n\n\n    render()\n    {\n        let provider = new Optional(this.state.provider);\n        let client = new Optional(this.state.client);\n\n        return (\n            <React.Fragment>\n                <LinkContainer exact\n                               to={\"/openIdProvider/\" + this.props.match.params.providerId\n                                   + \"/openIdClients\"}>\n                    <a href={\"/#\"}>\n                        <h5 style={{height: \"35px\", padding: \"0\", paddingLeft: \"10px\"}}>\n                            <ArrowLeftCircle style={{color: \"bisque\"}} height={\"35px\"} size={\"25px\"} />\n                            <span style={{marginLeft: \"15px\"}}>Back to\n                                <span style={{color: \"lightgray\"}}> \"{provider.map(val => val.name).orElse(\"\")}\" </span>\n                                                               Overview\n                            </span>\n                        </h5>\n                    </a>\n                </LinkContainer>\n\n                <h5>Client: <span style={{color: \"lightgray\"}}>{client.map(c => c.clientId).orElse(\"\")}</span></h5>\n\n                <Tabs defaultActiveKey=\"workflow\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"workflow\" title=\"OpenID Workflow\">\n                        {\n                            new Optional(this.state.client).isPresent() &&\n                            <ApplicationInfoContext.Consumer>\n                                {appInfo =>\n                                    <OpenidClientWorkflow client={this.state.client}\n                                                          originalRedirectUri={appInfo.authCodeRedirectUri} />\n                                }\n                            </ApplicationInfoContext.Consumer>\n                        }\n                    </Tab>\n                    <Tab eventKey=\"clients\" title=\"HTTP Settings\">\n                        {\n                            new Optional(this.state.client).isPresent() &&\n                            <HttpSettings client={this.state.client} />\n                        }\n                    </Tab>\n                </Tabs>\n            </React.Fragment>\n        )\n    }\n}",
    "import React from \"react\";\nimport logo from \"./logo.svg\";\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport {LinkContainer} from 'react-router-bootstrap'\nimport SystemOverview from \"./admin/system/system-overview\";\nimport ScimClient from \"./scim/scim-client\";\nimport OpenidProvider from \"./openid/openid-provider\";\nimport JwtHandler from \"./jwt/jwt-handler\";\nimport OpenidClients from \"./openid/openid-clients\";\nimport OpenidClientOverview from \"./openid/openid-client-overview\";\nimport {AlertListMessages} from \"./base/form-base\";\nimport {GoFlame} from \"react-icons/go\";\n\n\nexport const ApplicationInfoContext = React.createContext(null);\nexport const ScimServiceProviderContext = React.createContext(null);\n\nclass Application extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            serviceProviderConfig: {\n                bulk: {\n                    maxOperations: 5,\n                    maxPayloadSize: 2097152\n                },\n                filter: {\n                    maxResults: 5\n                }\n            }\n        }\n        this.setState = this.setState.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let scimClient = new ScimClient(\"/scim/v2/ServiceProviderConfig\", this.setState);\n        scimClient.listResources().then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(serviceProviderConfig =>\n                {\n                    this.setState({serviceProviderConfig: serviceProviderConfig});\n                })\n            }\n        })\n\n        scimClient.getResource(null, \"/scim/v2/AppInfo\").then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(appInfo =>\n                {\n                    this.setState({appInfo: appInfo});\n                })\n            }\n        });\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <Router>\n                    <Navbar collapseOnSelect expand=\"lg\" bg=\"navigation\">\n                        <Container>\n                            <Navbar.Brand href=\"#home\">Captain Goldfish's Rest Client</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                                <Nav className=\"me-auto\" />\n                                <Nav>\n                                    <Nav.Link href=\"#\">\n                                        <img src={logo} className=\"react-logo\" alt=\"logo\" />\n                                    </Nav.Link>\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Container>\n                    </Navbar>\n\n                    <Navbar bg=\"navigation-left\" className={\"navbar-left\"} expand=\"md\" variant=\"dark\">\n                        <Navbar.Collapse>\n\n                            <Nav className=\"flex-column\">\n                                <LinkContainer exact to=\"/openIdProvider\">\n                                    <Nav.Link>OpenID</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/jwts\">\n                                    <Nav.Link>JWTs</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/system\">\n                                    <Nav.Link>System</Nav.Link>\n                                </LinkContainer>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n\n                    <div className=\"main\">\n                        <AlertListMessages variant={\"danger\"}\n                                           icon={<GoFlame />}\n                                           messages={(this.state.errors || {}).errorMessages} />\n\n                        <ApplicationInfoContext.Provider value={this.state.appInfo}>\n                            <ScimServiceProviderContext.Provider value={this.state.serviceProviderConfig}>\n                                {/* A <Switch> looks through its children <Route>s and\n                                 renders the first one that matches the current URL. */}\n                                <Switch>\n                                    <Route path=\"/system\">\n                                        <SystemOverview />\n                                    </Route>\n                                    <Route path={\"/openIdProvider/:providerId/client/:clientId\"}\n                                           component={OpenidClientOverview} />\n                                    <Route path={\"/openIdProvider/:id/openIdClients\"}\n                                           render={route =>\n                                           {\n                                               return <OpenidClients match={route.match}\n                                                                     serviceProviderConfig={this.state.serviceProviderConfig} />\n                                           }} />\n                                    <Route path=\"/openIdProvider\">\n                                        <OpenidProvider serviceProviderConfig={this.state.serviceProviderConfig} />\n                                    </Route>\n                                    <Route path=\"/jwts\">\n                                        <JwtHandler />\n                                    </Route>\n                                    <Route path=\"/\">\n                                        <Redirect to=\"/jwts\" />\n                                    </Route>\n                                </Switch>\n                            </ScimServiceProviderContext.Provider>\n                        </ApplicationInfoContext.Provider>\n                    </div>\n                </Router>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default Application;\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport reportWebVitals from './reportWebVitals';\nimport Application from \"./app\";\n\nReactDOM.render(\n    <Application />\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
    "import {Optional, toBase64} from \"../services/utils\";\nimport * as lodash from \"lodash\";\n\nexport default class ScimClient\n{\n\n    constructor(resourcePath, setState)\n    {\n        this.resourcePath = resourcePath;\n        this.setState = setState;\n        this.resetErrors = this.resetErrors.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.createResource = this.createResource.bind(this);\n        this.getErrors = this.getErrors.bind(this);\n        this.isLoading = this.isLoading.bind(this);\n    }\n\n    isLoading(value)\n    {\n        this.setState({isLoading: value});\n    }\n\n    resetErrors()\n    {\n        this.setState({errors: {}});\n    }\n\n    handleError(jsonPromise)\n    {\n        jsonPromise.then(errorResponse =>\n        {\n            let errors = {};\n            if (errorResponse.errors === undefined)\n            {\n                errors.errorMessages = new Optional(errors.errorMessages).orElse([]);\n                if (errorResponse.detail === undefined)\n                {\n                    errors.errorMessages.push(JSON.stringify(errorResponse));\n                }\n                else\n                {\n                    errors.errorMessages.push(errorResponse.detail);\n                }\n            }\n            else\n            {\n                errors = errorResponse.errors;\n            }\n            new Optional(this.setState).ifPresent(method => method({errors: errors}));\n        })\n    }\n\n    async createResource(resource)\n    {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath, {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(resource)\n        }).then(response =>\n        {\n            this.isLoading(false);\n            if (response.status === 201)\n            {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            }\n            else\n            {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async getResource(id, resourcePath, params)\n    {\n        this.isLoading(true);\n        this.resetErrors();\n\n        let path = new Optional(resourcePath).orElse(this.resourcePath);\n\n        let searchParams = new Optional(params).map(parameters => \"?\" + new URLSearchParams(parameters).toString())\n                                               .orElse(\"\");\n        let url = path + new Optional(id).map(val => \"/\" + encodeURIComponent(val)).orElse(\"\") + searchParams;\n\n        return await fetch(url, {\n            method: \"GET\"\n        }).then(response =>\n        {\n            this.isLoading(false);\n            if (response.status === 200)\n            {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            }\n            else\n            {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    listResources({startIndex, count, filter, sortBy, sortOrder, attributes, excludedAttributes} = {})\n    {\n        this.isLoading(true);\n        this.resetErrors();\n        let startIndexParam = new Optional(startIndex).map(val => \"startIndex=\" + val).orElse(null);\n        let countParam = new Optional(count).map(val => \"count=\" + val).orElse(null);\n        let filterParam = new Optional(filter).map(val => \"filter=\" + encodeURI(val)).orElse(null);\n        let sortByParam = new Optional(sortBy).map(val => \"sortBy=\" + encodeURI(val)).orElse(null);\n        let sortOrderParam = new Optional(sortOrder).map(val => \"sortOrder=\" + val).orElse(null);\n        let attributesParam = new Optional(attributes).map(val => \"attributes=\" + encodeURI(val)).orElse(null);\n        let excludedAttributesParam = new Optional(excludedAttributes).map(\n            val => \"excludedAttributes=\" + encodeURI(val)).orElse(null);\n\n        let query = Array.of(startIndexParam, countParam, filterParam, sortByParam, sortOrderParam, attributesParam,\n            excludedAttributesParam)\n                         .filter(val => val != null)\n                         .join(\"&\");\n\n        query = new Optional(query).filter(val => val.length > 0).map(val => \"?\" + val).orElse(\"\");\n\n        let requestUrl = this.resourcePath + query;\n\n        return fetch(requestUrl, {\n            method: \"GET\"\n        }).then(response =>\n        {\n            this.isLoading(false);\n            if (response.status === 200)\n            {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                }\n            }\n            else\n            {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async updateResource(resource, id)\n    {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"PUT\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(resource)\n        }).then(response =>\n        {\n            this.isLoading(false);\n            if (response.status === 200)\n            {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            }\n            else\n            {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async patchResource(patchBody, id)\n    {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"PATCH\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(patchBody)\n        }).then(response =>\n        {\n            this.isLoading(false);\n            if (response.status === 200)\n            {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            }\n            else\n            {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    deleteResource(id)\n    {\n        this.isLoading(true);\n        this.resetErrors();\n        return fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"DELETE\"\n        }).then(response =>\n        {\n            this.isLoading(false);\n            if (response.status === 204)\n            {\n                return {\n                    success: true,\n                    status: response.status\n                };\n            }\n            else\n            {\n                this.handleError(response.json());\n                return {\n                    success: false,\n                    status: response.status\n                }\n            }\n        })\n    }\n\n    /**\n     * accesses the the form-reference with name \"this.formReference\" reads its input and select fields and builds a\n     * scim resource from it that will be used in the following request\n     */\n    async getResourceFromFormReference(formReference)\n    {\n        let scimResource = {};\n\n        let handleInputField = async function (inputfield)\n        {\n            let name = inputfield.name;\n            let inputFieldValue;\n            if (inputfield.type === 'file')\n            {\n                if (inputfield.files !== undefined && inputfield.files.length === 1)\n                {\n                    inputFieldValue = await toBase64(inputfield.files[0]);\n                }\n                else\n                {\n                    inputFieldValue = undefined;\n                }\n            }\n            else if (inputfield.type === 'number')\n            {\n                inputFieldValue = inputfield.valueAsNumber;\n            }\n            else if (inputfield.type === 'checkbox')\n            {\n                inputFieldValue = inputfield.checked;\n            }\n            else if (inputfield.type === 'radio')\n            {\n                if (inputfield.checked)\n                {\n                    inputFieldValue = inputfield.value;\n                }\n                else\n                {\n                    inputFieldValue = scimResource[name];\n                }\n            }\n            else\n            {\n                let val = lodash.trim(inputfield.value);\n                if (lodash.isEmpty(val))\n                {\n                    val = undefined;\n                }\n                inputFieldValue = val;\n            }\n            lodash.set(scimResource, name, inputFieldValue);\n        };\n\n        let formInputFields = Array.from(formReference.current.getElementsByTagName('input'));\n        let textAreaFields = Array.from(formReference.current.getElementsByTagName('textarea'));\n        let formSelectFields = Array.from(formReference.current.getElementsByTagName('select'));\n        let allFormFields = formInputFields.concat(formSelectFields).concat(textAreaFields);\n\n        for (let inputField of allFormFields)\n        {\n            await handleInputField(inputField);\n        }\n\n        return scimResource;\n    }\n\n    getErrors(state, fieldName)\n    {\n        return new Optional(state).map(val => val.errors)\n                                  .map(val => val.fieldErrors)\n                                  .map(fieldErrors => fieldErrors[fieldName])\n                                  .orElse([]);\n    }\n}\n\n\n",
    "export const CERT_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:CertificateInfo\";\nexport const CURRENT_WORKFLOW_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:CurrentWorkflowSettings\";\n\n\nconst BASE_URL = \"/scim/v2\";\nexport const ACCESS_TOKEN_REQUEST_ENDPOINT = BASE_URL + \"/AccessTokenRequest\";\nexport const APP_INFO_ENDPOINT = BASE_URL + \"/AppInfo\";\nexport const AUTH_CODE_GRANT_ENDPOINT = BASE_URL + \"/AuthCodeGrantRequest\";\nexport const HTTP_CLIENT_SETTINGS_ENDPOINT = BASE_URL + \"/HttpClientSettings\";\nexport const JWT_BUILDER_ENDPOINT = BASE_URL + \"/JwtBuilder\";\nexport const KEYSTORE_ENDPOINT = BASE_URL + \"/Keystore\";\nexport const OPENID_CLIENT_ENDPOINT = BASE_URL + \"/OpenIdClient\";\nexport const OPENID_PROVIDER_ENDPOINT = BASE_URL + \"/OpenIdProvider\";\nexport const PROXY_ENDPOINT = BASE_URL + \"/Proxy\";\nexport const TRUSTSTORE_ENDPOINT = BASE_URL + \"/Truststore\";\nexport const CURRENT_WORKFLOW_SETTINGS_ENDPOINT = BASE_URL + \"/CurrentWorkflowSettings\";\n",
    "import {Optional} from \"../services/utils\";\nimport * as lodash from \"lodash\";\n\nexport default class ScimComponentBasics\n{\n    constructor({\n                    scimClient,\n                    formReference,\n                    getOriginalResource,\n                    getCurrentResource,\n                    setCurrentResource,\n                    setState,\n                    onCreateSuccess,\n                    onUpdateSuccess,\n                    onDeleteSuccess\n                } = {})\n    {\n        this.scimClient = scimClient;\n        this.formReference = formReference;\n        this.getOriginalResource = getOriginalResource;\n        this.getCurrentResource = getCurrentResource;\n        this.setCurrentResource = setCurrentResource;\n        this.setState = setState;\n        this.onCreateSuccess = onCreateSuccess;\n        this.onUpdateSuccess = onUpdateSuccess;\n        this.onDeleteSuccess = onDeleteSuccess;\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.createResource = this.createResource.bind(this);\n        this.updateResource = this.updateResource.bind(this);\n        this.deleteResource = this.deleteResource.bind(this);\n        this.setStateValue = this.setStateValue.bind(this);\n        this.resetEditMode = this.resetEditMode.bind(this);\n        this.updateInput = this.updateInput.bind(this);\n    }\n\n    onSubmit(e)\n    {\n        e.preventDefault();\n        if (new Optional(this.getCurrentResource().id).isPresent())\n        {\n            this.updateResource();\n        }\n        else\n        {\n            this.createResource();\n        }\n    }\n\n    async createResource()\n    {\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateOrUpdateResponse(response, this.onCreateSuccess);\n    }\n\n    async updateResource()\n    {\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.updateResource(resource, this.getOriginalResource().id);\n        this.handleCreateOrUpdateResponse(response, this.onUpdateSuccess);\n    }\n\n    handleCreateOrUpdateResponse(response, callback)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.setCurrentResource(resource);\n                this.setState({\n                    editMode: false,\n                    success: true\n                });\n                callback(resource);\n            })\n        }\n        else\n        {\n            response.resource.then(resource =>\n            {\n                this.setState({\n                    errors: {\n                        errorMessages: [resource.detail]\n                    }\n                });\n            })\n        }\n    }\n\n    deleteResource()\n    {\n        new Optional(this.getCurrentResource().id).ifNotPresent(id =>\n        {\n            this.onDeleteSuccess(undefined);\n        }).ifPresent(async id =>\n        {\n            await this.scimClient.deleteResource(id);\n            this.onDeleteSuccess(id);\n        })\n    }\n\n    setStateValue(name, value)\n    {\n        this.setState({\n            [name]: value,\n            success: false\n        });\n    }\n\n    resetEditMode()\n    {\n        let copiedResource = JSON.parse(JSON.stringify(this.getOriginalResource()))\n        this.setCurrentResource(copiedResource);\n        this.setState({\n            editMode: false,\n            success: false\n        });\n    }\n\n    updateInput(fieldname, value)\n    {\n        let object = this.getCurrentResource();\n        object = lodash.set(object, fieldname, value);\n        this.setCurrentResource(object);\n        this.setState({\n            success: false\n        });\n    }\n} ",
    "export function toBase64(file)\n{\n    return new Promise((resolve, reject) =>\n    {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () =>\n        {\n            let encoded = reader.result.toString().replace(/^data:(.*,)?/, '');\n            if ((encoded.length % 4) > 0)\n            {\n                encoded += '='.repeat(4 - (encoded.length % 4));\n            }\n            resolve(encoded);\n        };\n        reader.onerror = error => reject(error);\n    });\n}\n\nexport function downloadBase64Data(base64Data, filename, filetype)\n{\n    let decoded = window.atob(base64Data);\n    var len = decoded.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++)\n    {\n        bytes[i] = decoded.charCodeAt(i);\n    }\n    let file = new Blob([bytes.buffer], {type: filetype});\n    let downloadAnchor = document.createElement(\"a\");\n    let url = URL.createObjectURL(file);\n    downloadAnchor.href = url;\n    downloadAnchor.download = filename;\n    downloadAnchor.click();\n    setTimeout(function ()\n    {\n        window.URL.revokeObjectURL(url);\n    }, 0);\n}\n\nexport function parseJws(token)\n{\n    if (typeof token !== 'string')\n    {\n        return null;\n    }\n    let jws = token.split('.');\n    if (jws.length !== 3)\n    {\n        return null;\n    }\n\n    function decode(content)\n    {\n        let base64 = content.replace(/-/g, '+').replace(/_/g, '/');\n        return decodeURIComponent(Buffer.from(base64, \"base64\").toString().split('').map(function (c)\n        {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    let header = decode(jws[0]);\n    let payload = decode(jws[1]);\n    let signature = jws[2];\n    return {\n        header: header,\n        payload: payload,\n        signature: signature\n    };\n}\n\nexport class Optional\n{\n    constructor(value)\n    {\n        this.value = value;\n    }\n\n    get()\n    {\n        return this.value;\n    }\n\n    isPresent()\n    {\n        return this.value !== undefined && this.value !== null;\n    }\n\n    ifPresent(handler)\n    {\n        if (this.isPresent())\n        {\n            handler(this.value);\n        }\n        return this;\n    }\n\n    ifNotPresent(handler)\n    {\n        if (!this.isPresent())\n        {\n            handler();\n        }\n        return this;\n    }\n\n    isEmpty()\n    {\n        return this.value === undefined || this.value === null;\n    }\n\n    filter(handler)\n    {\n        if (this.isPresent() && !handler(this.value))\n        {\n            this.value = null;\n        }\n        return this;\n    }\n\n    map(handler)\n    {\n        if (this.isPresent())\n        {\n            this.value = handler(this.value);\n        }\n        return this;\n    }\n\n    do(handler)\n    {\n        if (this.isPresent())\n        {\n            handler(this.value);\n        }\n        return this;\n    }\n\n    orElse(defaultValue)\n    {\n        if (this.isPresent())\n        {\n            return this.value;\n        }\n        else\n        {\n            return defaultValue;\n        }\n    }\n}\n",
    "import React, {useEffect, useState} from \"react\";\nimport bsCustomFileInput from \"bs-custom-file-input\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Optional} from \"../services/utils\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Alert, Button, Card, Collapse, Spinner} from \"react-bootstrap\";\nimport {\n    CaretDown,\n    CaretRight,\n    ExclamationLg,\n    PencilSquare,\n    PlusSquare,\n    Save,\n    TrashFill,\n    XLg,\n    XSquare\n} from \"react-bootstrap-icons\";\nimport {CardInputField} from \"./card-base\";\n\n/**\n * a simple input field that might also display error messages directly bound to this input field\n */\nexport function FormInputField(props)\n{\n\n    let controlId = props.id || props.name;\n    let label = new Optional(props.label).map(label => <Form.Label column sm={2}>{label}</Form.Label>);\n    let inputFieldType = props.type === undefined ? \"text\" : props.type;\n    let inputFieldName = props.name;\n    let inputFieldPlaceholder = props.placeholder === undefined ? props.name : props.placeholder;\n    let inputFieldErrorMessages = props.onError(props.name);\n    let isDisabled = props.disabled === true;\n    let isReadOnly = props.readOnly === true;\n    let isHidden = props.type === \"hidden\" || props.isHidden;\n    let as = new Optional(props.as).orElse(\"input\");\n\n    let sm = new Optional(props.sm).orElse(label.isPresent() ? 10 : 12);\n    return (\n        <Form.Group as={Row} controlId={controlId} style={{display: isHidden ? \"none\" : \"\"}}>\n            {label.get()}\n            <Col sm={sm}>\n                <Form.Control type={inputFieldType}\n                              as={as}\n                              name={inputFieldName}\n                              className={props.className}\n                              disabled={isDisabled}\n                              readOnly={isReadOnly}\n                              placeholder={inputFieldPlaceholder}\n                              onChange={props.onChange}\n                              value={props.value} />\n\n                {\n                    props.children\n                }\n\n                <ErrorMessageList controlId={props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </Col>\n        </Form.Group>\n    );\n}\n\n/**\n * a simple input field that might also display error messages directly bound to this input field\n */\nexport class FormCheckbox extends React.Component\n{\n\n    render()\n    {\n        let controlId = new Optional(this.props.id).orElse(this.props.name);\n        let label = new Optional(this.props.label).map(label => <Form.Label column sm={2}>{label}</Form.Label>);\n        let inputFieldName = this.props.name;\n        let inputFieldErrorMessages = this.props.onError(this.props.name);\n        let isHidden = this.props.type === \"hidden\";\n        let isReadOnly = this.props.readOnly === true;\n        let checked = new Optional(this.props.checked).orElse(false);\n\n        let sm = new Optional(this.props.sm).orElse(label.isPresent() ? 10 : 12);\n        return (\n            <Form.Group as={Row} style={{display: isHidden ? \"none\" : \"\"}}>\n                {label.get()}\n                <Col sm={sm} style={{alignSelf: \"center\"}}>\n                    <Form.Check id={controlId}\n                                name={inputFieldName}\n                                readOnly={isReadOnly}\n                                type=\"switch\"\n                                onChange={this.props.onChange}\n                                checked={checked} />\n\n                    <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                                      fieldErrors={inputFieldErrorMessages} />\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n\n/**\n * a select input field that might also display error messages directly bound to this input field\n */\nexport class FormSelectField extends React.Component\n{\n\n    render()\n    {\n        let labelText = this.props.label === undefined ? this.props.name : this.props.label;\n        let inputFieldErrorMessages = this.props.onError(this.props.name);\n\n        let inputFieldOptions = new Optional(this.props.options).map(options =>\n        {\n            return options.map((value) =>\n            {\n                return <option key={value}>{value}</option>\n            });\n        }).orElse([])\n\n        return (\n            <Form.Group as={Row} controlId={this.props.name}>\n                <Form.Label column sm={2}>\n                    {labelText}\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control as=\"select\"\n                                  name={this.props.name}>\n                        {inputFieldOptions}\n                    </Form.Control>\n\n                    <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                                      fieldErrors={inputFieldErrorMessages} />\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormFileField(props)\n{\n\n    useEffect(() =>\n    {\n        bsCustomFileInput.init();\n        return () =>\n        {\n            bsCustomFileInput.destroy();\n        }\n    }, [] /* do this only once */)\n\n    let labelText = props.label === undefined ? props.name : props.label;\n    let inputFieldPlaceholder = props.placeholder === undefined ? \"Select a file\" : props.placeholder;\n    let inputFieldButtonText = props.button === undefined ? \"Search\" : props.button;\n    let inputFieldErrorMessages = props.onError(props.name);\n\n    return (\n        <Form.Group as={Row} controlId={props.name}>\n            <Form.Label column sm={2}>{labelText}</Form.Label>\n            <Col sm={10}>\n                <Form.Control type={\"file\"} name={props.name} />\n\n                <ErrorMessageList controlId={props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </Col>\n        </Form.Group>\n    );\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormObjectList(props)\n{\n\n    let labelText = props.label === undefined ? props.name : props.label;\n    let inputFieldErrorMessages = props.onError(props.name);\n\n    return (\n        <Form.Group as={Row} controlId={props.name}>\n            <Form.Label column sm={2}>{labelText}</Form.Label>\n            <Col sm={10}>\n                <Form.Control as=\"select\"\n                              size=\"sm\"\n                              type={\"number\"}\n                              custom\n                              name={props.name}\n                              onChange={props.onChange}\n                              value={props.selected}>\n                    {\n                        props.selections.map((value, index) =>\n                        {\n                            return (\n                                <option key={index}\n                                        value={value.id}\n                                        defaultValue={props.selected === value}>\n                                    {value.value}\n                                </option>\n                            )\n                        })\n                    }\n                </Form.Control>\n\n                <ErrorMessageList controlId={props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </Col>\n        </Form.Group>\n    );\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormRadioSelection(props)\n{\n\n    let labelText = props.label === undefined ? props.name : props.label;\n    let displayType = new Optional(props.displayType).orElse(\"vertical\")\n    let displayClass = displayType === \"vertical\" ? \"block\" : \"inline\";\n    let inputFieldErrorMessages = props.onError(props.name);\n\n    return (\n        <Form.Group as={Row} controlId={props.name}>\n            <Form.Label column sm={2}>{labelText}</Form.Label>\n            <Col sm={10} style={{alignSelf: \"center\"}}>\n                {\n                    props.selections.map((object, index) =>\n                    {\n                        return <Form.Check key={index}\n                                           style={{display: displayClass, marginRight: \"45px\"}}\n                                           type=\"radio\"\n                                           label={object.display}\n                                           value={object.value}\n                                           name={props.name}\n                                           checked={props.selected === object.value}\n                                           onChange={props.onChange}\n                                           id={props.name + \"-\" + object.value}\n                        />\n                    })\n                }\n                <ErrorMessageList controlId={props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </Col>\n        </Form.Group>\n    );\n}\n\n/**\n * displays error messages for a {@link ConfigPageForm} element\n */\nexport function ErrorMessageList(props)\n{\n    let doNotRenderComponent = new Optional(props.fieldErrors).map(val => false).orElse(true);\n\n    if (doNotRenderComponent)\n    {\n        return null;\n    }\n\n    let backgroundClass = props.backgroundClass === undefined ? \"bg-danger\" : props.backgroundClass;\n\n    return (\n        <ul id={props.controlId} className=\"error-list\">\n            {props.fieldErrors.map((message, index) =>\n                <ErrorListItem key={\"error-message-\" + index} backgroundClass={backgroundClass} message={message} />)}\n        </ul>\n    );\n}\n\n/**\n * a simple error message for either the {@link ErrorMessageList} or an error that is directly bound to an\n * input field\n */\nexport function ErrorListItem(props)\n{\n    return (\n        <li className=\"error-list-item\">\n            <small className={props.backgroundClass + \" error\"}>\n                <GoFlame /> {props.message}\n            </small>\n        </li>\n    );\n}\n\nexport function AlertListMessages(props)\n{\n    let variant = props.variant || \"info\";\n    let icon = props.icon || <ExclamationLg />;\n    return (\n        <React.Fragment>\n            {\n                (props.messages || []).length > 0 &&\n                <Alert variant={variant}>\n                    <ul className=\"error-list\">\n                        {\n                            props.messages.map((message, index) =>\n                            {\n                                return <li key={\"alert-\" + variant + \"-message-\" + index} className={\"error-list-item\"}>\n                                    <small className={\"error\"}>\n                                        {icon} {message}\n                                    </small>\n                                </li>\n                            })\n                        }\n                    </ul>\n                </Alert>\n            }\n        </React.Fragment>\n    )\n}\n\nexport function LoadingSpinner(props)\n{\n    if (props.show)\n    {\n        return (\n            <span style={{marginRight: 5 + 'px'}}>\n              <Spinner animation=\"border\" variant=\"warning\" size=\"sm\" role=\"status\" />\n            </span>\n        )\n    }\n    else\n    {\n        return null;\n    }\n}\n\nexport function ErrorMessagesAlert(props)\n{\n    return (\n        new Optional(props.errors).map(errors => errors.errorMessages)\n                                  .filter(messages => messages.length > 0)\n                                  .isPresent() &&\n        <Alert id={\"error-messages-alert\"} variant={\"danger\"}\n               show={props.errors.errorMessages !== undefined}>\n            <ErrorMessageList fieldErrors={props.errors.errorMessages} backgroundClass={\"\"} />\n        </Alert>\n    )\n}\n\nexport function CardControlIcons(props)\n{\n    return (\n        <div className=\"card-control-icons\">\n            {props.spinner}\n            {\n                props.editMode &&\n                <React.Fragment>\n                    <Save title={\"save\"} id={\"save-icon-\" + props.resource.id}\n                          onClick={() =>\n                          {\n                              if (props.resource.id === undefined)\n                              {\n                                  props.createResource()\n                              }\n                              else\n                              {\n                                  props.updateResource(props.resource.id)\n                              }\n                          }}\n                          style={{marginRight: 5 + 'px'}} />\n                    {\n                        props.resource.id !== undefined &&\n                        <XLg title={\"reset-edit\"} id={\"reset-update-icon-\" + props.resource.id}\n                             onClick={props.resetEditMode} style={{marginRight: 5 + 'px'}} />\n                    }\n                </React.Fragment>\n            }\n            {\n                !props.editMode &&\n                <PencilSquare title={\"edit\"} id={\"update-icon-\" + props.resource.id}\n                              onClick={props.edit} style={{marginRight: 5 + 'px'}} />\n            }\n            <TrashFill title={\"delete\"} id={\"delete-icon-\" + props.resource.id}\n                       onClick={props.showModal} />\n        </div>\n    );\n}\n\nexport function CardDateRows(props)\n{\n    return (\n        <React.Fragment>\n            <tr>\n                <th>Created</th>\n                <td className={\"card-value-cell\"}>\n                    {\n                        new Optional(props.resource).map(val => val.meta).map(\n                            val => val.created).map(val => new Date(val).toUTCString()).orElse(null)\n                    }\n                </td>\n            </tr>\n            <tr>\n                <th>LastModified</th>\n                <td className={\"card-value-cell\"}>\n                    {\n                        new Optional(props.resource).map(val => val.meta).map(\n                            val => val.lastModified).map(val => new Date(val).toUTCString()).orElse(\n                            null)\n                    }\n                </td>\n            </tr>\n        </React.Fragment>\n    );\n}\n\nexport function ModifiableCardEntry(props)\n{\n\n    return <tr>\n        <th>{props.header}</th>\n        <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n            {\n                props.editMode &&\n                <CardInputField value={new Optional(props.resourceValue).orElse(\"\")}\n                                id={props.name + \"-\" + props.resourceId}\n                                type={props.type}\n                                name={props.name}\n                                placeholder={props.placeholder}\n                                onChange={props.onChange}\n                                onError={props.onError} />\n            }\n            {\n                !props.editMode &&\n                props.resourceValue\n            }\n        </td>\n    </tr>\n}\n\nexport function HiddenCardEntry(props)\n{\n    return <tr style={{display: \"none\"}}>\n        <td>\n            <CardInputField value={new Optional(props.value).orElse(\"\")}\n                            id={props.name + \"-\" + props.resourceId}\n                            type={props.type}\n                            name={props.name}\n                            placeholder={props.placeholder}\n                            onChange={props.onChange}\n                            onError={props.onError} />\n        </td>\n    </tr>\n}\n\nexport function ModifiableCardFileEntry(props)\n{\n\n    return <tr>\n        <th>{props.header}</th>\n        <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n            {\n                props.editMode &&\n                <XSquare key={\"remove-key\"} type={\"button\"} className={\"remove-index\"}\n                         onClick={e => props.onRemove(props.name, undefined)} />\n            }\n            <div className={new Optional(props.resourceValue).map(val => \"light-border\").orElse(\"\")}>\n                {props.resourceValue}\n            </div>\n            {\n                props.editMode &&\n                <CardInputField type={\"file\"}\n                                id={props.name + \"-\" + props.resourceId}\n                                name={props.name}\n                                placeholder={props.placeholder}\n                                onChange={props.onChange}\n                                onError={props.onError} />\n            }\n        </td>\n    </tr>\n}\n\nexport function CardRadioSelector(props)\n{\n    let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name)).orElse([]);\n\n    return <tr>\n        <th>{props.header}</th>\n        <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n            <fieldset>\n                {\n                    !props.editMode &&\n                    props.selected\n                }\n                {\n                    props.editMode &&\n                    props.selections.map((value, index) =>\n                    {\n                        return (\n                            <Form.Check\n                                key={index}\n                                type=\"radio\"\n                                label={value}\n                                value={value}\n                                checked={props.selected === value}\n                                onChange={props.onChange}\n                                name={props.name}\n                                id={props.name + \"-\" + value}\n                            />\n                        )\n                    })\n                }\n            </fieldset>\n            <ErrorMessageList controlId={props.name + \"-error-list\"}\n                              fieldErrors={inputFieldErrorMessages} />\n        </td>\n    </tr>\n}\n\nexport function CardListSelector(props)\n{\n    let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name)).orElse([]);\n    return <tr>\n        <th>{props.header}</th>\n        <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n            <fieldset>\n                {\n                    !props.editMode &&\n                    props.selected\n                }\n                {\n                    props.editMode &&\n                    <Form.Control as=\"select\"\n                                  size=\"sm\"\n                                  custom\n                                  name={props.name}\n                                  id={props.name}\n                                  onChange={props.onChange}\n                                  value={props.selected}\n                    >\n                        {\n                            props.selections.map((value, index) =>\n                            {\n                                return (\n                                    <option key={index}\n                                            defaultValue={props.selected === value}>\n                                        {value}\n                                    </option>\n                                )\n                            })\n                        }\n                    </Form.Control>\n                }\n            </fieldset>\n            <ErrorMessageList controlId={props.name + \"-error-list\"}\n                              fieldErrors={inputFieldErrorMessages} />\n        </td>\n    </tr>\n}\n\nexport function ModifiableCardList(props)\n{\n    let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name)).orElse([]);\n\n    return <tr>\n        <th>{props.header}</th>\n        <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n            {\n                props.editMode &&\n                <React.Fragment>\n                    {\n                        new Optional(props.resourceValue)\n                            .map(endpointArray =>\n                            {\n                                return endpointArray.map((endpoint, index) =>\n                                {\n                                    return (\n                                        <div key={props.name + \"-container-\" + props.resourceId + \"-\" + index}>\n                                            <XSquare key={\"remove-\" + props.resourceId + \"-\" + index} type={\"button\"}\n                                                     className={\"remove-index\"}\n                                                     onClick={e => props.onRemove(index)} />\n                                            <CardInputField\n                                                key={props.name + \"-\" + props.resourceId + \"-\" + index}\n                                                className={\"list-item\"}\n                                                value={new Optional(endpoint).orElse(\"\")}\n                                                id={props.name + \"-\" + props.resourceId + \"-\" + index}\n                                                name={props.name + \"[\" + index + \"]\"}\n                                                placeholder={props.placeholder}\n                                                onChange={props.onChange}\n                                                onError={props.onError} />\n                                        </div>\n                                    )\n\n                                })\n                            })\n                            .orElse([])\n                    }\n                    <ErrorMessageList controlId={props.name + \"-error-list\"}\n                                      fieldErrors={inputFieldErrorMessages} />\n                    <Button key={\"add\"} type={\"button\"} className={\"add-item\"} onClick={props.onAdd}>\n                        <PlusSquare /> Add new\n                    </Button>\n                </React.Fragment>\n            }\n            {\n                !props.editMode &&\n                new Optional(props.resourceValue)\n                    .map(endpointArray =>\n                    {\n                        return (\n                            <ul>\n                                {\n                                    endpointArray.map(endpoint =>\n                                    {\n                                        return (<li key={endpoint}>{endpoint}</li>)\n                                    })\n                                }\n                            </ul>\n                        )\n                    }).orElse([])\n            }\n        </td>\n    </tr>\n}\n\nexport function Collapseable(props)\n{\n    const [open, setOpen] = useState(props.open || false);\n\n    let variant = props.variant || \"primary\";\n    let headerClass = new Optional(props.headerClass).map(val => \" \" + val).orElse(\"\");\n    let bodyClass = new Optional(props.bodyClass).map(val => \" \" + val).orElse(\"\");\n\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header\" + headerClass}\n                   variant={variant}\n                   onClick={() => setOpen(!open)}>\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                {props.header}\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={bodyClass}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    )\n}\n",
    "import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {Optional} from \"../services/utils\";\nimport {ErrorMessageList} from \"./form-base\";\n\n\nexport class CardInputField extends React.Component\n{\n\n\n    constructor(props)\n    {\n        super(props);\n        this.bubbleEvent = this.bubbleEvent.bind(this);\n    }\n\n    bubbleEvent(e)\n    {\n        this.props.onChange(e.target.name, e.target.value);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.value !== this.props.value)\n        {\n            this.props.onChange(this.props.name, this.props.value);\n        }\n    }\n\n    render()\n    {\n        let controlId = new Optional(this.props.id).orElse(this.props.name);\n        let inputFieldType = this.props.type === undefined ? \"text\" : this.props.type;\n        let inputFieldName = this.props.name;\n        let inputFieldPlaceholder = this.props.placeholder === undefined ? this.props.name : this.props.placeholder;\n        let inputFieldErrorMessages = new Optional(this.props.onError).map(val => val(this.props.name)).orElse([]);\n        let isDisabled = this.props.disabled === true;\n        let isReadOnly = this.props.readOnly === true;\n\n        return (\n            <React.Fragment>\n                <Form.Control id={controlId}\n                              className={\"card-input-field \" + new Optional(this.props.className).orElse(\"\")}\n                              type={inputFieldType}\n                              name={inputFieldName}\n                              disabled={isDisabled}\n                              readOnly={isReadOnly}\n                              placeholder={inputFieldPlaceholder}\n                              onChange={this.bubbleEvent}\n                              value={this.props.value} />\n                <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </React.Fragment>\n        )\n    }\n}\n"
  ],
  "sourceRoot": ""
}