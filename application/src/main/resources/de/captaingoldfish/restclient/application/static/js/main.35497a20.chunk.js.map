{"version":3,"sources":["logo.svg","media/certificate.png","jwt/jwt-parser.js","reportWebVitals.js","base/modal.js","base/certificate-list.js","admin/system/application-keystore.js","admin/system/application-truststore.js","admin/system/proxy-management.js","admin/system/system-overview.js","openid/openid-provider.js","jwt/jwt-builder.js","jwt/jwt-handler.js","openid/openid-clients.js","openid/http-settings.js","openid/auth-code-grant/access-token-view.js","openid/auth-code-grant/authorization-code-grant-workflow.js","scim/current-workflow-settings-client.js","openid/openid-client-workflow.js","openid/openid-client-overview.js","tokens/token-category-client.js","tokens/token-store-client.js","tokens/token-store-list.js","tokens/token-category.js","file-parser/file-parser.js","app.js","index.js","scim/scim-client.js","scim/scim-constants.js","services/utils.js","scim/scim-component-basics.js","base/form-base.js","base/card-base.js","media/secure-download-icon.png"],"names":["module","exports","JwtParser","props","state","isMounted","selectedKey","currentJwt","setState","bind","scimClient","ScimClient","JWT_BUILDER_ENDPOINT","formReference","createRef","onUpdateSuccess","handleKeySelectionSelection","parseJwt","prettyPrintJwtJson","scimComponentBasics","ScimComponentBasics","getOriginalResource","jwtBuilder","id","getCurrentResource","setCurrentResource","resource","this","value","a","document","getElementById","header","JSON","stringify","parse","undefined","split","parts","jwtDetails","jwtPartDecoder","tokenPart","decodeURIComponent","Buffer","from","toString","length","parseHeader","infoMessages","warnMessages","base64Header","base64Body","parsedBody","body","decodedTokenString","json","ex","jwtParts","getJwtParts","isJws","Optional","map","orElse","isJwe","headerToDisplay","details","bodyToDisplay","errors","Fragment","variant","icon","messages","errorMessages","detail","d","onSubmit","ref","sm","title","onSelect","keyInfos","isPresent","keyInfo","Item","key","alias","eventKey","keyAlgorithm","keyLength","className","style","marginLeft","color","type","onClick","e","show","isLoading","marginTop","Control","name","as","onChange","target","part","index","readOnly","onError","fieldName","getErrors","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Modal","role","aria-modal","tabIndex","message","Button","submitButtonText","onCancel","cancelButtonText","CertificateCardEntry","loaded","scimResourcePath","deleteEntry","showModal","hideModal","loadData","deleteResource","success","onDeleteSuccess","showSpinner","getResource","response","certInfo","ScimConstants","cert","info","certificateTooltip","Tooltip","privateKeyTooltip","Card","border","bg","Header","hasPrivateKey","OverlayTrigger","placement","delay","hide","overlay","Body","Image","src","CertIcon","fluid","Subtitle","Text","issuerDn","subjectDn","sha256Fingerprint","Date","validFrom","toUTCString","validTo","CertificateList","CardDeck","certificateAliases","certAlias","ApplicationKeystore","setAliasSelectionResponse","onAliasSelectionSuccess","copiedResource","aliasSelectionResponse","newKeyInfo","onCreateSuccess","KeystoreUpload","upload","handleCreateResponse","preventDefault","getResourceFromFormReference","createResource","Alert","Form","label","placeholder","Group","Row","Col","span","offset","AliasSelection","save","stateId","val","aliasSelection","aliases","options","KeystoreEntryList","downloadKeystore","listResources","listResponse","Resources","prevProps","prevState","snapshot","aliasDeleted","indexOfAlias","array","attr","i","findIndexOf","splice","downloading","KEYSTORE_ENDPOINT","attributes","base64ApplicationKeystore","applicationKeystore","downloadBase64Data","Badge","href","downloadIcon","ApplicationTruststore","onMergeSuccess","onUploadSuccess","mergedAliases","newAliases","addedCertificateAlias","TruststoreUploadForm","addedAliases","duplicateAliases","duplicateCertificates","truststoreUploadResponse","ifPresent","do","sort","duplicateCertificateAliases","numberOfDuplicateAliases","numberOfDuplicateCerts","CertificateUploadForm","addedAlias","certificateUploadResponse","CertificateEntryList","downloadTruststore","concat","indexOf","TRUSTSTORE_ENDPOINT","base64ApplicationTruststore","applicationTruststore","ProxyManagement","proxyList","addNewProxy","addProxy","removeProxy","startIndex","currentPage","window","MAX_RESULTS","filter","isNaN","count","sortBy","newResources","oldResources","concatedResources","lodash","newProxy","deletedProxyId","proxy","unshift","oldProxy","p","newProxyList","ProxyCardEntry","editMode","setStateValue","spinner","updateResource","resetEditMode","edit","hidden","Table","size","borderless","striped","resourceId","resourceValue","hostname","updateInput","port","username","password","SystemOverview","Tabs","defaultActiveKey","Tab","OpenidProvider","providerList","addNewProvider","removeProvider","serviceProviderConfig","maxResults","provider","newProvider","deletedProviderName","oldProvider","OpenIdProviderCardEntry","Nav","exact","to","marginRight","height","discoveryEndpoint","JwtBuilder","addX5Sha256tHeader","handleSignatureAlgorithmSelection","handleEncryptionAlgorithmSelection","handleContentEncryptionAlgorithmSelection","handleHeaderChange","handleBodyChange","addJwtBody","addDefaultJwtAttributes","addKeyIdToHeader","handleAddSha256Thumbprint","addHeader","jwtInfo","signatureAlgorithms","jwt","enc","encryptionAlgorithms","Exception","iss","aud","sub","iat","getTime","exp","jti","mergedBody","event","isSelected","checked","kidMatchesHeader","kid","Container","Dropdown","DropdownButton","cursor","Check","JwtHandler","ApplicationInfoContext","Consumer","appInfo","OpenidClients","clientList","OPENID_CLIENT_ENDPOINT","addNewClient","removeClient","openIdProviderId","match","params","openIdProviderResourcePath","OPENID_PROVIDER_ENDPOINT","openIdProvider","errorResponse","loadKeystoreInfos","lr","r","keystore","client","newClient","deletedClientId","oldClient","c","clientId","padding","paddingLeft","OpenIdClientCardEntry","authenticationType","forEach","push","selections","selected","clientSecret","signingKeyRef","signatureAlgorithm","audience","decryptionKeyRef","HttpSettings","httpSettings","settings","proxies","originalSetting","enableHostnameVerifier","useHostnameVerifier","console","error","loadProxies","isHidden","requestTimeout","connectionTimeout","socketTimeout","proxyReference","tlsClientAuthAliasReference","AccessTokenView","AccessTokenCollapsible","headerClass","content","AccessTokenDetailsView","accessTokenDetails","remove","onRemove","useState","open","setOpen","Collapse","in","AccessTokenRequestView","AccessTokenResponseView","bodyClass","NameValueList","keyPrefix","nameValueList","requestHeaders","requestParams","responseDetails","responseStatusCode","statusCode","responseHeaders","plainResponse","contentType","toLowerCase","tokenResponse","nameValuePair","AccessTokenResponse","parseJsonContent","isContentTypeJson","includes","stateExtension","Object","keys","AuthorizationCodeGrantWorkflow","forceUpdate","loadAuthorizationQueryParameterView","getAuthRequestStatus","loadAuthorizationCodeResponseDetailsView","retrieveAccessTokenDetails","interval","clearInterval","requestDetails","authorizationCodeGrantUrl","setInterval","AUTH_CODE_GRANT_ENDPOINT","stateParam","fromEntries","URL","searchParams","authorizationResponseUrl","authCodeQueryParams","showInfoMessage","ACCESS_TOKEN_REQUEST_ENDPOINT","queryParamsObject","grantType","openIdClientId","parseInt","redirectUri","redirect_uri","authorizationCode","code","marginBottom","AuthorizationCodeGrantDetails","CurrentWorkflowSettingsClient","CURRENT_WORKFLOW_SETTINGS_ENDPOINT","openidClientId","queryParameters","callback","authCodeParameters","patchResource","scope","clientCredentialsParameters","resourceOwnerPasswordParameters","patchOperation","schemas","Operations","op","method","status","OpenidClientWorkflow","context","authCodeGrantType","clientCredentialsGrantType","resourceOwnerGrantType","workflowDetails","CURRENT_WORKFLOW_URI","resetRedirectUri","handleNestedElementChange","handleGrantTypeResponseDetails","removeGrantTypeDetails","wrapperObject","originalRedirectUri","responseDetailsArray","fieldname","detailsObject","detailsIndex","authTypes","display","displayType","handleChange","handleResponse","ResponseDetailsView","AuthorizationCodeGrantForm","intervals","loadAuthorizationRequestDetails","patchWorkflowSettings","getAuthcode","errorMessage","workflowSettingsClient","w","queryParams","updateAuthCodeSettings","ClientCredentialsGrantForm","accessingToken","updateClientCredentialsSettings","ResourceOwnerPasswordCredentialsForm","updateResourceOwnerPasswordCredentialsSettings","OpenidClientOverview","providerId","authCodeRedirectUri","TokenCategoryClient","TOKEN_CATEGORY_ENDPOINT","onSuccess","category","TOKEN_CATEGORY_URI","sortOrder","searchRequest","SEARCH_REQUEST_URI","listResourcesWithPost","TokenStoreClient","TOKEN_STORE_ENDPOINT","token","categoryId","tokenStore","TOKEN_STORE_URI","tokenStoreArray","maxOperations","sendBulkRequest","bulkOperations","bulkRequest","BULK_REQUEST_URI","fetch","BULK_ENDPOINT","headers","ops","deleteSuccessIds","deleteFailedIds","deletedResponseOperations","bulkId","operations","path","TokenStoreList","setErrors","loadedOnce","setloadedOnce","totalResults","setTotalResults","tokenStoreList","setTokenStoreList","addNewTokenStores","newTokenStores","c1","c2","localeCompare","setCategoryEntires","useEffect","v","trim","listTokenStores","TokenStoreTable","updateTokenStore","oldtokenStore","newTokenStore","copiedTokenStores","removeTokenStore","toggleSingleCeckbox","toggleAllCheckboxes","setError","bulkDeleteMode","setBulkDeleteMode","addNew","setAddNew","serviceProviderContext","useContext","ScimServiceProviderContext","deleteTokenStore","bordered","hover","bulkDeleteTokenStores","bulk","successfulDeleteIds","failedDeleteIds","deletedTokenStores","bulkDeleteTokenStore","TokenStoreRow","resourceArray","deleteMode","setDeleteMode","setEditMode","viewTokenMode","setViewTokenMode","setToken","tokenName","setTokenName","wrap","meta","created","toLocaleString","lastModified","createTokenStore","TokenCategoryList","setFilter","tokenCategoryList","setTokenCategoryList","addNewCategories","categoryArray","newTokenCategories","updateCategory","oldCategory","newCategory","copiedList","removeCategory","numberOfEntries","listCategories","onKeyUp","ListGroup","CategoryHeader","addToTokenCategoryList","tokenCategory","CategoryListItem","Content","Pane","setValue","action","onKeyDown","stopPropagation","margin","EditIcon","classNames","DeleteCategoryBlock","deleteCategory","setCategory","saveNewCategory","createCategory","FileParser","b64Data","setB64Data","dragActive","setDragActive","FormLabel","onDragEnter","createContext","Application","maxPayloadSize","SERVICE_PROVIDER_CONFIG_ENDPOINT","APP_INFO_ENDPOINT","Navbar","collapseOnSelect","expand","Brand","Toggle","aria-controls","Link","logo","alt","Provider","component","render","route","ReactDOM","resourcePath","resetErrors","handleError","parseErrorResponse","jsonPromise","tmpResponse","parameters","URLSearchParams","url","encodeURIComponent","excludedAttributes","startIndexParam","countParam","filterParam","encodeURI","sortByParam","sortOrderParam","attributesParam","excludedAttributesParam","query","Array","of","join","requestUrl","text","patchBody","scimResource","handleInputField","inputfield","files","toBase64","inputFieldValue","valueAsNumber","formInputFields","current","getElementsByTagName","textAreaFields","formSelectFields","allFormFields","inputField","fieldErrors","CERT_URI","BASE_URL","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","encoded","result","replace","repeat","onerror","base64Data","filename","filetype","decoded","atob","len","bytes","Uint8Array","charCodeAt","Blob","buffer","downloadAnchor","createElement","createObjectURL","download","click","setTimeout","revokeObjectURL","handler","defaultValue","handleCreateOrUpdateResponse","ifNotPresent","object","FormInputField","controlId","Label","column","inputFieldType","inputFieldName","inputFieldPlaceholder","inputFieldErrorMessages","isDisabled","disabled","isReadOnly","get","children","ErrorMessageList","FormCheckbox","alignSelf","FormSelectField","labelText","inputFieldOptions","FormFileField","bsCustomFileInput","init","destroy","FormObjectList","custom","FormRadioSelection","displayClass","backgroundClass","ErrorListItem","AlertListMessages","LoadingSpinner","animation","ErrorMessagesAlert","CardControlIcons","CardDateRows","ModifiableCardEntry","HiddenCardEntry","CardRadioSelector","CardListSelector","Collapseable","CardInputField","bubbleEvent"],"mappings":"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","file":"static/js/main.35497a20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","module.exports = __webpack_public_path__ + \"static/media/certificate.f8e929ae.png\";","import React, {createRef} from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {AlertListMessages, FormInputField, LoadingSpinner} from \"../base/form-base\";\nimport Button from \"react-bootstrap/Button\";\nimport {Optional} from \"../services/utils\";\nimport {Col, Container, Dropdown, DropdownButton, Row} from \"react-bootstrap\";\nimport {ExclamationTriangle} from \"react-bootstrap-icons\";\nimport {GoFlame} from \"react-icons/go\";\nimport {JWT_BUILDER_ENDPOINT} from \"../scim/scim-constants\";\n\nexport default class JwtParser extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isMounted: false,\n            selectedKey: \"\",\n            currentJwt: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n        };\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(JWT_BUILDER_ENDPOINT, this.setState);\n        this.formReference = createRef();\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.handleKeySelectionSelection = this.handleKeySelectionSelection.bind(this);\n        this.parseJwt = this.parseJwt.bind(this);\n        this.prettyPrintJwtJson = this.prettyPrintJwtJson.bind(this);\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.state.jwtBuilder || {id: 1},\n            getCurrentResource: () => this.state.jwtBuilder || {id: 1},\n            setCurrentResource: resource =>\n            {\n            },\n            setState: this.setState,\n            onUpdateSuccess: this.onUpdateSuccess\n        });\n    }\n\n    componentDidMount()\n    {\n        this.setState({isMounted: true});\n    }\n\n    async handleKeySelectionSelection(value)\n    {\n        await this.setState({selectedKey: value})\n        let hiddenKeyIdInputField = document.getElementById(\"jwt-parser-key-id\");\n        hiddenKeyIdInputField.value = value;\n    }\n\n    onUpdateSuccess(resource)\n    {\n        let jwtBuilder = resource;\n        jwtBuilder.header = JSON.stringify(JSON.parse(resource.header), undefined, 4);\n        this.setState({jwtBuilder: jwtBuilder});\n    }\n\n    getJwtParts()\n    {\n        if (this.state.isMounted === false)\n        {\n            return null;\n        }\n        let token = document.getElementById(\"jwt-to-parse\").value;\n        return (token || \"\").split(\".\");\n    }\n\n    parseJwt(parts)\n    {\n        if (this.state.isMounted === false)\n        {\n            return null;\n        }\n        let jwtDetails = {};\n        jwtDetails.parts = parts;\n\n        let jwtPartDecoder = function (tokenPart)\n        {\n            return decodeURIComponent(Buffer.from(tokenPart, \"base64\").toString());\n        };\n\n        if (parts.length === 5)\n        {\n            let base64Header = parts[0];\n            let parseHeader = jwtPartDecoder(base64Header);\n            jwtDetails.header = this.prettyPrintJwtJson(parseHeader);\n            jwtDetails.infoMessages = [\"JWE must be parsed at backend\"];\n            return jwtDetails;\n        }\n\n        if (parts.length !== 3)\n        {\n            jwtDetails.warnMessages = [\"Not a valid JSON Web Token\"];\n            return jwtDetails;\n        }\n\n        let base64Header = parts[0];\n        let base64Body = parts[1];\n\n        let parseHeader = jwtPartDecoder(base64Header);\n        let parsedBody = jwtPartDecoder(base64Body);\n        jwtDetails.header = this.prettyPrintJwtJson(parseHeader);\n        jwtDetails.body = this.prettyPrintJwtJson(parsedBody);\n        return jwtDetails;\n    }\n\n    prettyPrintJwtJson(decodedTokenString)\n    {\n        try\n        {\n            let json = JSON.parse(decodedTokenString);\n            return JSON.stringify(json, null, 2);\n        } catch (ex)\n        {\n            return decodedTokenString;\n        }\n    }\n\n    render()\n    {\n        let jwtParts = this.getJwtParts();\n        let jwtDetails = this.parseJwt(jwtParts) || {};\n        let isJws = new Optional(jwtParts).map(parts => parts.length === 3).orElse(false);\n        let isJwe = new Optional(jwtParts).map(parts => parts.length === 5).orElse(false);\n\n        let headerToDisplay = new Optional(this.state.jwtBuilder).map(details => details.header).orElse(\n            jwtDetails.header);\n        let bodyToDisplay = new Optional(this.state.jwtBuilder).map(details => details.body).orElse(jwtDetails.body);\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                   messages={errors.errorMessages || new Optional(errors.detail).map(d => [d]).orElse(\n                                       [])} />\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <AlertListMessages icon={<GoFlame />} variant={\"danger\"}\n                                       messages={(this.state.errorMessages || []).errors} />\n                    <AlertListMessages icon={<ExclamationTriangle />} variant={\"warning\"}\n                                       messages={jwtDetails.warnMessages} />\n                    <AlertListMessages variant={\"info\"} messages={jwtDetails.infoMessages} />\n                    <Container>\n                        <Row>\n                            <Col sm={3}>\n                                <Dropdown>\n                                    <DropdownButton id={\"jwt-parser-aliases\"}\n                                                    title={\"available keys\"}\n                                                    onSelect={this.handleKeySelectionSelection}>\n                                        {\n                                            new Optional(this.props.keyInfos).isPresent() &&\n                                            this.props.keyInfos.map((keyInfo) =>\n                                            {\n                                                return <Dropdown.Item key={keyInfo.alias}\n                                                                      eventKey={keyInfo.alias}>{keyInfo.alias + \" (\"\n                                                                                                + keyInfo.keyAlgorithm\n                                                                                                + \"-\"\n                                                                                                + keyInfo.keyLength\n                                                                                                + \"-bit)\"}</Dropdown.Item>\n                                            })\n                                        }\n                                    </DropdownButton>\n                                    <p>\n                                        selected key:\n                                        <span className={\"code\"}\n                                              style={{marginLeft: \"15px\", color: \"lightgreen\"}}>\n                                        {this.state.selectedKey}\n                                    </span>\n                                    </p>\n                                </Dropdown>\n\n                                {\n                                    (isJwe === true || isJws === true) &&\n                                    <Button id={\"parse-jwt\"} type=\"submit\" onClick={e =>\n                                    {\n                                        this.setState({jwtBuilder: undefined})\n                                    }\n                                    }>\n                                        <LoadingSpinner show={this.state.isLoading} />\n                                        {\n                                            isJws === true &&\n                                            <span>Verify Signature</span>\n                                        }\n                                        {\n                                            isJwe === true &&\n                                            <span>Decrypt</span>\n                                        }\n                                    </Button>\n                                }\n                                {\n                                    this.state.jwtBuilder && isJws &&\n                                    <h5 style={{color: \"lightgreen\", marginTop: \"50px\"}}>Signature valid</h5>\n                                }\n                                {\n                                    this.state.jwtBuilder && isJwe &&\n                                    <h5 style={{color: \"lightgreen\", marginTop: \"50px\"}}>Successfully decrypted</h5>\n                                }\n                            </Col>\n                            <Col sm={4} className={\"form-group\"}>\n                                <Form.Control id={\"jwt-to-parse\"}\n                                              name={\"jwt\"}\n                                              sm={12}\n                                              as={\"textarea\"}\n                                              value={this.state.currentJwt}\n                                              onChange={e => this.setState({\n                                                  currentJwt: e.target.value,\n                                                  jwtBuilder: undefined\n                                              })} />\n                                {\n                                    <div id={\"jwt-input\"}\n                                         className={\"jwt-overlay\"}>\n                                        {\n                                            (jwtDetails.parts || []).map((part, index) =>\n                                            {\n                                                return <span key={\"jwt-part-\" + index}\n                                                             className={\"jwt-part jwt-part-\" + (index <= 4 ? index\n                                                                                                           : \"over\")}>\n                                                {\n                                                    index > 0 &&\n                                                    <span className={\"jwt-dot-separator\"}>\n                                                        .<br />\n                                                    </span>\n                                                }\n                                                    {part}\n                                            </span>\n                                            })\n                                        }\n                                    </div>\n                                }\n                            </Col>\n                            <Col sm={5}>\n                                <FormInputField id={\"jwt-parser-key-id\"}\n                                                name=\"keyId\"\n                                                readOnly={true}\n                                                type=\"hidden\"\n                                                value={this.state.selectedKey}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                                <FormInputField id={\"jwt-parsed-header\"}\n                                                name=\"header\"\n                                                className={\"jwt-part-0\"}\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                value={headerToDisplay}\n                                                onChange={() =>\n                                                {/*do nothing*/\n                                                }}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                                <FormInputField id={\"jwt-parsed-body\"}\n                                                name=\"body\"\n                                                className={\"jwt-part-1\"}\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                value={bodyToDisplay}\n                                                onChange={() =>\n                                                {/*do nothing*/\n                                                }}\n                                                onError={fieldName => this.scimClient.getErrors(this.state,\n                                                    fieldName)} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n","const reportWebVitals = onPerfEntry =>\n{\n    if (onPerfEntry && onPerfEntry instanceof Function)\n    {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) =>\n        {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nexport default class Modal extends React.Component\n{\n\n    render()\n    {\n        return (\n            this.props.show === true &&\n            <div id={this.props.id} role=\"dialog\" aria-modal=\"true\" tabIndex=\"-1\" className={\"card-modal\"}>\n                <div className={\"card-modal-content\"}>\n                    <h5 id={this.props.id + \"-header\"} className={\"card-title\"}>\n                        {this.props.title}\n                    </h5>\n                    <p id={this.props.id + \"-text\"}>{this.props.message}</p>\n                    <Button id={this.props.id + \"-button-accept\"}\n                            role=\"accept\"\n                            className={\"left\"}\n                            variant={this.props.variant === undefined ? \"info\" : this.props.variant}\n                            type={\"button\"}\n                            onClick={this.props.onSubmit}>\n                        {this.props.submitButtonText}\n                    </Button>\n                    <Button id={this.props.id + \"-button-cancel\"}\n                            role=\"cancel\"\n                            className={\"right\"}\n                            variant=\"secondary\"\n                            type={\"button\"}\n                            onClick={this.props.onCancel}>\n                        {this.props.cancelButtonText}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {Card, CardDeck, Image, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport Modal from \"./modal\";\nimport {AwardFill, KeyFill, TrashFill} from \"react-bootstrap-icons\";\nimport CertIcon from \"../media/certificate.png\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimClient from \"../scim/scim-client\";\nimport * as ScimConstants from \"../scim/scim-constants\";\nimport {LoadingSpinner} from \"./form-base\";\nimport {Optional} from \"../services/utils\";\n\n\nexport class CertificateCardEntry extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {loaded: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.deleteEntry = this.deleteEntry.bind(this);\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    async deleteEntry()\n    {\n        let response = await this.scimClient.deleteResource(this.props.alias);\n\n        if (response.success)\n        {\n            if (this.props.onDeleteSuccess !== undefined)\n            {\n                this.props.onDeleteSuccess(this.props.alias);\n            }\n        }\n        else\n        {\n            // TODO\n        }\n    }\n\n    async loadData()\n    {\n        this.setState({showSpinner: true});\n\n        let response = await this.scimClient.getResource(this.props.alias);\n\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let certInfo = resource[ScimConstants.CERT_URI];\n                this.setState({\n                    loaded: true,\n                    cert: certInfo,\n                    certInfo: certInfo.info\n                });\n            });\n        }\n        else\n        {\n            // TODO\n        }\n    }\n\n    showModal()\n    {\n        this.setState({showModal: true})\n    }\n\n    hideModal()\n    {\n        this.setState({showModal: false})\n    }\n\n    render()\n    {\n        const certificateTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                Certificate\n            </Tooltip>\n        );\n        const privateKeyTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                Private Key and Certificate\n            </Tooltip>\n        );\n\n        return (\n            <Card id={\"alias-card-\" + this.props.alias} key={this.props.alias}\n                  border={\"warning\"} bg={\"dark\"} className={\"alias-card\"}>\n                <Modal id={\"delete-dialog-\" + this.props.alias}\n                       show={this.state.showModal}\n                       variant=\"danger\"\n                       title={\"Delete '\" + this.props.alias + \"'\"}\n                       message=\"Are you sure?\"\n                       submitButtonText=\"delete\"\n                       onSubmit={this.deleteEntry}\n                       cancelButtonText=\"cancel\"\n                       onCancel={this.hideModal}>\n                </Modal>\n                <Card.Header id={\"alias-name-\" + this.props.alias}>\n                    {this.props.alias} {new Optional(this.props.keyInfo).map(info =>\n                    <React.Fragment>\n                        <br />\n                        (\n                        <span className={\"keyInfo\"}>\n                            {info.keyAlgorithm + \": \"\n                             + info.keyLength + \"-bit \"}\n                            {\n                                info.hasPrivateKey &&\n                                <OverlayTrigger placement=\"right\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={privateKeyTooltip}>\n                                    <KeyFill />\n                                </OverlayTrigger>\n                            }\n                            {\n                                !info.hasPrivateKey &&\n                                <OverlayTrigger placement=\"right\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={certificateTooltip}>\n                                    <AwardFill />\n                                </OverlayTrigger>\n                            }\n                        </span>\n                        )\n                    </React.Fragment>\n                )\n                                                                        .orElse(null)}\n                    <div className=\"card-control-icons\">\n                        <LoadingSpinner show={this.state.isLoading} />\n                        <TrashFill id={\"delete-icon-\" + this.props.alias} onClick={this.showModal} />\n                    </div>\n                </Card.Header>\n                <Card.Body>\n                    {\n                        this.state.loaded === false &&\n                        <React.Fragment>\n                            <div className={\"load-certificate-icon-container\"}>\n                                <Image src={CertIcon} className={\"load-certificate-icon\"} fluid /> <br />\n                                <Button id={\"load-certificate-data-button-for-\" + this.props.alias}\n                                        className={\"card-load-icon\"}\n                                        type={\"button\"}\n                                        onClick={this.loadData}>\n                                    Load Data\n                                </Button>\n                            </div>\n                        </React.Fragment>\n                    }\n                    {\n                        this.state.loaded === true &&\n                        <React.Fragment>\n                            <Card.Subtitle>Issuer</Card.Subtitle>\n                            <Card.Text id={\"issuer-dn-\" + this.props.alias}>\n                                {this.state.certInfo.issuerDn}\n                            </Card.Text>\n                            <Card.Subtitle>Subject</Card.Subtitle>\n                            <Card.Text id={\"subject-dn-\" + this.props.alias}>\n                                {this.state.certInfo.subjectDn}\n                            </Card.Text>\n                            <Card.Subtitle>SHA-256 Fingerprint</Card.Subtitle>\n                            <Card.Text id={\"sha-256-\" + this.props.alias}>\n                                {this.state.certInfo.sha256Fingerprint}\n                            </Card.Text>\n                            <Card.Subtitle>Valid From</Card.Subtitle>\n                            <Card.Text id={\"valid-from-\" + this.props.alias}>\n                                {new Date(this.state.certInfo.validFrom).toUTCString()}\n                            </Card.Text>\n                            <Card.Subtitle>Valid Until</Card.Subtitle>\n                            <Card.Text id={\"valid-until-\" + this.props.alias}>\n                                {new Date(this.state.certInfo.validTo).toUTCString()}\n                            </Card.Text>\n                        </React.Fragment>\n                    }\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default function CertificateList(props)\n{\n\n    return (\n        <React.Fragment>\n            <CardDeck id=\"keystore-certificate-entries\">\n                {\n                    props.certificateAliases !== undefined &&\n                    props.certificateAliases.map((certAlias) =>\n                    {\n                        return <CertificateCardEntry key={certAlias}\n                                                     scimResourcePath={props.scimResourcePath}\n                                                     alias={certAlias}\n                                                     onDeleteSuccess={props.onDeleteSuccess} />\n                    })\n                }\n            </CardDeck>\n        </React.Fragment>\n    );\n}","import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {ErrorMessagesAlert, FormFileField, FormInputField, FormSelectField, LoadingSpinner} from \"../../base/form-base\";\nimport {downloadBase64Data, Optional} from \"../../services/utils\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {Alert, Badge, CardDeck, Image} from \"react-bootstrap\";\nimport downloadIcon from \"../../media/secure-download-icon.png\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {CertificateCardEntry} from \"../../base/certificate-list\";\nimport {KEYSTORE_ENDPOINT} from \"../../scim/scim-constants\";\n\n\nexport default class ApplicationKeystore extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.scimResourcePath = \"/scim/v2/Keystore\";\n        this.state = {};\n        this.setAliasSelectionResponse = this.setAliasSelectionResponse.bind(this);\n        this.onAliasSelectionSuccess = this.onAliasSelectionSuccess.bind(this);\n    }\n\n    setAliasSelectionResponse(resource)\n    {\n        let copiedResource = JSON.parse(JSON.stringify(resource));\n        this.setState({aliasSelectionResponse: copiedResource})\n    }\n\n    onAliasSelectionSuccess(resource)\n    {\n        this.setState({newKeyInfo: {value: resource.keyInfos[0]}})\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <KeystoreUpload scimResourcePath={this.scimResourcePath}\n                                setAliasSelectionResponse={this.setAliasSelectionResponse} />\n                <AliasSelection scimResourcePath={this.scimResourcePath}\n                                aliasSelectionResponse={this.state.aliasSelectionResponse}\n                                onCreateSuccess={this.onAliasSelectionSuccess} />\n                <KeystoreEntryList scimResourcePath={this.scimResourcePath}\n                                   newKeyInfo={this.state.newKeyInfo} />\n            </React.Fragment>\n        )\n    }\n}\n\nclass KeystoreUpload extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            success: false,\n            showSpinner: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.props.setAliasSelectionResponse(resource);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2>Keystore Upload</h2>\n                <Alert id={\"uploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Keystore was successfully uploaded</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"uploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"fileUpload.keystoreFile\"\n                                   label=\"Keystore File\"\n                                   placeholder=\"Select a keystore file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"fileUpload.keystorePassword\"\n                                    label=\"Keystore Password\"\n                                    type=\"password\"\n                                    placeholder=\"Keystore Password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"upload\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Upload\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass AliasSelection extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {success: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.save = this.save.bind(this);\n    }\n\n    async save(e)\n    {\n        e.preventDefault();\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.props.onCreateSuccess(resource);\n                this.setState({newKeyInfo: resource.keyInfos[0]});\n            })\n        }\n        else\n        {\n            this.setState({newKeyInfo: undefined});\n        }\n    }\n\n    render()\n    {\n        let stateId = new Optional(this.props.aliasSelectionResponse).map(val => val.aliasSelection)\n                                                                     .map(val => val.stateId)\n                                                                     .orElse(0);\n        let aliases = new Optional(this.props.aliasSelectionResponse).map(val => val.aliasSelection)\n                                                                     .map(val => val.aliases)\n                                                                     .orElse([]);\n        let className = new Optional(this.props.aliasSelectionResponse).map(val => \"\").orElse(\"disabled\")\n        return (\n            <React.Fragment>\n                <h2>Alias Selection</h2>\n                <Alert id={\"aliasSelectionForm-alert-success\"}\n                       variant={\"success\"}\n                       show={new Optional(this.state.newKeyInfo).isPresent()}>\n                    <Form.Text><GoThumbsup /> Entry with alias\n                                              '{new Optional(this.state.newKeyInfo).map(info => info.alias)\n                                                                                   .orElse(\"\")}'\n                                              was successfully added</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"aliasSelectionForm\"} onSubmit={this.save} ref={this.formReference} className={className}>\n                    <FormInputField name=\"aliasSelection.stateId\"\n                                    type=\"hidden\"\n                                    value={stateId}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormSelectField name=\"aliasSelection.aliases\"\n                                     label=\"Alias\"\n                                     options={aliases}\n                                     onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"aliasSelection.aliasOverride\"\n                                    label=\"Alias Override\"\n                                    type=\"text\"\n                                    placeholder=\"Store under another alias\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"aliasSelection.privateKeyPassword\"\n                                    label=\"Private Key Password\"\n                                    type=\"password\"\n                                    placeholder=\"Optional if password is identical to keystore password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"save\"} type=\"Save\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass KeystoreEntryList extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {keyInfos: []};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.onDeleteSuccess = this.onDeleteSuccess.bind(this);\n        this.downloadKeystore = this.downloadKeystore.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let response = await this.scimClient.listResources();\n        if (response.success)\n        {\n            response.resource.then(listResponse =>\n            {\n                this.setState({\n                    keyInfos: new Optional(listResponse.Resources[0]).map(val => val.keyInfos)\n                                                                     .orElse([])\n                })\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.newKeyInfo !== this.props.newKeyInfo &&\n            new Optional(this.props.newKeyInfo).map(info => info.value).isPresent())\n        {\n            this.setState(\n                {\n                    keyInfos: [...this.state.keyInfos, this.props.newKeyInfo.value],\n                    aliasDeleted: undefined\n                });\n\n        }\n    }\n\n    onDeleteSuccess(alias)\n    {\n        let keyInfos = this.state.keyInfos;\n\n        let findIndexOf = function findWithAttr(array, attr, value)\n        {\n            for (var i = 0; i < array.length; i += 1)\n            {\n                if (array[i][attr] === value)\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        const indexOfAlias = findIndexOf(keyInfos, \"alias\", alias)\n        if (indexOfAlias > -1)\n        {\n            keyInfos.splice(indexOfAlias, 1);\n        }\n        this.setState({\n            aliasDeleted: alias,\n            keyInfos: keyInfos\n        })\n    }\n\n    downloadKeystore(e)\n    {\n        e.preventDefault();\n        this.setState({downloading: true})\n        this.scimClient.getResource(\"1\", KEYSTORE_ENDPOINT, {attributes: \"applicationKeystore\"}).then(response =>\n        {\n            this.setState({downloading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    let base64ApplicationKeystore = resource.applicationKeystore;\n                    downloadBase64Data(base64ApplicationKeystore, \"application-keystore-pw-123456.p12\", \"p12\")\n                })\n            }\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2 id=\"application-certificate-info-header\">\n                    <p>Application Keystore Infos</p>\n                    <Badge className=\"download-keystore-icon\">\n                        <a id={\"keystore-download-link\"} href={\"/#\"} onClick={this.downloadKeystore}>\n                            <LoadingSpinner show={this.state.downloading || false} />\n                            <Image src={downloadIcon} fluid />\n                            <p>Download</p>\n                        </a>\n                    </Badge>\n                </h2>\n                <Alert id=\"card-list-infos-alert\"\n                       variant={\"info\"}>\n                    <Form.Text>\n                        <InfoCircle /> Application Keystore contains\n                                       \"{new Optional(this.state.keyInfos).map(val => val.length)\n                                                                          .orElse(0)}\"\n                                       entries\n                    </Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={this.state.aliasDeleted !== undefined}>\n                    <Form.Text>\n                        <GoThumbsup /> Key entry for alias \"{this.state.aliasDeleted}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <CardDeck id=\"keystore-certificate-entries\">\n                    {\n                        this.state.keyInfos.map(keyInfo =>\n                        {\n                            return <CertificateCardEntry key={keyInfo.alias}\n                                                         scimResourcePath={this.props.scimResourcePath}\n                                                         alias={keyInfo.alias}\n                                                         keyInfo={keyInfo}\n                                                         onDeleteSuccess={this.onDeleteSuccess} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n}","import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {ErrorMessagesAlert, FormFileField, FormInputField, LoadingSpinner} from \"../../base/form-base\";\nimport {downloadBase64Data, Optional} from \"../../services/utils\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {Alert, Badge, Image} from \"react-bootstrap\";\nimport downloadIcon from \"../../media/secure-download-icon.png\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\nimport {GoFlame, GoThumbsup} from \"react-icons/go\";\nimport CertificateList from \"../../base/certificate-list\";\nimport {TRUSTSTORE_ENDPOINT} from \"../../scim/scim-constants\";\n\n\nexport default class ApplicationTruststore extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.scimResourcePath = \"/scim/v2/Truststore\";\n        this.state = {};\n        this.onMergeSuccess = this.onMergeSuccess.bind(this);\n        this.onUploadSuccess = this.onUploadSuccess.bind(this);\n    }\n\n    onMergeSuccess(mergedAliases)\n    {\n        this.setState({newAliases: mergedAliases});\n    }\n\n    onUploadSuccess(addedCertificateAlias)\n    {\n        this.setState({newAliases: [addedCertificateAlias]});\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <TruststoreUploadForm scimResourcePath={this.scimResourcePath}\n                                      onMergeSuccess={this.onMergeSuccess} />\n                <CertificateUploadForm scimResourcePath={this.scimResourcePath}\n                                       aliasSelectionResponse={this.state.aliasSelectionResponse}\n                                       onUploadSuccess={this.onUploadSuccess} />\n                <CertificateEntryList scimResourcePath={this.scimResourcePath}\n                                      newAliases={this.state.newAliases} />\n            </React.Fragment>\n        )\n    }\n}\n\nclass TruststoreUploadForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            success: false,\n            showSpinner: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        this.setState({\n            addedAliases: [],\n            duplicateAliases: [],\n            duplicateCertificates: []\n        });\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let truststoreUploadResponse = resource.truststoreUploadResponse;\n\n                let addedAliases;\n                let duplicateAliases;\n                let duplicateCertificates;\n\n                new Optional(truststoreUploadResponse).ifPresent(response =>\n                {\n                    addedAliases = response.aliases;\n                    duplicateAliases = new Optional(response.duplicateAliases).do(val => val.sort())\n                                                                              .orElse([]);\n                    duplicateCertificates = new Optional(response.duplicateCertificateAliases).do(val => val.sort())\n                                                                                              .orElse([])\n                })\n\n                this.setState({\n                    addedAliases: new Optional(addedAliases).orElse([]),\n                    duplicateAliases: new Optional(duplicateAliases).orElse([]),\n                    duplicateCertificates: new Optional(duplicateCertificates).orElse([])\n                });\n\n                this.props.onMergeSuccess(addedAliases);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        let numberOfDuplicateAliases = new Optional(this.state.duplicateAliases).map(val => val.length).orElse(0);\n        let numberOfDuplicateCerts = new Optional(this.state.duplicateCertificates).map(val => val.length).orElse(0);\n\n        return (\n            <React.Fragment>\n                <h2>Truststore Upload</h2>\n                <Alert id={\"truststoreUploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Truststore was successfully merged</Form.Text>\n                </Alert>\n                <Alert id={\"upload-form-alert-duplicate-aliases\"} variant={\"warning\"}\n                       show={numberOfDuplicateAliases > 0}>\n                    <Form.Text>\n                        <GoFlame /> The following aliases could not be added because the alias is\n                                    duplicated.<br />\n                                    Number of not added aliases: {numberOfDuplicateAliases} <br />\n                                    [{this.state.duplicateAliases}]\n                    </Form.Text>\n                </Alert>\n                <Alert id={\"upoad-form-alert-duplicate-certificates\"} variant={\"warning\"}\n                       show={numberOfDuplicateCerts > 0}>\n                    <Form.Text>\n                        <GoFlame /> The following aliases could not be added because the certificate is already\n                                    present: [{this.state.duplicateCertificates}]\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"truststoreUploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"truststoreUpload.truststoreFile\"\n                                   label=\"Truststore File\"\n                                   placeholder=\"Select a truststore file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)}\n                    />\n                    <FormInputField name=\"truststoreUpload.truststorePassword\"\n                                    label=\"Truststore Password\"\n                                    type=\"password\"\n                                    placeholder=\"Truststore Password\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"uploadTruststore\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Upload\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass CertificateUploadForm extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {success: false};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n        this.upload = this.upload.bind(this);\n        this.handleCreateResponse = this.handleCreateResponse.bind(this);\n    }\n\n    async upload(e)\n    {\n        e.preventDefault();\n        this.setState({\n            addedAlias: undefined\n        });\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateResponse(response);\n    }\n\n\n    handleCreateResponse(response)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                let certificateUploadResponse = resource.certificateUploadResponse;\n\n                let addedAlias;\n                new Optional(certificateUploadResponse).ifPresent(response =>\n                {\n                    addedAlias = response.alias;\n                })\n\n                this.setState({\n                    addedAlias: addedAlias\n                });\n\n                this.props.onUploadSuccess(addedAlias);\n            })\n            this.setState({success: true});\n        }\n        else\n        {\n            this.setState({success: false});\n        }\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2>Certificate Upload</h2>\n                <Alert id={\"certificateUploadForm-alert-success\"}\n                       variant={\"success\"}\n                       show={new Optional(this.state.addedAlias).isPresent()}>\n                    <Form.Text><GoThumbsup /> Entry with alias '{this.state.addedAlias}' was successfully\n                                              added</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form id={\"certificateUploadForm\"} onSubmit={this.upload} ref={this.formReference}>\n                    <FormFileField name=\"certificateUpload.certificateFile\"\n                                   label=\"Certificate File\"\n                                   placeholder=\"Select a certificate file\"\n                                   onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"certificateUpload.alias\"\n                                    label=\"Alias\"\n                                    placeholder=\"Certificate Alias\"\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"uploadCertificate\"} type=\"Save\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}\n\nclass CertificateEntryList extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {aliases: []};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.onDeleteSuccess = this.onDeleteSuccess.bind(this);\n        this.downloadTruststore = this.downloadTruststore.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let response = await this.scimClient.listResources();\n        if (response.success)\n        {\n            response.resource.then(listResponse =>\n            {\n                let aliases = new Optional(listResponse.Resources[0]).map(val => val.aliases).orElse([]);\n                aliases.sort();\n                this.setState({\n                    aliases: aliases\n                })\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (new Optional(this.props.newAliases).isPresent() && prevProps.newAliases !== this.props.newAliases)\n        {\n            let aliases = this.state.aliases.concat(this.props.newAliases);\n            aliases.sort();\n            this.setState({aliases: aliases, aliasDeleted: undefined});\n        }\n    }\n\n    onDeleteSuccess(alias)\n    {\n        let aliases = this.state.aliases;\n        const indexOfAlias = aliases.indexOf(alias)\n        if (indexOfAlias > -1)\n        {\n            aliases.splice(indexOfAlias, 1);\n        }\n        this.setState({\n            aliasDeleted: alias,\n            aliases: aliases\n        })\n    }\n\n    downloadTruststore(e)\n    {\n        e.preventDefault();\n        this.setState({downloading: true})\n        this.scimClient.getResource(\"1\", TRUSTSTORE_ENDPOINT, {attributes: \"applicationTruststore\"}).then(response =>\n        {\n            this.setState({downloading: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    let base64ApplicationTruststore = resource.applicationTruststore;\n                    downloadBase64Data(base64ApplicationTruststore, \"application-truststore-pw-123456.jks\", \"jks\")\n                })\n            }\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <h2 id=\"application-certificate-info-header\">\n                    <p>Application Truststore Infos</p>\n                    <Badge className=\"download-keystore-icon\">\n                        <a id={\"truststore-download-link\"} href={\"/#\"} onClick={this.downloadTruststore}>\n                            <LoadingSpinner show={this.state.downloading || false} />\n                            <Image src={downloadIcon} fluid />\n                            <p>Download</p>\n                        </a>\n                    </Badge>\n                </h2>\n                <Alert id=\"card-list-infos-alert\"\n                       variant={\"info\"}>\n                    <Form.Text>\n                        <InfoCircle /> Application Truststore contains\n                                       \"{new Optional(this.state.aliases).map(val => val.length)\n                                                                         .orElse(0)}\"\n                                       entries\n                    </Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={this.state.aliasDeleted !== undefined}>\n                    <Form.Text>\n                        <GoThumbsup /> Key entry for alias \"{this.state.aliasDeleted}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <CertificateList certificateAliases={this.state.aliases}\n                                 scimResourcePath={this.props.scimResourcePath}\n                                 onDeleteSuccess={this.onDeleteSuccess} />\n            </React.Fragment>\n        );\n    }\n}","import React, {createRef} from \"react\";\nimport ScimClient from \"../../scim/scim-client\";\nimport Modal from \"../../base/modal\";\nimport {Alert, Card, CardDeck, Table} from \"react-bootstrap\";\nimport {FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {Optional} from \"../../services/utils\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    ErrorMessagesAlert,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../../base/form-base\";\nimport * as lodash from \"lodash\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimComponentBasics from \"../../scim/scim-component-basics\";\n\n\nexport default class ProxyManagement extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            proxyList: [],\n            showSpinner: false\n        }\n        this.scimResourcePath = \"/scim/v2/Proxy\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewProxy = this.addNewProxy.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.addProxy = this.addProxy.bind(this);\n        this.removeProxy = this.removeProxy.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = new Optional((this.state.currentPage * window.MAX_RESULTS) + 1).filter(val => !isNaN(val))\n                                                                                        .orElse(1);\n        let count = window.MAX_RESULTS;\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'id'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.proxyList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    proxyList: concatedResources,\n                    errors: {},\n                    newProxy: undefined,\n                    deletedProxyId: undefined\n                })\n            })\n        });\n    }\n\n    addNewProxy()\n    {\n        let proxyList = [...this.state.proxyList];\n        const resource = proxyList.filter(proxy => proxy.id === undefined);\n        if (resource.length === 0)\n        {\n            proxyList.unshift({});\n            this.setState({\n                proxyList: proxyList,\n                newProxy: undefined,\n                deletedProxyId: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newProxy: undefined,\n                deletedProxyId: undefined\n            })\n        }\n    }\n\n    onUpdateSuccess(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        let oldProxy = lodash.find(proxyList, p => p.id === proxy.id);\n        lodash.merge(oldProxy, proxy);\n        this.setState({\n            proxyList: proxyList,\n            newProxy: undefined,\n            deletedProxyId: undefined\n        })\n    }\n\n    onCreateSuccess(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        let oldProxy = lodash.find(proxyList, p => p.id === undefined);\n        lodash.merge(oldProxy, proxy);\n        this.setState({\n            proxyList: proxyList,\n            newProxy: oldProxy,\n            deletedProxyId: undefined\n        })\n    }\n\n    addProxy(proxy)\n    {\n        let proxyList = [...this.state.proxyList];\n        proxyList.unshift(proxy);\n\n        this.setState({\n            proxyList: proxyList,\n            newProxy: undefined,\n            deletedProxyId: undefined\n        })\n    }\n\n    removeProxy(id)\n    {\n        let proxyList = [...this.state.proxyList];\n        const newProxyList = proxyList.filter(proxy => proxy.id !== id)\n        this.setState({\n            proxyList: newProxyList,\n            newProxy: undefined,\n            deletedProxyId: id,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <p className={\"add-new-resource\"} onClick={this.addNewProxy}>\n                    <span className={\"add-new-resource\"}>Add new Proxy <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>Proxies</h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newProxy).isPresent()}>\n                    <Form.Text><GoThumbsup /> Proxy with id\n                                              '{new Optional(this.state.newProxy).map(proxy => proxy.id)\n                                                                                 .orElse(-1)}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedProxyId).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> Proxy with ID \"{this.state.deletedProxyId}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.proxyList.map((proxy) =>\n                        {\n                            return <ProxyCardEntry key={new Optional(proxy.id).orElse(\"new\")}\n                                                   scimResourcePath={this.scimResourcePath}\n                                                   proxy={proxy}\n                                                   onCreateSuccess={this.onCreateSuccess}\n                                                   onUpdateSuccess={this.onUpdateSuccess}\n                                                   onDeleteSuccess={this.removeProxy} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n\n}\n\nclass ProxyCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.proxy).map(val => val.id).map(val => false).orElse(true),\n            proxy: JSON.parse(JSON.stringify(props.proxy))\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.proxy,\n            getCurrentResource: () => this.state.proxy,\n            setCurrentResource: resource => this.setState({proxy: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n    render()\n    {\n        return (\n            <Card id={\"proxy-card-\" + this.state.proxy.id} key={this.state.proxy.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card provider-card\"}>\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.proxy.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete Proxy with ID '\" + this.state.proxy.id + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success-\" + this.state.proxy.id} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> Proxy was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"proxy-card-header-\" + this.state.proxy.id}>\n                        <div className={\"card-name-header\"}>\n                            {\n                                this.state.proxy.id !== undefined &&\n                                <h5>Proxy '{this.state.proxy.id}'</h5>\n                            }\n                        </div>\n                        <CardControlIcons resource={this.state.proxy}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.scimComponentBasics.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <ModifiableCardEntry header={\"Hostname\"}\n                                                         name={\"hostname\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.hostname}\n                                                         placeholder={\"The URL to the OpenID Providers discovery endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Port\"}\n                                                         name={\"port\"}\n                                                         type={\"number\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.port}\n                                                         placeholder={\"The port number of the Proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Username\"}\n                                                         name={\"username\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.username}\n                                                         placeholder={\"The username to authenticate at the proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <ModifiableCardEntry header={\"Password\"}\n                                                         name={\"password\"}\n                                                         resourceId={this.state.proxy.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.proxy.password}\n                                                         placeholder={\"The password to authenticate at the Proxy\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardDateRows resource={this.state.proxy} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n","import React from \"react\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport ApplicationKeystore from \"./application-keystore\";\nimport ApplicationTruststore from \"./application-truststore\";\nimport ProxyManagement from \"./proxy-management\";\n\nexport default function SystemOverview()\n{\n    return (\n        <Tabs defaultActiveKey=\"keystore\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"keystore\" title=\"Application Keystore\">\n                <ApplicationKeystore />\n            </Tab>\n            <Tab eventKey=\"truststore\" title=\"Application Truststore\">\n                <ApplicationTruststore />\n            </Tab>\n            <Tab eventKey=\"proxies\" title=\"Proxies\">\n                <ProxyManagement />\n            </Tab>\n        </Tabs>\n    )\n}\n","import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Optional} from \"../services/utils\";\nimport {Alert, Card, CardDeck, Nav, Table} from \"react-bootstrap\";\nimport {ArrowRightCircle, FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    ErrorMessagesAlert,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../base/form-base\";\nimport * as lodash from \"lodash\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport Modal from \"../base/modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {CardInputField} from \"../base/card-base\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\nexport default class OpenidProvider extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            errors: {},\n            providerList: [],\n            currentPage: 0\n        };\n        this.scimResourcePath = \"/scim/v2/OpenIdProvider\";\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewProvider = this.addNewProvider.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.removeProvider = this.removeProvider.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = (this.state.currentPage * this.props.serviceProviderConfig.filter.maxResults) + 1;\n        let count = this.props.serviceProviderConfig.filter.maxResults;\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'name'\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.providerList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    providerList: concatedResources,\n                    errors: {}\n                })\n            })\n        });\n    }\n\n    addNewProvider()\n    {\n        let providerList = [...this.state.providerList];\n        const resource = providerList.filter(provider => provider.id === undefined);\n        if (resource.length === 0)\n        {\n            providerList.unshift({});\n            this.setState({\n                providerList: providerList,\n                newProvider: undefined,\n                deletedProviderName: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newProvider: undefined,\n                deletedProviderName: undefined\n            })\n        }\n    }\n\n    onUpdateSuccess(provider)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = lodash.find(providerList, p => p.id === provider.id);\n        lodash.merge(oldProvider, provider);\n        this.setState({\n            providerList: providerList,\n            newProvider: undefined,\n            deletedProviderName: undefined\n        })\n    }\n\n    onCreateSuccess(provider)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = lodash.find(providerList, p => p.id === undefined);\n        lodash.merge(oldProvider, provider);\n        this.setState({\n            providerList: providerList,\n            newProvider: oldProvider,\n            deletedProviderName: undefined\n        })\n    }\n\n    removeProvider(id)\n    {\n        let providerList = [...this.state.providerList];\n        let oldProvider = providerList.filter(provider => provider.id === id)[0];\n        lodash.remove(providerList, provider => provider.id === id);\n        this.setState({\n            providerList: providerList,\n            newProvider: undefined,\n            deletedProviderName: oldProvider.name,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n\n                <p className={\"add-new-resource\"} onClick={this.addNewProvider}>\n                    <span className={\"add-new-resource\"}>Add new Provider <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>\n                    <span>OpenID Provider List</span>\n                </h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newProvider).isPresent()}>\n                    <Form.Text><GoThumbsup /> Provider with name\n                                              '{new Optional(this.state.newProvider).map(provider => provider.name)\n                                                                                    .orElse(\"-\")}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedProviderName).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> OpenID Provider \"{this.state.deletedProviderName}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.providerList.map((provider) =>\n                        {\n                            return <OpenIdProviderCardEntry key={new Optional(provider.id).orElse(\"new\")}\n                                                            scimResourcePath={this.scimResourcePath}\n                                                            provider={provider}\n                                                            onCreateSuccess={this.onCreateSuccess}\n                                                            onUpdateSuccess={this.onUpdateSuccess}\n                                                            onDeleteSuccess={this.removeProvider} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        );\n    }\n}\n\nclass OpenIdProviderCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.provider).map(val => val.id).map(val => false).orElse(true),\n            provider: JSON.parse(JSON.stringify(props.provider))\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.provider,\n            getCurrentResource: () => this.state.provider,\n            setCurrentResource: resource => this.setState({provider: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n\n    render()\n    {\n        return (\n            <Card id={\"provider-card-\" + this.state.provider.id} key={this.state.provider.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card provider-card\"}>\n                <Nav className=\"flex-column\">\n                </Nav>\n\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.provider.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete OpenID Provider with name '\" + this.state.provider.name + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success\"} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> OpenID Provider was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"provider-card-header-\" + this.state.provider.id}>\n                        <div className={\"card-name-header\"}>\n                            {\n                                this.state.editMode === false &&\n                                <React.Fragment>\n                                    <LinkContainer exact\n                                                   to={\"/views/openIdProvider/\" + this.props.provider.id + \"/openIdClients\"}>\n                                        <a href={\"/#\"}>\n                                            <h5>\n                                                <ArrowRightCircle style={{color: \"bisque\", marginRight: \"15px\"}}\n                                                                  size={\"20px\"} height={\"30px\"} />\n                                                {this.state.provider.name}\n                                            </h5>\n                                        </a>\n                                    </LinkContainer>\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.editMode === true &&\n                                <CardInputField\n                                    value={new Optional(this.state.provider.name).orElse(\"\")}\n                                    type={\"text\"}\n                                    id={\"name-\" + this.state.provider.id}\n                                    name={\"name\"}\n                                    placeholder={\"OpenID Provider identifier\"}\n                                    onChange={this.scimComponentBasics.updateInput}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n                            }\n                        </div>\n                        <CardControlIcons resource={this.state.provider}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.scimComponentBasics.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <ModifiableCardEntry header={\"Discovery Endpoint\"}\n                                                         name={\"discoveryEndpoint\"}\n                                                         resourceId={this.state.provider.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.provider.discoveryEndpoint}\n                                                         placeholder={\"The URL to the OpenID Providers discovery endpoint\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardDateRows resource={this.state.provider} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        )\n    }\n}\n","import React, {createRef} from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Form from \"react-bootstrap/Form\";\nimport {ErrorListItem, FormCheckbox, FormInputField, LoadingSpinner} from \"../base/form-base\";\nimport Button from \"react-bootstrap/Button\";\nimport {Optional} from \"../services/utils\";\nimport {Alert, Col, Container, Dropdown, DropdownButton, OverlayTrigger, Row, Tooltip} from \"react-bootstrap\";\nimport * as lodash from \"lodash\";\n\nexport default class JwtBuilder extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            jwtBuilder: {},\n            header: {},\n            body: {},\n            addX5Sha256tHeader: false\n        }\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(\"/scim/v2/JwtBuilder\", this.setState);\n        this.formReference = createRef();\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.handleKeySelectionSelection = this.handleKeySelectionSelection.bind(this);\n        this.handleSignatureAlgorithmSelection = this.handleSignatureAlgorithmSelection.bind(this);\n        this.handleEncryptionAlgorithmSelection = this.handleEncryptionAlgorithmSelection.bind(this);\n        this.handleContentEncryptionAlgorithmSelection = this.handleContentEncryptionAlgorithmSelection.bind(this);\n        this.handleHeaderChange = this.handleHeaderChange.bind(this);\n        this.handleBodyChange = this.handleBodyChange.bind(this);\n        this.addJwtBody = this.addJwtBody.bind(this);\n        this.addDefaultJwtAttributes = this.addDefaultJwtAttributes.bind(this);\n        this.addKeyIdToHeader = this.addKeyIdToHeader.bind(this);\n        this.handleAddSha256Thumbprint = this.handleAddSha256Thumbprint.bind(this);\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.jwtBuilder,\n            getCurrentResource: () => this.state.jwtBuilder,\n            setCurrentResource: resource =>\n            {\n            },\n            setState: this.setState,\n            onCreateSuccess: this.onCreateSuccess\n        });\n    }\n\n    componentDidMount()\n    {\n        this.addHeader();\n        this.addDefaultJwtAttributes();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.jwtInfo !== this.props.jwtInfo && this.props.jwtInfo !== undefined)\n        {\n            this.handleSignatureAlgorithmSelection(this.props.jwtInfo.signatureAlgorithms[0])\n            this.addHeader();\n        }\n    }\n\n    onCreateSuccess(resource)\n    {\n        let jwtArea = document.getElementById(\"jwt\");\n        jwtArea.value = resource.jwt;\n\n        this.setState({header: JSON.parse(resource.header)});\n        this.addHeader();\n    }\n\n    async handleKeySelectionSelection(value)\n    {\n        await this.setState({selectedKey: value})\n        let hiddenKeyIdInputField = document.getElementById(\"keyId\");\n        hiddenKeyIdInputField.value = value;\n    }\n\n    addKeyIdToHeader()\n    {\n        let header = this.state.header;\n        header[\"kid\"] = this.state.selectedKey\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleSignatureAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"alg\"] = value\n        header[\"enc\"] = undefined\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleEncryptionAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"alg\"] = value\n        header[\"enc\"] = new Optional(this.state.header.enc).orElse(new Optional(this.state.jwtInfo)\n            .map(val => val.encryptionAlgorithms[0]).orElse(\"\"));\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleContentEncryptionAlgorithmSelection(value)\n    {\n        let header = this.state.header;\n        header[\"enc\"] = value\n        this.setState({header: header})\n        this.addHeader();\n    }\n\n    handleHeaderChange(e)\n    {\n        try\n        {\n            let header = JSON.parse(e.target.value);\n            this.setState({header: header})\n        } catch (Exception)\n        {\n        }\n    }\n\n    handleBodyChange(e)\n    {\n        try\n        {\n            let body = JSON.parse(e.target.value);\n            this.setState({body: body})\n        } catch (Exception)\n        {\n        }\n    }\n\n    addHeader()\n    {\n        let headerArea = document.getElementById(\"jwt-builder-header\");\n        headerArea.value = JSON.stringify(this.state.header, undefined, 4);\n    }\n\n    async addDefaultJwtAttributes()\n    {\n        let body = {\n            iss: new Optional(this.state.body.iss).orElse(\"\"),\n            aud: new Optional(this.state.body.aud).orElse(\"\"),\n            sub: new Optional(this.state.body.sub).orElse(\"\"),\n            iat: new Date().getTime(),\n            exp: new Date().getTime() + (3600 * 24),\n            jti: new Optional(this.state.body.jti).orElse(\"\")\n        }\n        let mergedBody = lodash.merge(this.state.body, body)\n\n        await this.setState({body: mergedBody});\n        this.addJwtBody();\n    }\n\n    addJwtBody()\n    {\n        let bodyArea = document.getElementById(\"jwt-builder-body\");\n        bodyArea.value = JSON.stringify(this.state.body, undefined, 4);\n    }\n\n    handleAddSha256Thumbprint(event)\n    {\n        let isSelected = event.target.checked;\n        this.setState({addX5Sha256tHeader: isSelected});\n    }\n\n    render()\n    {\n        let kidMatchesHeader = this.state.selectedKey === this.state.header.kid;\n\n        return (\n            <Container>\n                <Row>\n                    <Col sm={12}>\n                        {\n                            ((this.state.errors || {}).errorMessages || []).length > 0 &&\n                            <Alert variant={\"danger\"}>\n                                <ul className=\"error-list\">\n                                    {this.state.errors.errorMessages.map((message, index) =>\n                                        <ErrorListItem key={\"error-message-\" + index} message={message} />)}\n                                </ul>\n                            </Alert>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Dropdown>\n                            <DropdownButton id={\"jwt-builder-aliases\"}\n                                            title={\"available keys\"}\n                                            onSelect={this.handleKeySelectionSelection}>\n                                {\n                                    new Optional(this.props.keyInfos).isPresent() &&\n                                    this.props.keyInfos.map((keyInfo) =>\n                                    {\n                                        return <Dropdown.Item key={keyInfo.alias}\n                                                              eventKey={keyInfo.alias}>{keyInfo.alias + \" (\"\n                                                                                        + keyInfo.keyAlgorithm\n                                                                                        + \"-\" + keyInfo.keyLength\n                                                                                        + \"-bit)\"}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                            <p>selected key:\n\n                                <OverlayTrigger\n                                    placement={\"top\"}\n                                    overlay={\n                                        <Tooltip>\n                                            Add as 'kid' to JOSE-header\n                                        </Tooltip>\n                                    }\n                                >\n                                <span className={\"code\"}\n                                      style={{\n                                          marginLeft: \"15px\",\n                                          color: kidMatchesHeader ? \"lightgreen\" : \"lightcoral\",\n                                          cursor: \"pointer\"\n                                      }}\n                                      onClick={this.addKeyIdToHeader}>\n                                   {this.state.selectedKey}\n                                </span>\n                                </OverlayTrigger>\n                            </p>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"signatureAlgorithms\"}\n                                            title={\"signature algorithms\"}\n                                            onSelect={this.handleSignatureAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).map(val => val[\"signatureAlgorithms\"]).isPresent()\n                                    &&\n                                    this.props.jwtInfo[\"signatureAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"keyWrapAlgorithms\"}\n                                            title={\"key wrap algorithms\"}\n                                            onSelect={this.handleEncryptionAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).map(val => val[\"keyWrapAlgorithms\"]).isPresent()\n                                    &&\n                                    this.props.jwtInfo[\"keyWrapAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Dropdown>\n                            <DropdownButton id={\"contentEncryptionAlgorithms\"}\n                                            title={\"content encryption algorithms\"}\n                                            onSelect={this.handleContentEncryptionAlgorithmSelection}>\n                                {\n                                    new Optional(this.props.jwtInfo).isPresent() &&\n                                    this.props.jwtInfo[\"encryptionAlgorithms\"].map((value) =>\n                                    {\n                                        return <Dropdown.Item key={value}\n                                                              eventKey={value}>{value}</Dropdown.Item>\n                                    })\n                                }\n                            </DropdownButton>\n                        </Dropdown>\n\n                        <Button type={\"button\"} className={\"functional-button\"} onClick={this.addDefaultJwtAttributes}>\n                            extend by JWT attributes\n                        </Button>\n\n                        <Form.Check onChange={this.handleAddSha256Thumbprint}\n                                    className={\"jwt sha-256-check\"}\n                                    label={\"Add SHA-256 thumbprint to header\"} />\n\n                    </Col>\n                    <Col sm={9}>\n                        <Container>                            \n                            <Row>\n                                <Col>\n                                    <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n                                        <FormInputField name=\"keyId\"\n                                                        type=\"hidden\"\n                                                        value={this.state.selectedKey || \"\"}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                        <FormCheckbox name=\"addX5Sha256tHeader\"\n                                                      type=\"hidden\"\n                                                      readOnly={true}\n                                                      checked={this.state.addX5Sha256tHeader}\n                                                      onError={fieldName => this.scimClient.getErrors(this.state,\n                                                          fieldName)} />\n                                        <FormInputField id={\"jwt-builder-header\"}\n                                                        name=\"header\"\n                                                        type=\"text\"\n                                                        as=\"textarea\"\n                                                        onChange={this.handleHeaderChange}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                        <FormInputField id={\"jwt-builder-body\"}\n                                                        name=\"body\"\n                                                        type=\"text\"\n                                                        as=\"textarea\"\n                                                        onChange={this.handleBodyChange}\n                                                        onError={fieldName => this.scimClient.getErrors(this.state,\n                                                            fieldName)} />\n                                    </Form>\n                                </Col>\n                                <Col sm={5}>\n                                    <Form.Control id={\"jwt\"}\n                                                  sm={5}\n                                                  as={\"textarea\"}\n                                                  onChange={this.handleBodyChange} />\n\n                                </Col>\n                            </Row>\n                        </Container>\n                        <Button id={\"create-jwt\"} type={\"button\"} onClick={this.scimComponentBasics.onSubmit}>\n                            <LoadingSpinner show={this.state.isLoading} /> Create\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n","import React from \"react\";\nimport './jwt-builder.css'\nimport ScimClient from \"../scim/scim-client\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport JwtParser from \"./jwt-parser\";\nimport JwtBuilder from \"./jwt-builder\";\nimport {ApplicationInfoContext} from \"../app\";\n\nexport default class JwtHandler extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(\"/scim/v2/JwtBuilder\", this.setState);\n    }\n\n    componentDidMount()\n    {\n        this.scimClient.getResource(null, \"/scim/v2/Keystore\").then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({keyInfos: listResponse.Resources[0].keyInfos});\n                })\n            }\n        });\n    }\n\n\n    render()\n    {\n        return (\n            <ApplicationInfoContext.Consumer>\n                {appInfo =>\n                    appInfo &&\n                    <Tabs defaultActiveKey=\"jwtparser\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"jwtparser\" title=\"JWT Parser\">\n                            <JwtParser keyInfos={this.state.keyInfos} jwtInfo={appInfo.jwtInfo} />\n                        </Tab>\n                        <Tab eventKey=\"jwtbuilder\" title=\"JWT Builder\">\n                            <JwtBuilder keyInfos={this.state.keyInfos} jwtInfo={appInfo.jwtInfo} />\n                        </Tab>\n                    </Tabs>\n                }\n            </ApplicationInfoContext.Consumer>\n        )\n    }\n}\n","import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Optional} from \"../services/utils\";\nimport * as lodash from \"lodash\";\nimport {ArrowLeftCircle, ArrowRightCircle, FileEarmarkPlus} from \"react-bootstrap-icons\";\nimport {Alert, Card, CardDeck, Table} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {\n    CardControlIcons,\n    CardDateRows,\n    CardListSelector,\n    CardRadioSelector,\n    ErrorMessagesAlert,\n    HiddenCardEntry,\n    LoadingSpinner,\n    ModifiableCardEntry\n} from \"../base/form-base\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport Modal from \"../base/modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {ApplicationInfoContext} from \"../app\";\nimport {OPENID_CLIENT_ENDPOINT, OPENID_PROVIDER_ENDPOINT} from \"../scim/scim-constants\";\n\n\nexport default class OpenidClients extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            errors: {},\n            clientList: [],\n            aliases: [],\n            currentPage: 0,\n            keyInfos: [],\n            provider: {}\n        };\n        this.scimResourcePath = OPENID_CLIENT_ENDPOINT;\n        this.setState = this.setState.bind(this);\n        this.scimClient = new ScimClient(this.scimResourcePath, this.setState);\n        this.addNewClient = this.addNewClient.bind(this);\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n        this.onCreateSuccess = this.onCreateSuccess.bind(this);\n        this.removeClient = this.removeClient.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let startIndex = (this.state.currentPage * this.props.serviceProviderConfig.filter.maxResults) + 1;\n        let count = this.props.serviceProviderConfig.filter.maxResults;\n\n        let openIdProviderId = this.props.match.params.id;\n        let openIdProviderResourcePath = OPENID_PROVIDER_ENDPOINT;\n        await this.scimClient.getResource(openIdProviderId, openIdProviderResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(openIdProvider =>\n                {\n                    this.setState({provider: openIdProvider});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n\n        await this.scimClient.listResources({\n            startIndex: startIndex,\n            count: count,\n            sortBy: 'clientId',\n            filter: 'openIDProviderId eq ' + openIdProviderId\n        }).then(listResponse =>\n        {\n            listResponse.resource.then(listResponse =>\n            {\n                let newResources = new Optional(listResponse.Resources).orElse([]);\n                let oldResources = new Optional(this.state.clientList).orElse([]);\n                let concatedResources = lodash.concat(oldResources, newResources);\n                this.setState({\n                    clientList: concatedResources,\n                    errors: {}\n                })\n            })\n        });\n\n        this.loadKeystoreInfos();\n    }\n\n    async loadKeystoreInfos()\n    {\n        let keystoreResourcePath = \"/scim/v2/Keystore\";\n        this.scimClient.getResource(undefined, keystoreResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({\n                        keyInfos: new Optional(listResponse).map(lr => lr.Resources).map(r => r[0]).map(\n                            keystore => keystore.keyInfos).orElse([])\n                    });\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n    }\n\n    addNewClient()\n    {\n        let clientList = [...this.state.clientList];\n        const resource = clientList.filter(client => client.id === undefined);\n        if (resource.length === 0)\n        {\n            clientList.unshift({});\n            this.setState({\n                clientList: clientList,\n                newClient: undefined,\n                deletedClientId: undefined\n            })\n        }\n        else\n        {\n            this.setState({\n                errors: {\n                    errorMessages: [\"There is already a new form available in the view.\"]\n                },\n                newClient: undefined,\n                deletedClientId: undefined\n            })\n        }\n    }\n\n    onCreateSuccess(client)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = lodash.find(clientList, c => c.id === undefined);\n        lodash.merge(oldClient, client);\n        this.setState({\n            providerList: clientList,\n            newProvider: oldClient,\n            deletedClientId: undefined\n        })\n    }\n\n    onUpdateSuccess(client)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = lodash.find(clientList, p => p.id === client.id);\n        lodash.merge(oldClient, client);\n        this.setState({\n            clientList: clientList,\n            newProxy: undefined,\n            deletedClientId: undefined\n        })\n    }\n\n    removeClient(id)\n    {\n        let clientList = [...this.state.clientList];\n        let oldClient = clientList.filter(client => client.id === id)[0];\n        lodash.remove(clientList, client => client.id === id);\n        this.setState({\n            clientList: clientList,\n            newClient: undefined,\n            deletedClientId: oldClient.clientId,\n            errors: {}\n        })\n    }\n\n    render()\n    {\n        return (\n            <React.Fragment>\n                <LinkContainer exact\n                               to={\"/views/openIdProvider/\"}>\n                    <a href={\"/#\"}>\n                        <h5 style={{height: \"35px\", padding: \"0\", paddingLeft: \"10px\"}}>\n                            <ArrowLeftCircle style={{color: \"bisque\"}} height={\"35px\"} size={\"25px\"} />\n                            <span style={{marginLeft: \"15px\"}}>Back to Provider Overview</span>\n                        </h5>\n                    </a>\n                </LinkContainer>\n\n                <h5>Provider: <span style={{color: \"lightgray\"}}>{this.state.provider.name}</span></h5>\n\n                <p className={\"add-new-resource\"} onClick={this.addNewClient}>\n                    <span className={\"add-new-resource\"}>Add new Client <br /><FileEarmarkPlus /></span>\n                </p>\n                <h2>\n                    <span>OpenID Client List</span>\n                </h2>\n                <Alert id={\"save-alert-success\"} variant={\"success\"}\n                       show={new Optional(this.state.newClient).isPresent()}>\n                    <Form.Text><GoThumbsup /> Client with clientId\n                                              '{new Optional(this.state.newClient).map(client => client.clientId)\n                                                                                  .orElse(\"-\")}'\n                                              was successfully created</Form.Text>\n                </Alert>\n                <Alert id=\"card-list-deletion-success\"\n                       variant={\"success\"}\n                       show={new Optional(this.state.deletedClientId).isPresent()}>\n                    <Form.Text>\n                        <GoThumbsup /> OpenID Client \"{this.state.deletedClientId}\" was successfully deleted\n                    </Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <CardDeck>\n                    {\n                        this.state.clientList.map((client) =>\n                        {\n                            return <OpenIdClientCardEntry key={new Optional(client.id).orElse(\"new\")}\n                                                          provider={this.state.provider}\n                                                          scimResourcePath={this.scimResourcePath}\n                                                          client={client}\n                                                          keyInfos={this.state.keyInfos}\n                                                          onCreateSuccess={this.onCreateSuccess}\n                                                          onUpdateSuccess={this.onUpdateSuccess}\n                                                          onDeleteSuccess={this.removeClient} />\n                        })\n                    }\n                </CardDeck>\n            </React.Fragment>\n        )\n    }\n}\n\nclass OpenIdClientCardEntry extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            showModal: false,\n            editMode: new Optional(props.client).map(val => val.id).map(val => false).orElse(true),\n            authenticationType: props.client.authenticationType,\n            client: JSON.parse(JSON.stringify(props.client))\n        }\n        this.setState = this.setState.bind(this);\n        this.resetEditMode = this.resetEditMode.bind(this);\n        this.scimClient = new ScimClient(this.props.scimResourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => this.props.client,\n            getCurrentResource: () => this.state.client,\n            setCurrentResource: resource => this.setState({client: resource}),\n            setState: this.setState,\n            onCreateSuccess: this.props.onCreateSuccess,\n            onUpdateSuccess: this.props.onUpdateSuccess,\n            onDeleteSuccess: this.props.onDeleteSuccess\n        });\n    }\n\n    async resetEditMode()\n    {\n        this.scimComponentBasics.resetEditMode();\n        let client = JSON.parse(JSON.stringify(this.props.client));\n        await this.setState({client: client, authenticationType: client.authenticationType});\n    }\n\n    render()\n    {\n        let aliases = [];\n        this.props.keyInfos.forEach(keyInfo =>\n        {\n            if (keyInfo.hasPrivateKey === true)\n            {\n                aliases.push(keyInfo.alias);\n            }\n        });\n        return (\n            <Card id={\"client-card-\" + this.state.client.id} key={this.state.client.id}\n                  border={\"warning\"} bg={\"dark\"} className={\"resource-card client-card\"}>\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n\n                    <Modal id={\"delete-dialog-\" + this.state.client.id}\n                           show={this.state.showModal}\n                           variant=\"danger\"\n                           title={\"Delete OpenID Client with clientId '\" + this.state.client.clientId + \"'\"}\n                           message=\"Are you sure?\"\n                           submitButtonText=\"delete\"\n                           onSubmit={this.scimComponentBasics.deleteResource}\n                           cancelButtonText=\"cancel\"\n                           onCancel={() => this.scimComponentBasics.setStateValue(\"showModal\", false)}>\n                    </Modal>\n\n                    <Alert id={\"save-alert-success\"} variant={\"success\"}\n                           show={new Optional(this.state.success).orElse(false)}>\n                        <Form.Text><GoThumbsup /> OpenID Client was successfully updated</Form.Text>\n                    </Alert>\n\n                    <ErrorMessagesAlert errors={this.state.errors} />\n\n                    <Card.Header id={\"client-card-header-\" + this.state.client.id}>\n                        <div className={\"card-name-header\"}>\n                            <div className={\"card-name-header\"}>\n                                {\n                                    this.state.client.clientId !== undefined &&\n                                    <LinkContainer exact\n                                                   to={\"/views/openIdProvider/\" + this.props.provider.id + \"/client/\"\n                                                       + this.state.client.id}>\n                                        <a href={\"/#\"}>\n                                            <h5>\n                                                <ArrowRightCircle style={{color: \"bisque\", marginRight: \"15px\"}}\n                                                                  size={\"20px\"} height={\"30px\"} />\n                                                Client '{this.state.client.clientId}'\n                                            </h5>\n                                        </a>\n                                    </LinkContainer>\n                                }\n                            </div>\n                        </div>\n                        <CardControlIcons resource={this.state.client}\n                                          spinner={<LoadingSpinner show={this.state.showSpinner} />}\n                                          editMode={this.state.editMode}\n                                          createResource={this.scimComponentBasics.createResource}\n                                          updateResource={this.scimComponentBasics.updateResource}\n                                          resetEditMode={this.resetEditMode}\n                                          edit={() => this.scimComponentBasics.setStateValue(\"editMode\", true)}\n                                          showModal={() => this.scimComponentBasics.setStateValue(\"showModal\", true)} />\n                        {/* this button enables pressing enter in the edit form */}\n                        <Button id={\"upload\"} type=\"submit\" hidden={true} />\n                    </Card.Header>\n\n                    <Card.Body>\n                        <React.Fragment>\n                            <Table size=\"sm\" variant=\"dark\" borderless striped>\n                                <tbody>\n                                    <HiddenCardEntry name=\"openIdProviderId\"\n                                                     type=\"number\"\n                                                     value={this.props.provider.id}\n                                                     onError={fieldName => this.scimClient.getErrors(this.state,\n                                                         fieldName)} />\n                                    <ModifiableCardEntry header={\"Client ID\"}\n                                                         name={\"clientId\"}\n                                                         resourceId={this.state.client.id}\n                                                         editMode={this.state.editMode}\n                                                         resourceValue={this.state.client.clientId}\n                                                         placeholder={\"The identifier for this client at its OpenID Provider\"}\n                                                         onChange={this.scimComponentBasics.updateInput}\n                                                         onError={fieldName => this.scimClient.getErrors(\n                                                             this.state, fieldName)} />\n                                    <CardRadioSelector header={\"Authentication Type\"}\n                                                       name={\"authenticationType\"}\n                                                       editMode={this.state.editMode}\n                                                       selections={[\"basic\", \"jwt\"]}\n                                                       selected={new Optional(this.state.authenticationType).orElse(\n                                                           \"basic\")}\n                                                       onChange={e =>\n                                                       {\n                                                           this.scimComponentBasics.updateInput(e.target.name,\n                                                               e.target.value);\n                                                           this.setState({authenticationType: e.target.value})\n                                                       }}\n                                                       onError={fieldName => this.scimClient.getErrors(this.state,\n                                                           fieldName)}\n                                    />\n                                    {\n                                        (this.state.authenticationType === undefined ||\n                                            this.state.authenticationType === \"basic\") &&\n                                        <ModifiableCardEntry header={\"Client Secret\"}\n                                                             name={\"clientSecret\"}\n                                                             resourceId={this.state.client.id}\n                                                             editMode={this.state.editMode}\n                                                             resourceValue={this.state.client.clientSecret}\n                                                             placeholder={\"The password to access the OpenID Providers token endpoint\"}\n                                                             onChange={this.scimComponentBasics.updateInput}\n                                                             onError={fieldName => this.scimClient.getErrors(\n                                                                 this.state, fieldName)} />\n\n                                    }\n                                    {\n                                        this.state.authenticationType === \"jwt\" &&\n                                        <React.Fragment>\n                                            <CardListSelector header={\"Signature Key Reference\"}\n                                                              name={\"signingKeyRef\"}\n                                                              editMode={this.state.editMode}\n                                                              selections={[\"\", ...aliases]}\n                                                              selected={this.state.client.signingKeyRef}\n                                                              onChange={e => this.scimComponentBasics.updateInput(\n                                                                  e.target.name, e.target.value)}\n                                                              onError={fieldName => this.scimClient.getErrors(\n                                                                  this.state, fieldName)}\n\n                                            />\n                                            <ApplicationInfoContext.Consumer>\n                                                {appInfo =>\n                                                    <CardListSelector header={\"JWT Signature Algorithm\"}\n                                                                      name={\"signatureAlgorithm\"}\n                                                                      editMode={this.state.editMode}\n                                                                      selections={[\"\",\n                                                                                   ...appInfo.jwtInfo.signatureAlgorithms]}\n                                                                      selected={this.state.client.signatureAlgorithm}\n                                                                      onChange={e => this.scimComponentBasics.updateInput(\n                                                                          e.target.name, e.target.value)}\n                                                                      onError={fieldName => this.scimClient.getErrors(\n                                                                          this.state, fieldName)}\n\n                                                    />\n                                                }\n                                            </ApplicationInfoContext.Consumer>\n                                            <ModifiableCardEntry header={\"Audience\"}\n                                                                 name={\"audience\"}\n                                                                 resourceId={this.state.client.audience}\n                                                                 editMode={this.state.editMode}\n                                                                 resourceValue={this.state.client.audience}\n                                                                 placeholder={\"audience value that should match the providers issuer-value\"}\n                                                                 onChange={this.scimComponentBasics.updateInput}\n                                                                 onError={fieldName => this.scimClient.getErrors(\n                                                                     this.state, fieldName)} />\n                                            <CardListSelector header={\"Decryption Key Reference\"}\n                                                              name={\"decryptionKeyRef\"}\n                                                              editMode={this.state.editMode}\n                                                              selections={[\"\", ...aliases]}\n                                                              selected={this.state.client.decryptionKeyRef}\n                                                              onChange={e => this.scimComponentBasics.updateInput(\n                                                                  e.target.name, e.target.value)}\n\n                                            />\n                                        </React.Fragment>\n                                    }\n                                    <CardDateRows resource={this.state.client} />\n                                </tbody>\n                            </Table>\n                        </React.Fragment>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n","import React, {createRef} from \"react\";\nimport ScimClient from \"../scim/scim-client\";\nimport {Alert} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {GoThumbsup} from \"react-icons/go\";\nimport {ErrorMessagesAlert, FormCheckbox, FormInputField, FormObjectList, LoadingSpinner} from \"../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ScimComponentBasics from \"../scim/scim-component-basics\";\nimport {Optional} from \"../services/utils\";\n\nexport default class HttpSettings extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n\n        let httpSettings = this.props.client['urn:ietf:params:scim:schemas:captaingoldfish:2.0:HttpClientSettings'];\n        this.state = {\n            success: false,\n            showSpinner: false,\n            settings: {},\n            proxies: [],\n            keyInfos: [],\n            originalSetting: JSON.parse(JSON.stringify(httpSettings)),\n            httpSettings: httpSettings,\n            enableHostnameVerifier: httpSettings.useHostnameVerifier\n        }\n        this.setState = this.setState.bind(this);\n        let resourcePath = \"/scim/v2/HttpClientSettings\";\n        this.scimClient = new ScimClient(resourcePath, this.setState);\n        this.formReference = createRef();\n\n        this.scimComponentBasics = new ScimComponentBasics({\n            scimClient: this.scimClient,\n            formReference: this.formReference,\n            getOriginalResource: () => new Optional(this.state.originalSetting).orElse({}),\n            getCurrentResource: () => this.state.httpSettings,\n            setCurrentResource: resource => this.setState({client: resource}),\n            setState: this.setState,\n            onCreateSuccess: (resource) => console.error(\"create must not be called!\"),\n            onUpdateSuccess: this.onUpdateSuccess\n        });\n\n        this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        await this.loadProxies();\n        await this.loadKeystoreInfos();\n    }\n\n    async loadProxies()\n    {\n        let proxyResourcePath = \"/scim/v2/Proxy\";\n        await new ScimClient(proxyResourcePath, this.setState).listResources().then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({proxies: listResponse.Resources || []});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n    }\n\n    async loadKeystoreInfos()\n    {\n        let keystoreResourcePath = \"/scim/v2/Keystore\";\n        this.scimClient.getResource(undefined, keystoreResourcePath).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(listResponse =>\n                {\n                    this.setState({\n                        keyInfos: new Optional(listResponse).map(lr => lr.Resources).map(r => r[0]).map(\n                            keystore => keystore.keyInfos).orElse([])\n                    });\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        })\n    }\n\n    onUpdateSuccess()\n    {\n\n    }\n\n    render()\n    {\n        let proxies = [];\n        this.state.proxies.forEach(proxy =>\n        {\n            proxies.push({id: proxy.id, value: proxy.hostname + \":\" + proxy.port});\n        });\n\n        let aliases = [];\n        this.state.keyInfos.forEach(keyInfo =>\n        {\n            if (keyInfo.hasPrivateKey === true)\n            {\n                aliases.push({\n                    id: keyInfo.alias,\n                    value: keyInfo.alias + \" (\" + keyInfo.keyAlgorithm + \"-\" + keyInfo.keyLength + \")\"\n                });\n            }\n        });\n\n        return (\n            <React.Fragment>\n                <h2>Http Client Settings for {this.props.client.clientId}</h2>\n                <Alert id={\"uploadForm-alert-success\"} variant={\"success\"} show={this.state.success}>\n                    <Form.Text><GoThumbsup /> Http Client Settings were successfully saved</Form.Text>\n                </Alert>\n                <ErrorMessagesAlert errors={this.state.errors} />\n                <Form onSubmit={this.scimComponentBasics.onSubmit} ref={this.formReference}>\n                    <FormInputField name=\"id\"\n                                    isHidden={true}\n                                    type=\"string\"\n                                    readOnly={true}\n                                    value={this.state.httpSettings.id}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"openIdClientReference\"\n                                    isHidden={true}\n                                    type=\"number\"\n                                    readOnly={true}\n                                    value={new Optional(this.props.client.id).orElse(\"\")}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"requestTimeout\"\n                                    type=\"number\"\n                                    label=\"Request Timeout\"\n                                    value={this.state.httpSettings.requestTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"connectionTimeout\"\n                                    label=\"Connection Timeout\"\n                                    type=\"number\"\n                                    value={this.state.httpSettings.connectionTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormInputField name=\"socketTimeout\"\n                                    label=\"Socket Timeout\"\n                                    type=\"number\"\n                                    value={this.state.httpSettings.socketTimeout}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormCheckbox id={\"useHostnameVerifier\"}\n                                  name=\"useHostnameVerifier\"\n                                  label=\"Enable Hostname Verifier\"\n                                  checked={this.state.enableHostnameVerifier}\n                                  onChange={(e) => this.setState({enableHostnameVerifier: e.target.checked})}\n                                  onError={fieldName => this.scimClient.getErrors(this.state, fieldName)} />\n                    <FormObjectList name={\"proxyReference\"}\n                                    label={\"Proxy\"}\n                                    selections={[\"\", ...proxies]}\n                                    selected={this.state.httpSettings.proxyReference}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n                    <FormObjectList name={\"tlsClientAuthAliasReference\"}\n                                    label={\"TLS Client Auth Key Reference\"}\n                                    selections={[\"\", ...aliases]}\n                                    selected={this.state.httpSettings.tlsClientAuthAliasReference}\n                                    onChange={e => this.scimComponentBasics.updateInput(e.target.name, e.target.value)}\n                                    onError={fieldName => this.scimClient.getErrors(\n                                        this.state, fieldName)} />\n\n                    <Form.Group as={Row}>\n                        <Col sm={{span: 10, offset: 2}}>\n                            <Button id={\"upload\"} type=\"submit\">\n                                <LoadingSpinner show={this.state.isLoading} /> Save\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </React.Fragment>\n        )\n    }\n}","import React, {useState} from \"react\";\nimport {Alert, Card, Collapse} from \"react-bootstrap\";\nimport {CaretDown, CaretRight, XLg} from \"react-bootstrap-icons\";\nimport {Collapseable, ErrorListItem} from \"../../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Optional} from \"../../services/utils\";\n\n\nexport default function AccessTokenView(props)\n{\n    return <div className={\"grant-type-workflow\"}>\n        <AccessTokenCollapsible\n            header={props.header}\n            headerClass={props.headerClass}\n            content={() =>\n            {\n                return <AccessTokenDetailsView accessTokenDetails={props.accessTokenDetails} />\n            }}\n            remove={props.onRemove}>\n        </AccessTokenCollapsible>\n    </div>\n}\n\nfunction AccessTokenCollapsible(props)\n{\n    const [open, setOpen] = useState(true);\n\n    let headerClass = new Optional(props.headerClass).map(val => \" \" + val).orElse(\"\");\n\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header\" + headerClass}\n                   onClick={() =>\n                   {\n                       setOpen(!open);\n                   }}\n            >\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                {props.header}\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={\"workflow-card\"}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    );\n}\n\nexport function AccessTokenDetailsView(props)\n{\n    return <div className={\"workflow-details\"}>\n        <AccessTokenRequestView accessTokenDetails={props.accessTokenDetails} />\n        <AccessTokenResponseView accessTokenDetails={props.accessTokenDetails} />\n    </div>\n}\n\nfunction AccessTokenRequestView(props)\n{\n    let requestViewContent = function ()\n    {\n        return <React.Fragment>\n            <Collapseable header={\"Request Header\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={((props.accessTokenDetails || {})\n                                                                            .requestHeaders || [])} />} />\n            <Collapseable header={\"Request Parameter\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={((props.accessTokenDetails || {})\n                                                                            .requestParams || [])} />} />\n        </React.Fragment>\n    }\n    return <Collapseable header={\"Access Token Request Details\"}\n                         variant={\"workflow-details\"}\n                         content={requestViewContent} />\n}\n\nfunction AccessTokenResponseView(props)\n{\n\n    let responseDetails = (props.accessTokenDetails || {});\n    let responseStatusCode = responseDetails.statusCode;\n    let responseHeaders = responseDetails.responseHeaders || [];\n    let plainResponse = responseDetails.plainResponse || \"\";\n    let contentType = (responseHeaders.filter(header => header.name.toLowerCase() === \"content-type\")[0]\n                       || []).value;\n\n    let header = function ()\n    {\n        return <span>Access Token Response Details\n                <span className={\"bold\"}> (Status: {responseStatusCode})</span>\n            </span>\n    }\n    let responseViewContent = function ()\n    {\n        return <React.Fragment>\n            <Collapseable header={\"Response Header\"}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          bodyClass={\"nested-workflow-details-body\"}\n                          content={() => <NameValueList keyPrefix={\"access-token-request-header-row-\"}\n                                                        nameValueList={responseHeaders} />} />\n            <Collapseable header={\"Access Token Response\"}\n                          open={true}\n                          variant={\"workflow-details\"}\n                          headerClass={\"nested-workflow-details-header\"}\n                          content={() => <AccessTokenResponse contentType={contentType}\n                                                              tokenResponse={plainResponse} />} />\n        </React.Fragment>\n    }\n    return <Collapseable header={header()}\n                         open={true}\n                         variant={\"workflow-details\"}\n                         content={responseViewContent} />\n}\n\nfunction NameValueList(props)\n{\n    return <React.Fragment>\n        {\n            props.nameValueList.map((nameValuePair, index) =>\n            {\n                return <Row key={props.keyPrefix + index}>\n                    <Col sm={2}>{nameValuePair.name}</Col>\n                    <Col sm={10}>{nameValuePair.value}</Col>\n                </Row>\n            })\n        }\n    </React.Fragment>\n}\n\nexport class AccessTokenResponse extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {errorMessages: []}\n    }\n\n    componentDidMount()\n    {\n        this.parseJsonContent();\n    }\n\n    async parseJsonContent()\n    {\n        let isContentTypeJson = (this.props.contentType || \"\").toLowerCase().includes(\"application/json\");\n        try\n        {\n            let stateExtension = {};\n            stateExtension.json = JSON.parse(this.props.tokenResponse);\n            if (!isContentTypeJson)\n            {\n                stateExtension.errorMessages = [...this.state.errorMessages,\n                                                \"Found invalid content-type: \" + this.props.contentType\n                                                + \". Response is valid JSON but content-type header does not match.\"];\n            }\n            this.setState(stateExtension)\n        } catch (e)\n        {\n            console.error(e)\n            if (isContentTypeJson)\n            {\n                this.setState({\n                    errorMessages: [...this.state.errorMessages, \"Expected content to be JSON but could not parse it\",\n                                    e.message]\n                })\n            }\n        }\n    }\n\n    render()\n    {\n        return (\n            <div id={\"access-token-response-container\"}>\n                {\n                    this.state.errorMessages.length > 0 &&\n                    <Alert variant={\"danger\"}>\n                        <ul className=\"error-list\">\n                            {this.state.errorMessages.map((message, index) =>\n                                <ErrorListItem key={\"error-message-\" + index} message={message} />)}\n                        </ul>\n                    </Alert>\n                }\n                {\n                    this.state.json &&\n                    Object.keys(this.state.json).map((key, index) =>\n                    {\n                        return <Row key={\"access-token-response-json-param-\" + index}>\n                            <Col sm={2}>{key}</Col>\n                            <Col sm={10}> {this.state.json[key]} </Col>\n                        </Row>\n                    })\n                }\n                {\n                    !this.state.json &&\n                    <Row key={\"access-token-response-json-param-_\"}>\n                        <Col sm={2}>access_token</Col>\n                        <Col sm={10}> {this.props.tokenResponse} </Col>\n                    </Row>\n                }\n            </div>\n        )\n    }\n}","import React, {useState} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport {AlertListMessages, Collapseable, LoadingSpinner} from \"../../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport {CaretDown, CaretRight, ExclamationLg, XLg} from \"react-bootstrap-icons\";\nimport {Alert, Card, Collapse} from \"react-bootstrap\";\nimport ScimClient from \"../../scim/scim-client\";\nimport {ACCESS_TOKEN_REQUEST_ENDPOINT, AUTH_CODE_GRANT_ENDPOINT} from \"../../scim/scim-constants\";\nimport Button from \"react-bootstrap/Button\";\nimport {AccessTokenDetailsView} from \"./access-token-view\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Optional} from \"../../services/utils\";\n\nexport default class AuthorizationCodeGrantWorkflow extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.loadAuthorizationQueryParameterView = this.loadAuthorizationQueryParameterView.bind(this);\n        this.getAuthRequestStatus = this.getAuthRequestStatus.bind(this);\n        this.loadAuthorizationCodeResponseDetailsView = this.loadAuthorizationCodeResponseDetailsView.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n    }\n\n    componentWillUnmount()\n    {\n        if (this.state.interval)\n        {\n            clearInterval(this.state.interval);\n        }\n    }\n\n    componentDidMount()\n    {\n        let getAuthRequestStatus = this.getAuthRequestStatus;\n        window.open(this.props.requestDetails.authorizationCodeGrantUrl,\n            '_blank',\n            'location=yes,height=570,width=520,scrollbars=yes,status=yes');\n        this.state.interval = setInterval(function ()\n        {\n            getAuthRequestStatus();\n        }, 2000);\n    }\n\n    getAuthRequestStatus()\n    {\n        let scimClient = new ScimClient(AUTH_CODE_GRANT_ENDPOINT, this.setState);\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n        let stateParam = authCodeQueryParams.state;\n\n        let state = this.state;\n        let setState = this.setState;\n\n        scimClient.getResource(stateParam).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    clearInterval(state.interval);\n                    delete state.interval\n                    setState({\n                        authorizationResponseUrl: resource.authorizationResponseUrl\n                    });\n                })\n            }\n        });\n    }\n\n    loadAuthorizationQueryParameterView()\n    {\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n\n        let showInfoMessage = this.state.authorizationResponseUrl === undefined;\n\n        return <div className={\"workflow-details\"}>\n            <Alert variant={\"info\"} show={showInfoMessage}>\n                <ExclamationLg /> The authorization code grant will try to open a new browser window. Make sure your\n                                  popup blocker does not block this. If you closed this window before finishing the\n                                  login process. Close this workflow and start again.\n            </Alert>\n            <Collapseable header={\"Authorization Request Details\"} variant={\"workflow-details\"} content={() =>\n            {\n                return <React.Fragment>\n                    <Row>\n                        <Col sm={2} className={\"url-base-value\"}>authCodeUrl</Col>\n                        <Col sm={10}\n                             className={\"url-base-value\"}>{this.props.requestDetails.authorizationCodeGrantUrl}</Col>\n                    </Row>\n                    {\n                        Object.keys(authCodeQueryParams).map((key, index) =>\n                        {\n                            return <Row key={\"auth-code-request-row-\" + index}>\n                                <Col sm={2}>{key}</Col>\n                                <Col sm={10}>{authCodeQueryParams[key]}</Col>\n                            </Row>\n                        })\n                    }\n                </React.Fragment>\n            }} />\n        </div>\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let authorizationResponseUrl = new URL(this.state.authorizationResponseUrl);\n        const queryParamsObject = Object.fromEntries(authorizationResponseUrl.searchParams);\n        let authCodeQueryParams = Object.fromEntries(\n            new URL(this.props.requestDetails.authorizationCodeGrantUrl).searchParams);\n\n        let resource = {\n            grantType: \"authorization_code\",\n            openIdClientId: parseInt(this.props.client.id),\n            redirectUri: authCodeQueryParams.redirect_uri,\n            authorizationCode: queryParamsObject.code\n        }\n        scimClient.createResource(resource).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    this.setState({accessTokenDetails: resource})\n                })\n            }\n        });\n    }\n\n    loadAuthorizationCodeResponseDetailsView()\n    {\n        if (!this.state.authorizationResponseUrl)\n        {\n            return null;\n        }\n        let authorizationResponseUrl = new URL(this.state.authorizationResponseUrl);\n        const queryParamsObject = Object.fromEntries(authorizationResponseUrl.searchParams);\n\n        let errors = this.state.errors || {};\n        return <div className={\"workflow-details\"}>\n            {\n                <React.Fragment>\n                    <Collapseable header={\"Authorization Response Details\"}\n                                  open={true}\n                                  variant={\"workflow-details\"}\n                                  content={() =>\n                                  {\n                                      return <React.Fragment>\n                                          <Row>\n                                              <Col sm={2} className={\"url-base-value\"}>authResponseUrl</Col>\n                                              <Col sm={10} className={\"url-base-value\"}>\n                                                  {this.state.authorizationResponseUrl}\n                                              </Col>\n                                          </Row>\n                                          {\n                                              Object.keys(queryParamsObject).map((key, index) =>\n                                              {\n                                                  return <Row key={\"auth-code-response-row-\" + index}>\n                                                      <Col sm={2}>{key}</Col>\n                                                      <Col sm={10}>{queryParamsObject[key]}</Col>\n                                                  </Row>\n                                              })\n                                          }\n                                      </React.Fragment>\n                                  }}\n                    />\n\n                    <Button type=\"submit\" onClick={e =>\n                    {\n                        this.setState({isLoading: true});\n                        this.retrieveAccessTokenDetails(e);\n                    }}\n                            style={{marginTop: \"15px\", marginBottom: \"15px\"}}>\n                        <LoadingSpinner show={this.state.isLoading} /> Get Access Token\n                    </Button>\n                    {\n                        this.state.accessTokenDetails &&\n                        <AccessTokenDetailsView accessTokenDetails={this.state.accessTokenDetails} />\n                    }\n\n                    <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                       messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                    .orElse(\n                                                                                                        [])} />\n                </React.Fragment>\n            }\n        </div>\n    }\n\n    render()\n    {\n        return (\n            <div className={\"grant-type-workflow\"}>\n                {\n                    <AuthorizationCodeGrantDetails\n                        isLoading={this.state.authorizationResponseUrl === undefined}\n                        content={() =>\n                        {\n                            return <React.Fragment>\n                                {this.loadAuthorizationQueryParameterView()}\n                                {this.loadAuthorizationCodeResponseDetailsView()}\n                            </React.Fragment>\n                        }}\n                        remove={this.props.onRemove} />\n                }\n            </div>\n        );\n    }\n}\n\nfunction AuthorizationCodeGrantDetails(props)\n{\n    const [open, setOpen] = useState(true);\n\n    let variant = \"dark\";\n    return (\n        <React.Fragment>\n            <Alert className={\"collapse-header authorization-code-grant\"}\n                   variant={variant}\n                   onClick={() =>\n                   {\n                       setOpen(!open);\n                   }}\n            >\n                {\n                    open === true &&\n                    <CaretDown />\n                }\n                {\n                    open === false &&\n                    <CaretRight />\n                }\n                <span><LoadingSpinner show={props.isLoading} /> Authorization Code Grant/Flow</span>\n                {\n                    props.remove !== undefined &&\n                    <XLg onClick={props.remove} className={\"remove-collapse\"} />\n                }\n            </Alert>\n            <Collapse in={open}>\n                <Card className={\"workflow-card\"}>\n                    <Card.Body>\n                        {props.content()}\n                    </Card.Body>\n                </Card>\n            </Collapse>\n        </React.Fragment>\n    );\n}\n\n\n","import ScimClient from \"./scim-client\";\nimport {CURRENT_WORKFLOW_SETTINGS_ENDPOINT} from \"./scim-constants\";\nimport {Optional} from \"../services/utils\";\n\nexport default class CurrentWorkflowSettingsClient\n{\n\n    constructor(setState)\n    {\n        this.scimClient = new ScimClient(CURRENT_WORKFLOW_SETTINGS_ENDPOINT, setState);\n    }\n\n    updateAuthCodeSettings(openidClientId, redirectUri, queryParameters, callback)\n    {\n        let resource = {\n            authCodeParameters: {\n                redirectUri: redirectUri,\n                queryParameters: queryParameters\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    updateClientCredentialsSettings(openidClientId, scope, callback)\n    {\n        let resource = {\n            clientCredentialsParameters: {\n                scope: scope\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    updateResourceOwnerPasswordCredentialsSettings(openidClientId, username, password, scope, callback)\n    {\n        let resource = {\n            resourceOwnerPasswordParameters: {\n                username: username,\n                password: password,\n                scope: scope\n            }\n        };\n        this.patchResource(openidClientId, resource, callback);\n    }\n\n    patchResource(openIdClientId, resource, callback)\n    {\n        let patchOperation = {\n            schemas: [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n            Operations: [\n                {\n                    op: \"replace\",\n                    value: resource\n                }\n            ]\n        };\n\n        this.scimClient.patchResource(patchOperation, openIdClientId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    new Optional(callback).ifPresent(method => method(resource, response.status));\n                })\n            }\n        })\n    }\n}","import React, {createRef} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {\n    AlertListMessages,\n    ErrorMessagesAlert,\n    FormInputField,\n    FormRadioSelection,\n    LoadingSpinner\n} from \"../base/form-base\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport {Reply} from \"react-bootstrap-icons\";\nimport AuthorizationCodeGrantWorkflow from \"./auth-code-grant/authorization-code-grant-workflow\";\nimport * as lodash from \"lodash\";\nimport ScimClient from \"../scim/scim-client\";\nimport {ACCESS_TOKEN_REQUEST_ENDPOINT, AUTH_CODE_GRANT_ENDPOINT, CURRENT_WORKFLOW_URI} from \"../scim/scim-constants\";\nimport AccessTokenView from \"./auth-code-grant/access-token-view\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Optional} from \"../services/utils\";\nimport CurrentWorkflowSettingsClient from \"../scim/current-workflow-settings-client\";\nimport {Alert} from \"react-bootstrap\";\n\nexport default class OpenidClientWorkflow extends React.Component\n{\n\n    constructor(props, context)\n    {\n        super(props, context)\n        this.authCodeGrantType = \"authorization_code\";\n        this.clientCredentialsGrantType = \"client_credentials\";\n        this.resourceOwnerGrantType = \"password\";\n\n        this.state = {\n            authenticationType: this.authCodeGrantType,\n            workflowDetails: this.props.client[CURRENT_WORKFLOW_URI] || {},\n            isLoading: false,\n            responseDetails: []\n        }\n\n        this.formReference = createRef();\n        this.resetRedirectUri = this.resetRedirectUri.bind(this);\n        this.handleNestedElementChange = this.handleNestedElementChange.bind(this);\n        this.handleGrantTypeResponseDetails = this.handleGrantTypeResponseDetails.bind(this);\n        this.removeGrantTypeDetails = this.removeGrantTypeDetails.bind(this);\n    }\n\n    async resetRedirectUri(e)\n    {\n        e.preventDefault();\n        let wrapperObject = this.state;\n        lodash.set(wrapperObject, \"workflowDetails.authCodeParameters.redirectUri\", this.props.originalRedirectUri);\n        this.setState(wrapperObject)\n    }\n\n    handleGrantTypeResponseDetails(type, responseDetails)\n    {\n        let responseDetailsArray = (this.state.responseDetails || []);\n        responseDetails.grantType = type;\n        responseDetailsArray.unshift(responseDetails);\n        let wrapperObject = {};\n        wrapperObject.responseDetails = responseDetailsArray\n        this.setState(wrapperObject);\n    }\n\n    handleNestedElementChange(fieldname, value)\n    {\n        let wrapperObject = this.state.workflowDetails;\n        lodash.set(wrapperObject, fieldname, value);\n        this.setState({workflowDetails: wrapperObject})\n    }\n\n    removeGrantTypeDetails(details)\n    {\n        let detailsObject = this.state.responseDetails;\n        let detailsIndex = detailsObject.indexOf(details);\n        detailsObject.splice(detailsIndex, 1);\n        let wrapperObject = {};\n        wrapperObject.responseDetails = detailsObject;\n        this.setState(wrapperObject)\n    }\n\n    render()\n    {\n        let authTypes = [\n            {value: this.authCodeGrantType, display: \"Authorization Code Grant/Flow\"},\n            {value: this.clientCredentialsGrantType, display: \"Client Credentials Grant\"},\n            {value: this.resourceOwnerGrantType, display: \"Resource Owner Password Credentials Grant\"}\n        ]\n\n        return (\n            <React.Fragment>\n                <h2>OpenID Connect Workflow</h2>\n                <ErrorMessagesAlert errors={this.state.errors} />\n\n                <Form ref={this.formReference} onSubmit={e => e.preventDefault()}>\n                    <FormRadioSelection name=\"authenticationType\"\n                                        label=\"AuthenticationType Type\"\n                                        displayType={\"vertical\"}\n                                        selected={this.state.authenticationType}\n                                        selections={authTypes}\n                                        onChange={e => this.setState({authenticationType: e.target.value})}\n                                        onError={() =>\n                                        {\n                                        }} />\n                    {\n                        this.state.authenticationType === this.authCodeGrantType &&\n                        <AuthorizationCodeGrantForm formReference={this.formReference}\n                                                    originalRedirectUri={this.props.originalRedirectUri}\n                                                    workflowDetails={this.state.workflowDetails}\n                                                    isLoading={this.state.isLoading}\n                                                    handleChange={this.handleNestedElementChange}\n                                                    resetRedirectUri={this.resetRedirectUri}\n                                                    handleResponse={details => this.handleGrantTypeResponseDetails(\n                                                        this.authCodeGrantType, details)}\n                                                    onError={() =>\n                                                    {\n                                                    }} />\n                    }\n                    {\n                        this.state.authenticationType === this.clientCredentialsGrantType &&\n                        <ClientCredentialsGrantForm formReference={this.formReference}\n                                                    workflowDetails={this.state.workflowDetails}\n                                                    client={this.props.client}\n                                                    isLoading={this.state.isLoading}\n                                                    handleChange={this.handleNestedElementChange}\n                                                    handleResponse={details => this.handleGrantTypeResponseDetails(\n                                                        this.clientCredentialsGrantType, details)}\n                                                    onError={() =>\n                                                    {\n                                                    }} />\n                    }\n                    {\n                        this.state.authenticationType === this.resourceOwnerGrantType &&\n                        <ResourceOwnerPasswordCredentialsForm\n                            client={this.props.client}\n                            workflowDetails={this.state.workflowDetails}\n                            isLoading={this.state.isLoading}\n                            handleChange={this.handleNestedElementChange}\n                            handleResponse={details => this.handleGrantTypeResponseDetails(\n                                this.state.authenticationType, details)}\n                            onError={() =>\n                            {\n                            }} />\n                    }\n                </Form>\n                {\n                    (this.state.responseDetails || []).map(responseDetails =>\n                    {\n                        return <ResponseDetailsView key={\"response-details-\" + responseDetails.id}\n                                                    responseDetails={responseDetails}\n                                                    client={this.props.client}\n                                                    removeGrantTypeDetails={this.removeGrantTypeDetails} />\n                    })\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nfunction ResponseDetailsView(props)\n{\n\n    let authCodeGrantType = \"authorization_code\";\n    let clientCredentialsGrantType = \"client_credentials\";\n    let resourceOwnerGrantType = \"password\";\n\n    let responseDetails = props.responseDetails;\n\n    if (authCodeGrantType === responseDetails.grantType)\n    {\n        return <React.Fragment key={authCodeGrantType + \"-\" + responseDetails.id}>\n            <AuthorizationCodeGrantWorkflow client={props.client}\n                                            requestDetails={responseDetails}\n                                            onRemove={() => props.removeGrantTypeDetails(\n                                                responseDetails)} />\n        </React.Fragment>\n    }\n\n    if (clientCredentialsGrantType === responseDetails.grantType)\n    {\n        return <React.Fragment key={clientCredentialsGrantType + \"-\" + responseDetails.id}>\n            <AccessTokenView header={\"Client Credentials Grant\"}\n                             headerClass={\"client-credentials-grant\"}\n                             accessTokenDetails={responseDetails}\n                             onRemove={() => props.removeGrantTypeDetails(\n                                 responseDetails)} />\n        </React.Fragment>\n    }\n\n    return <React.Fragment key={resourceOwnerGrantType + \"-\" + responseDetails.id}>\n        <AccessTokenView header={\"Resource Owner Password Credentials Grant\"}\n                         headerClass={\"resource-owner-password-credentials-grant\"}\n                         accessTokenDetails={responseDetails}\n                         onRemove={() => props.removeGrantTypeDetails(\n                             responseDetails)} />\n    </React.Fragment>\n}\n\nclass AuthorizationCodeGrantForm extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            intervals: [],\n            requestDetails: []\n        }\n        this.setState = this.setState.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.loadAuthorizationRequestDetails = this.loadAuthorizationRequestDetails.bind(this);\n        this.patchWorkflowSettings = this.patchWorkflowSettings.bind(this);\n    }\n\n    componentWillUnmount()\n    {\n        this.state.requestDetails.forEach(requestDetails =>\n        {\n            if (requestDetails.interval !== undefined)\n            {\n                clearInterval(requestDetails.interval);\n            }\n        })\n    }\n\n    loadAuthorizationRequestDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n        this.setState({getAuthcode: true, errorMessage: undefined});\n\n        let scimClient = new ScimClient(AUTH_CODE_GRANT_ENDPOINT, this.setState);\n        let resource = scimClient.getResourceFromFormReference(this.props.formReference);\n        resource[CURRENT_WORKFLOW_URI] = this.props.workflowDetails;\n\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({getAuthcode: false});\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({errorMessage: errorResponse.detail});\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let redirectUri = new Optional(this.props.workflowDetails).map(w => w.authCodeParameters)\n                                                                  .map(a => a.redirectUri)\n                                                                  .orElse(undefined);\n        let queryParams = new Optional(this.props.workflowDetails).map(w => w.authCodeParameters)\n                                                                  .map(a => a.queryParameters)\n                                                                  .orElse(undefined);\n\n        workflowSettingsClient.updateAuthCodeSettings(openIdClientId, redirectUri, queryParams);\n    }\n\n    render()\n    {\n        let authCodeParameters = this.props.workflowDetails.authCodeParameters\n                                 || {redirectUri: this.props.originalRedirectUri};\n\n        return (\n            <React.Fragment>\n                <FormInputField name=\"authCodeParameters.redirectUri\"\n                                label=\"Redirect URI\"\n                                placeholder=\"The redirect uri that is added to the request parameters\"\n                                value={authCodeParameters.redirectUri}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)}>\n                    <a href={\"/#\"} onClick={this.props.resetRedirectUri} className={\"action-link\"}>\n                        <Reply /> <span>reset redirect uri</span>\n                    </a>\n                </FormInputField>\n                <FormInputField name=\"authCodeParameters.queryParameters\"\n                                label=\"Additional URL Query\"\n                                value={authCodeParameters.queryParameters}\n                                placeholder=\"add an optional query string that is appended to the request URL\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button type=\"submit\" onClick={this.loadAuthorizationRequestDetails}>\n                            <LoadingSpinner show={this.state.getAuthcode} /> Get Authorization Code\n                        </Button>\n                        {\n                            this.state.errorMessage &&\n                            <Alert variant={\"danger\"}>\n                                <small className={\"error\"}>\n                                    <GoFlame /> {this.state.errorMessage}\n                                </small>\n                            </Alert>\n                        }\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nclass ClientCredentialsGrantForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n        this.setState = this.setState.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n        this.patchWorkflowSettings = this.patchWorkflowSettings.bind(this);\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n        this.setState({accessingToken: true})\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let scope = new Optional(this.props.workflowDetails).map(w => w.clientCredentialsParameters)\n                                                            .map(c => c.scope)\n                                                            .orElse(undefined);\n        let resource = {\n            grantType: \"client_credentials\",\n            openIdClientId: parseInt(this.props.client.id),\n            scope: scope\n        }\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({accessingToken: false})\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let scope = new Optional(this.props.workflowDetails).map(w => w.clientCredentialsParameters)\n                                                            .map(c => c.scope)\n                                                            .orElse(undefined);\n\n        workflowSettingsClient.updateClientCredentialsSettings(openIdClientId, scope);\n    }\n\n    render()\n    {\n        let clientCredentialsParameters = this.props.workflowDetails.clientCredentialsParameters || {};\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <FormInputField name=\"clientCredentialsParameters.scope\"\n                                label=\"Scope\"\n                                value={clientCredentialsParameters.scope || \"\"}\n                                placeholder=\"The scope to access from the identity provider\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button id={\"upload\"} type=\"submit\" onClick={this.retrieveAccessTokenDetails}>\n                            <LoadingSpinner show={this.state.accessingToken} /> Get Access Token\n                        </Button>\n                        <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                           messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                        .orElse([])} />\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nclass ResourceOwnerPasswordCredentialsForm extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n        this.retrieveAccessTokenDetails = this.retrieveAccessTokenDetails.bind(this);\n    }\n\n    retrieveAccessTokenDetails(e)\n    {\n        e.preventDefault();\n        this.patchWorkflowSettings();\n\n        this.setState({accessingToken: true});\n        let scimClient = new ScimClient(ACCESS_TOKEN_REQUEST_ENDPOINT, this.setState);\n\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        let resource = {\n            grantType: \"password\",\n            openIdClientId: parseInt(this.props.client.id),\n            username: username,\n            password: password,\n            scope: scope\n        }\n\n        let handleResponse = this.props.handleResponse;\n        scimClient.createResource(resource).then(response =>\n        {\n            this.setState({accessingToken: false});\n            if (response.success)\n            {\n                response.resource.then(resource =>\n                {\n                    handleResponse(resource);\n                })\n            }\n        });\n    }\n\n    patchWorkflowSettings()\n    {\n        let workflowSettingsClient = new CurrentWorkflowSettingsClient(this.setState);\n\n        let openIdClientId = new Optional(this.props.workflowDetails).map(w => w.openIdClientId)\n                                                                     .orElse(undefined);\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        workflowSettingsClient.updateResourceOwnerPasswordCredentialsSettings(openIdClientId, username, password,\n            scope);\n    }\n\n    render()\n    {\n        let resourceOwnerPasswordParameters = this.props.workflowDetails.resourceOwnerPasswordParameters || {};\n        let username = resourceOwnerPasswordParameters.username || \"\";\n        let password = resourceOwnerPasswordParameters.password || \"\";\n        let scope = resourceOwnerPasswordParameters.scope || \"\";\n\n        let errors = this.state.errors || {};\n        return (\n            <React.Fragment>\n                <FormInputField name=\"resourceOwnerPasswordParameters.username\"\n                                label=\"Username\"\n                                value={username}\n                                placeholder={\"the username to authenticate\"}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <FormInputField name=\"resourceOwnerPasswordParameters.password\"\n                                label=\"Password\"\n                                placeholder={\"the users password\"}\n                                value={password}\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <FormInputField name=\"resourceOwnerPasswordParameters.scope\"\n                                label=\"Scope\"\n                                value={scope}\n                                placeholder=\"The scope to access from the identity provider\"\n                                onChange={e => this.props.handleChange(e.target.name, e.target.value)}\n                                onError={fieldname => this.props.onError(fieldname)} />\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10, offset: 2}}>\n                        <Button id={\"upload\"} type=\"submit\" onClick={this.retrieveAccessTokenDetails}>\n                            <LoadingSpinner show={this.state.accessingToken} /> Get Access Token\n                        </Button>\n                        <AlertListMessages variant={\"danger\"} icon={<GoFlame />}\n                                           messages={errors.errorMessages || new Optional(errors.detail).map(d => [d])\n                                                                                                        .orElse([])} />\n                    </Col>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport {Tab, Tabs} from \"react-bootstrap\";\nimport ScimClient from \"../scim/scim-client\";\nimport {ArrowLeftCircle} from \"react-bootstrap-icons\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport HttpSettings from \"./http-settings\";\nimport {Optional} from \"../services/utils\";\nimport OpenidClientWorkflow from \"./openid-client-workflow\";\nimport {ApplicationInfoContext} from \"../app\";\n\nexport default class OpenidClientOverview extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n        this.setState = this.setState.bind(this);\n    }\n\n    async componentDidMount()\n    {\n        let openIdProviderId = this.props.match.params.providerId;\n        let clientId = this.props.match.params.clientId;\n\n        let openIdProviderResourcePath = \"/scim/v2/OpenIdProvider\";\n        new ScimClient(openIdProviderResourcePath, this.setState).getResource(openIdProviderId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(openIdProvider =>\n                {\n                    this.setState({provider: openIdProvider});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n\n        let clientResourcePath = \"/scim/v2/OpenIdClient\";\n        new ScimClient(clientResourcePath, this.setState).getResource(clientId).then(response =>\n        {\n            if (response.success)\n            {\n                response.resource.then(client =>\n                {\n                    this.setState({client: client});\n                })\n            }\n            else\n            {\n                response.resource.then(errorResponse =>\n                {\n                    this.setState({\n                        errors: {\n                            errorMessages: [errorResponse.detail]\n                        }\n                    })\n                })\n            }\n        });\n    }\n\n\n    render()\n    {\n        let provider = new Optional(this.state.provider);\n        let client = new Optional(this.state.client);\n\n        return (\n            <React.Fragment>\n                <LinkContainer exact\n                               to={\"/views/openIdProvider/\" + this.props.match.params.providerId\n                                   + \"/openIdClients\"}>\n                    <a href={\"/#\"}>\n                        <h5 style={{height: \"35px\", padding: \"0\", paddingLeft: \"10px\"}}>\n                            <ArrowLeftCircle style={{color: \"bisque\"}} height={\"35px\"} size={\"25px\"} />\n                            <span style={{marginLeft: \"15px\"}}>Back to\n                                <span style={{color: \"lightgray\"}}> \"{provider.map(val => val.name).orElse(\"\")}\" </span>\n                                                               Overview\n                            </span>\n                        </h5>\n                    </a>\n                </LinkContainer>\n\n                <h5>Client: <span style={{color: \"lightgray\"}}>{client.map(c => c.clientId).orElse(\"\")}</span></h5>\n\n                <Tabs defaultActiveKey=\"workflow\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"workflow\" title=\"OpenID Workflow\">\n                        {\n                            new Optional(this.state.client).isPresent() &&\n                            <ApplicationInfoContext.Consumer>\n                                {appInfo =>\n                                    <OpenidClientWorkflow client={this.state.client}\n                                                          originalRedirectUri={appInfo.authCodeRedirectUri} />\n                                }\n                            </ApplicationInfoContext.Consumer>\n                        }\n                    </Tab>\n                    <Tab eventKey=\"clients\" title=\"HTTP Settings\">\n                        {\n                            new Optional(this.state.client).isPresent() &&\n                            <HttpSettings client={this.state.client} />\n                        }\n                    </Tab>\n                </Tabs>\n            </React.Fragment>\n        )\n    }\n}","import ScimClient from \"../scim/scim-client\";\nimport {SEARCH_REQUEST_URI, TOKEN_CATEGORY_ENDPOINT, TOKEN_CATEGORY_URI} from \"../scim/scim-constants\";\n\nexport class TokenCategoryClient\n{\n  \n  constructor()\n  {\n    this.scimClient = new ScimClient(TOKEN_CATEGORY_ENDPOINT, () =>\n    {\n    });\n  }\n  \n  createCategory(name, onSuccess, onError)\n  {\n    let category = {\n      schemas: [TOKEN_CATEGORY_URI],\n      name: name\n    };\n    this.scimClient.createResource(category)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  listCategories({\n                   startIndex,\n                   filter,\n                   sortBy,\n                   sortOrder\n                 } = {}, onSuccess, onError)\n  {\n    let searchRequest = {\n      schemas: [SEARCH_REQUEST_URI],\n      sortBy: sortBy,\n      sortOrder: sortOrder || \"ascending\",\n      filter: filter,\n      startIndex: startIndex\n    };\n    this.scimClient.listResourcesWithPost(searchRequest, onSuccess, onError);\n  }\n  \n  updateCategory(id, name, onSuccess, onError)\n  {\n    let category = {\n      schemas: [TOKEN_CATEGORY_URI],\n      name: name\n    };\n    this.scimClient.updateResource(category, id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  deleteCategory(category, onSuccess, onError)\n  {\n    this.scimClient.deleteResource(category.id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  onSuccess(category);\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n}\n","import ScimClient from \"../scim/scim-client\";\nimport {\n  BULK_ENDPOINT,\n  BULK_REQUEST_URI,\n  SEARCH_REQUEST_URI,\n  TOKEN_STORE_ENDPOINT,\n  TOKEN_STORE_URI\n} from \"../scim/scim-constants\";\n\nexport class TokenStoreClient\n{\n  constructor()\n  {\n    this.scimClient = new ScimClient(TOKEN_STORE_ENDPOINT, () =>\n    {\n    });\n  }\n  \n  createTokenStore(name, token, categoryId, onSuccess, onError)\n  {\n    let tokenStore = {\n      schemas: [TOKEN_STORE_URI],\n      name: name,\n      token: token,\n      categoryId: categoryId\n    };\n    this.scimClient.createResource(tokenStore)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  listTokenStores({\n                    startIndex,\n                    filter,\n                    sortBy,\n                    sortOrder\n                  } = {}, onSuccess, onError)\n  {\n    let searchRequest = {\n      schemas: [SEARCH_REQUEST_URI],\n      sortBy: sortBy,\n      sortOrder: sortOrder || \"ascending\",\n      filter: filter,\n      startIndex: startIndex\n    };\n    this.scimClient.listResourcesWithPost(searchRequest, onSuccess, onError);\n  }\n  \n  updateTokenStore(id, name, token, categoryId, onSuccess, onError)\n  {\n    let tokenStore = {\n      schemas: [TOKEN_STORE_URI],\n      name: name,\n      token: token,\n      categoryId: categoryId\n    };\n    this.scimClient.updateResource(tokenStore, id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  response.resource.then(resource =>\n                                         {\n                                           onSuccess(resource);\n                                         });\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  deleteTokenStore(token, onSuccess, onError)\n  {\n    this.scimClient.deleteResource(token.id)\n        .then(response =>\n              {\n                if (response.success)\n                {\n                  onSuccess(token);\n                }\n                else\n                {\n                  response.resource.then(errorResponse =>\n                                         {\n                                           onError(errorResponse);\n                                         });\n                }\n              });\n  }\n  \n  bulkDeleteTokenStores(tokenStoreArray, maxOperations, onSuccess, onError)\n  {\n    \n    function sendBulkRequest(bulkOperations)\n    {\n      let bulkRequest = {\n        \"schemas\": [BULK_REQUEST_URI],\n        \"Operations\": bulkOperations\n      };\n      \n      fetch(BULK_ENDPOINT, {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/scim+json'},\n        body: JSON.stringify(bulkRequest)\n      })\n        .then(response =>\n              {\n                if (response.status === 200)\n                {\n                  response.json()\n                          .then(resource =>\n                                {\n                                  let ops = resource.Operations;\n                                  let deleteSuccessIds = [];\n                                  let deleteFailedIds = [];\n                                  ops.forEach(deletedResponseOperations =>\n                                              {\n                                                if (deletedResponseOperations.status === 204)\n                                                {\n                                                  deleteSuccessIds.push(deletedResponseOperations.bulkId);\n                                                }\n                                                else\n                                                {\n                                                  deleteFailedIds.push(deletedResponseOperations.bulkId);\n                                                }\n                                              });\n                                  onSuccess(deleteSuccessIds, deleteFailedIds);\n                                });\n                }\n                else\n                {\n                  response.json()\n                          .then(errorResponse =>\n                                {\n                                  onError(errorResponse);\n                                });\n                }\n              });\n    }\n    \n    let operations = [];\n    for (let i = 0; i < tokenStoreArray.length; i++)\n    {\n      let tokenStore = tokenStoreArray[i];\n      operations.push(\n        {\n          method: \"DELETE\",\n          bulkId: tokenStore.id,\n          path: \"/TokenStore/\" + tokenStore.id\n        }\n      );\n      \n      if (operations.length === maxOperations)\n      {\n        sendBulkRequest([...operations]);\n        operations = [];\n      }\n    }\n    \n    if (operations.length > 0)\n    {\n      sendBulkRequest(operations);\n    }\n  }\n}\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {TokenStoreClient} from \"./token-store-client\";\nimport {Alert, Table} from \"react-bootstrap\";\nimport {CheckLg, Eye, EyeFill, PencilSquare, PlusLg, Save, Trash, XLg} from \"react-bootstrap-icons\";\nimport {Optional} from \"../services/utils\";\nimport {GoFlame} from \"react-icons/go\";\nimport {ScimServiceProviderContext} from \"../app\";\n\nexport function TokenStoreList(props)\n{\n  const [errors, setErrors] = useState({});\n  const [loadedOnce, setloadedOnce] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [tokenStoreList, setTokenStoreList] = useState([]);\n  \n  function addNewTokenStores(tokenStoreArray)\n  {\n    let newTokenStores = [...tokenStoreList].concat(tokenStoreArray);\n    newTokenStores.sort((c1, c2) => c1.name.localeCompare(c2.name));\n    setTotalResults(totalResults + tokenStoreArray.length);\n    setTokenStoreList(newTokenStores);\n    props.setCategoryEntires(props.category, totalResults + tokenStoreArray.length);\n  }\n  \n  function updateTokenStore(oldtokenStore, newTokenStore)\n  {\n    let copiedTokenStores = [...tokenStoreList];\n    let indexOf = copiedTokenStores.indexOf(oldtokenStore);\n    copiedTokenStores.splice(indexOf, 1, newTokenStore);\n    copiedTokenStores.sort((c1, c2) => c1.name.localeCompare(c2.name));\n    setTokenStoreList(copiedTokenStores);\n  }\n  \n  function removeTokenStore(tokenStoreArray)\n  {\n    let copiedTokenStores = [...tokenStoreList];\n    tokenStoreArray.forEach(tokenStore =>\n                            {\n                              let indexOf = copiedTokenStores.indexOf(tokenStore);\n                              copiedTokenStores.splice(indexOf, 1);\n                            });\n    setTotalResults(totalResults - tokenStoreArray.length);\n    setTokenStoreList(copiedTokenStores);\n    props.setCategoryEntires(props.category, totalResults - tokenStoreArray.length);\n  }\n  \n  function toggleSingleCeckbox(checked, tokenStore)\n  {\n    tokenStore.checked = checked;\n    let copiedTokenStores = [...tokenStoreList];\n    let indexOf = copiedTokenStores.indexOf(tokenStore);\n    copiedTokenStores.splice(indexOf, 1, tokenStore);\n    setTokenStoreList(copiedTokenStores);\n  }\n  \n  function toggleAllCheckboxes(checked)\n  {\n    let copiedTokenStores = [...tokenStoreList];\n    copiedTokenStores.forEach(tokenStore =>\n                              {\n                                tokenStore.checked = checked;\n                              });\n    setTokenStoreList(copiedTokenStores);\n  }\n  \n  useEffect(() =>\n            {\n              setloadedOnce(false);\n              setTotalResults(0);\n              setTokenStoreList([]);\n            }, [props.filter]);\n  \n  useEffect(() =>\n            {\n              let searchRequest = {\n                startIndex: tokenStoreList.length,\n                filter: new Optional(props.filter).map(v => v.trim())\n                                                  .map(v => v.length === 0 ? undefined : v)\n                                                  .map(v => \"token co \\\"\" + v + \"\\\" and categoryId eq \" + props.category.id)\n                                                  .orElse(\"categoryId eq \" + props.category.id),\n                sortBy: \"name\"\n              };\n    \n              function onSuccess(listResponse)\n              {\n                setTotalResults(listResponse.totalResults);\n                let newResources = listResponse.Resources || [];\n                addNewTokenStores([...newResources]);\n                setloadedOnce(true);\n              }\n    \n              function onError(errorResponse)\n              {\n                setErrors(errorResponse);\n              }\n    \n              if ((totalResults === 0 && !loadedOnce) || tokenStoreList.length < totalResults)\n              {\n                new TokenStoreClient().listTokenStores(searchRequest, onSuccess, onError);\n              }\n            }, [tokenStoreList]);\n  \n  return <React.Fragment>\n    {\n      errors && errors.length > 0 &&\n      <Alert variant={\"danger\"}>\n        <GoFlame /> {errors.details}\n      </Alert>\n    }\n    <TokenStoreTable category={props.category}\n                     tokenStoreList={tokenStoreList}\n                     addNewTokenStores={addNewTokenStores}\n                     updateTokenStore={updateTokenStore}\n                     removeTokenStore={removeTokenStore}\n                     toggleSingleCeckbox={toggleSingleCeckbox}\n                     toggleAllCheckboxes={toggleAllCheckboxes} />\n  </React.Fragment>;\n}\n\nfunction TokenStoreTable(props)\n{\n  \n  const [error, setError] = useState();\n  const [bulkDeleteMode, setBulkDeleteMode] = useState(false);\n  const [addNew, setAddNew] = useState(false);\n  \n  const serviceProviderContext = useContext(ScimServiceProviderContext);\n  \n  function deleteTokenStore(tokenStoreArray)\n  {\n    function onSuccess()\n    {\n      props.removeTokenStore(tokenStoreArray);\n    }\n    \n    function onError(errorResponse)\n    {\n      setError(errorResponse);\n    }\n    \n    new TokenStoreClient().deleteTokenStore(tokenStoreArray[0], onSuccess, onError);\n  }\n  \n  function bulkDeleteTokenStore()\n  {\n    let tokenStoreArray = props.tokenStoreList.filter(tokenStore => tokenStore.checked);\n    \n    function onSuccess(successfulDeleteIds, failedDeleteIds)\n    {\n      let deletedTokenStores = tokenStoreArray.filter(tokenStore => successfulDeleteIds.includes(tokenStore.id));\n      props.removeTokenStore(deletedTokenStores);\n      setBulkDeleteMode(false);\n    }\n    \n    function onError(errorResponse)\n    {\n      setError(errorResponse);\n      setBulkDeleteMode(false);\n    }\n    \n    new TokenStoreClient().bulkDeleteTokenStores(tokenStoreArray,\n                                                 serviceProviderContext.bulk.maxOperations,\n                                                 onSuccess,\n                                                 onError);\n  }\n  \n  return <React.Fragment>\n    {\n      error && error.length > 0 &&\n      <Alert variant={\"danger\"}>\n        <GoFlame /> {error.detail}\n      </Alert>\n    }\n    <Table striped bordered hover size=\"sm\" variant={\"dark\"}>\n      <thead>\n        <tr>\n          <th className={\"checkbox-column\"}>\n            <input type={\"checkbox\"}\n                   onChange={e => props.toggleAllCheckboxes(e.target.checked)} />\n          </th>\n          <th className={\"token-store-id-column\"}>id</th>\n          <th className={\"token-store-name-column\"}>name</th>\n          <th>token</th>\n          <th className={\"timestamp-column\"}>timestamps</th>\n          <th className={\"icon-column\"}>\n            {\n              !bulkDeleteMode &&\n              <React.Fragment>\n                <PlusLg className={\"listed-icon icon\"} onClick={() => setAddNew(true)} />\n                <Trash className={\"icon\"} onClick={() => setBulkDeleteMode(true)} />\n              </React.Fragment>\n            }\n            {\n              bulkDeleteMode &&\n              <span className={\"list-delete-insertion\"}>\n                sure? <CheckLg className={\"listed-icon icon\"} onClick={() => bulkDeleteTokenStore()} />\n                <XLg className={\"icon\"} onClick={() => setBulkDeleteMode(false)} />\n              </span>\n            }\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          addNew &&\n          <TokenStoreRow tokenStore={{\n            id: 0,\n            categoryId: parseInt(props.category.id)\n          }}\n                         editMode={true}\n                         addNewTokenStores={resourceArray =>\n                         {\n                           setAddNew(false);\n                           props.addNewTokenStores(resourceArray);\n                         }}\n                         removeTokenStore={() => setAddNew(false)} />\n        }\n        {\n          props.tokenStoreList.map(tokenStore => <TokenStoreRow key={tokenStore.id}\n                                                                tokenStore={tokenStore}\n                                                                toggleSingleCeckbox={props.toggleSingleCeckbox}\n                                                                addNewTokenStores={props.addNewTokenStores}\n                                                                updateTokenStore={props.updateTokenStore}\n                                                                removeTokenStore={deleteTokenStore} />)\n        }\n      </tbody>\n    </Table>\n  </React.Fragment>;\n}\n\nfunction TokenStoreRow(props)\n{\n  \n  const [error, setError] = useState();\n  const [deleteMode, setDeleteMode] = useState(false);\n  const [editMode, setEditMode] = useState(props.editMode);\n  const [viewTokenMode, setViewTokenMode] = useState(false);\n  \n  const [token, setToken] = useState(props.tokenStore.token || \"\");\n  const [tokenName, setTokenName] = useState(props.tokenStore.name || \"\");\n  \n  function onError(errorResponse)\n  {\n    setError(errorResponse);\n  }\n  \n  function createNewTokenStore()\n  {\n    function onSuccess(resource)\n    {\n      setEditMode(false);\n      props.addNewTokenStores([resource]);\n    }\n    \n    setError(null);\n    new TokenStoreClient().createTokenStore(tokenName, token, props.tokenStore.categoryId, onSuccess, onError);\n  }\n  \n  function updateTokenStore()\n  {\n    function onSuccess(resource)\n    {\n      setEditMode(false);\n      props.updateTokenStore(props.tokenStore, resource);\n    }\n    \n    setError(null);\n    if (props.tokenStore.name !== tokenName || props.tokenStore.token !== token)\n    {\n      new TokenStoreClient().updateTokenStore(props.tokenStore.id,\n                                              tokenName,\n                                              token,\n                                              props.tokenStore.categoryId,\n                                              onSuccess,\n                                              onError);\n    }\n    else\n    {\n      setEditMode(false);\n    }\n  }\n  \n  function resetChanges()\n  {\n    setTokenName(props.tokenStore.name);\n    setToken(props.tokenStore.token);\n    setEditMode(false);\n  }\n  \n  return <React.Fragment>\n    <tr>\n      <td><input type={\"checkbox\"} checked={props.tokenStore.checked || false}\n                 onChange={e => props.toggleSingleCeckbox(e.target.checked, props.tokenStore)} /></td>\n      <td>{props.tokenStore.id}</td>\n      <td>\n        {\n          !editMode &&\n          tokenName\n        }\n        {\n          editMode &&\n          <input type={\"text\"} value={tokenName} onChange={e => setTokenName(e.target.value)} />\n        }\n      </td>\n      <td className={\"overflow-column\"}>\n        {\n          !editMode &&\n          <React.Fragment>\n            {\n              !viewTokenMode &&\n              <article className={\"token-overview-short\"}>{token}</article>\n            }\n            {\n              viewTokenMode &&\n              <textarea className={\"token-overview\"} readOnly={true} value={token} />\n            }\n            {\n              !viewTokenMode &&\n              <Eye className={\"right-floating-icon eye-icon\"} onClick={() => setViewTokenMode(!viewTokenMode)} />\n            }\n            {\n              viewTokenMode &&\n              <EyeFill className={\"right-floating-icon eye-icon\"} onClick={() => setViewTokenMode(!viewTokenMode)} />\n            }\n          </React.Fragment>\n        }\n        {\n          editMode &&\n          <textarea value={token} onChange={e => setToken(e.target.value)} className={\"token-area\"} wrap=\"off\" />\n        }\n      </td>\n      <td>\n        <span>\n          created: {new Optional(props.tokenStore.meta).map(val => val.created)\n                                                       .map(val => new Date(val).toLocaleString())\n                                                       .orElse(null)}\n        </span>\n        <br />\n        <span>\n          modified: {new Optional(props.tokenStore.meta).map(val => val.lastModified)\n                                                        .map(val => new Date(val).toLocaleString())\n                                                        .orElse(null)}\n        </span>\n      </td>\n      <td>\n        {\n          !deleteMode &&\n          <React.Fragment>\n            {\n              !editMode &&\n              <PencilSquare onClick={() => setEditMode(!editMode)} className={\"listed-icon icon\"} />\n            }\n            {\n              editMode &&\n              <React.Fragment>\n                <Save className={\"listed-icon icon\"}\n                      onClick={() =>\n                      {\n                        if (props.tokenStore.id === 0)\n                        {\n                          createNewTokenStore();\n                        }\n                        else\n                        {\n                          updateTokenStore();\n                        }\n                      }} />\n                <XLg className={\"listed-icon icon\"}\n                     onClick={() => resetChanges()} />\n              </React.Fragment>\n            }\n            <Trash onClick={() => setDeleteMode(true)} className={\"icon\"} />\n          </React.Fragment>\n        }\n        {\n          deleteMode &&\n          <span className={\"list-delete-insertion\"}>\n            sure? <CheckLg className={\"listed-icon icon\"}\n                           onClick={() =>\n                           {\n                             setDeleteMode(false);\n                             props.removeTokenStore([props.tokenStore]);\n                           }} />\n            <XLg className={\"listed-icon icon\"}\n                 onClick={() => setDeleteMode(false)} />\n          </span>\n        }\n      </td>\n    </tr>\n  \n  </React.Fragment>;\n}\n","import React, {useEffect, useState} from \"react\";\nimport {TokenCategoryClient} from \"./token-category-client\";\nimport {Alert, Button, Col, Form, ListGroup, Row, Tab} from \"react-bootstrap\";\nimport {ArrowRightCircle, PencilSquare, PlusLg, Save, Trash, XLg} from \"react-bootstrap-icons\";\nimport {GoFlame} from \"react-icons/go\";\nimport {TokenStoreList} from \"./token-store-list\";\n\nexport function TokenCategoryList()\n{\n  \n  const [errors, setErrors] = useState({});\n  const [filter, setFilter] = useState(\"\");\n  const [loadedOnce, setloadedOnce] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [tokenCategoryList, setTokenCategoryList] = useState([]);\n  const [tokensRemovedByFilter, setTokensRemovedByFilter] = useState([]);\n  \n  function addNewCategories(categoryArray)\n  {\n    let newTokenCategories = [...tokenCategoryList, ...categoryArray];\n    newTokenCategories.sort((c1, c2) => c1.name.localeCompare(c2.name));\n    setTokenCategoryList(newTokenCategories);\n  }\n  \n  function updateCategory(oldCategory, newCategory)\n  {\n    let copiedList = [...tokenCategoryList];\n    let indexOf = copiedList.indexOf(oldCategory);\n    copiedList.splice(indexOf, 1, newCategory);\n    setTokenCategoryList([...copiedList]);\n  }\n  \n  function removeCategory(category)\n  {\n    let copiedList = [...tokenCategoryList];\n    let index = copiedList.indexOf(category);\n    copiedList.splice(index, 1);\n    setTotalResults(totalResults - 1);\n    setTokenCategoryList([...copiedList]);\n  }\n  \n  function setCategoryEntires(category, numberOfEntries)\n  {\n    category.numberOfEntries = numberOfEntries;\n    let copiedList = [...tokenCategoryList];\n    setTokenCategoryList([...copiedList]);\n  }\n  \n  useEffect(() =>\n            {\n              let searchRequest = {\n                startIndex: tokenCategoryList.length,\n                sortBy: \"name\"\n              };\n    \n              function onSuccess(listResponse)\n              {\n                setTotalResults(listResponse.totalResults);\n                let newResources = listResponse.Resources || [];\n                addNewCategories([...newResources]);\n                setloadedOnce(true);\n              }\n    \n              function onError(errorResponse)\n              {\n                setErrors(errorResponse);\n              }\n    \n              if ((totalResults === 0 && !loadedOnce) || tokenCategoryList.length < totalResults)\n              {\n                new TokenCategoryClient().listCategories(searchRequest, onSuccess, onError);\n              }\n            }, [tokenCategoryList]);\n  \n  useEffect(() =>\n            {\n    \n            }, [filter]);\n  \n  return <React.Fragment>\n    {\n      errors && errors.length > 0 &&\n      <Alert variant={\"danger\"}>\n        <Form.Text>\n          {JSON.stringify(errors)}\n        </Form.Text>\n      </Alert>\n    }\n    <Tab.Container id=\"list-group-tabs-example\">\n      <Row>\n        <Col sm={3}>\n          <h5>found a total of {totalResults} categories</h5>\n        </Col>\n        <Col>\n          <div className={\"filter-block\"}>\n              <span>\n                <span>search for token part: </span>\n                <input id={\"filter-input\"}\n                       onKeyUp={e =>\n                       {\n                         if (e.key === 'Enter')\n                         {\n                           setFilter(document.getElementById(\"filter-input\").value);\n                         }\n                       }} />\n                <Button onClick={e => setFilter(document.getElementById(\"filter-input\").value)}\n                >search</Button>\n              </span>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <ListGroup>\n            <CategoryHeader addToTokenCategoryList={resource =>\n            {\n              setTotalResults(totalResults + 1);\n              addNewCategories([resource]);\n            }} />\n            {\n              tokenCategoryList &&\n              tokenCategoryList.map(tokenCategory =>\n                                    {\n                                      return <CategoryListItem key={tokenCategory.id}\n                                                               category={tokenCategory}\n                                                               updateCategory={updateCategory}\n                                                               removeCategory={removeCategory} />;\n                                    })\n            }\n          </ListGroup>\n        </Col>\n        <Col sm={9}>\n          <Tab.Content>\n            {\n              tokenCategoryList &&\n              tokenCategoryList.map(tokenCategory =>\n                                    {\n                                      return <Tab.Pane key={tokenCategory.id}\n                                                       eventKey={\"#\" + tokenCategory.id}>\n                                        <TokenStoreList category={tokenCategory} filter={filter}\n                                                        setCategoryEntires={setCategoryEntires} />\n                                      </Tab.Pane>;\n                                    })\n            }\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n  </React.Fragment>;\n}\n\nfunction CategoryListItem(props)\n{\n  \n  const [errors, setErrors] = useState({});\n  const [editMode, setEditMode] = useState(false);\n  const [deleteMode, setDeleteMode] = useState(false);\n  const [value, setValue] = useState(props.category.name);\n  \n  function updateCategory()\n  {\n    setErrors(null);\n    \n    function onSuccess(newCategory)\n    {\n      props.updateCategory(props.category, newCategory);\n    }\n    \n    if (props.category.name !== value)\n    {\n      new TokenCategoryClient().updateCategory(props.category.id,\n                                               value,\n                                               onSuccess,\n                                               errorResponse => setErrors(errorResponse));\n    }\n  }\n  \n  function deleteCategory()\n  {\n    setErrors(null);\n    \n    function onSuccess(resource)\n    {\n      props.removeCategory(resource);\n    }\n    \n    new TokenCategoryClient().deleteCategory(props.category, onSuccess, errorResponse => setErrors(errorResponse));\n  }\n  \n  let numberOfEntries = props.category.numberOfEntries || 0;\n  \n  return <ListGroup.Item variant={(numberOfEntries === 0) ? \"dark\" : \"light\"}\n                         action\n                         href={\"#\" + props.category.id}\n                         onKeyDown={e => editMode && e.stopPropagation()}>\n    <ArrowRightCircle style={{margin: \"0 10px 0 0\"}} />\n    {\n      !editMode &&\n      <React.Fragment>\n        {value} [{numberOfEntries}]\n      </React.Fragment>\n    }\n    {\n      editMode &&\n      <input type={\"text\"}\n             className={\"listed-category-header-input\"}\n             value={value}\n             onChange={e => setValue(e.target.value)}\n             onKeyUp={e =>\n             {\n               if (e.key === 'Enter')\n               {\n                 updateCategory();\n                 setEditMode(!editMode);\n               }\n               else if (e.key === 'Escape')\n               {\n                 setValue(props.category.name);\n                 setEditMode(false);\n               }\n             }} />\n    }\n    <Trash className={\"add-list-item-icon delete-icon\"}\n           onClick={() => setDeleteMode(!deleteMode)} />\n    {\n      editMode &&\n      <XLg className={\"add-list-item-icon abort-icon listed-icon\"}\n           onClick={() =>\n           {\n             setValue(props.category.name);\n             setEditMode(false);\n           }} />\n    }\n    <EditIcon editMode={editMode}\n              classNames={\"add-list-item-icon edit-icon listed-icon\"}\n              onClick={() =>\n              {\n                if (editMode)\n                {\n                  props.category.name = value;\n                  updateCategory();\n                }\n                setEditMode(!editMode);\n              }} />\n    {\n      deleteMode &&\n      <DeleteCategoryBlock deleteMode={deleteMode} setDeleteMode={setDeleteMode} deleteCategory={deleteCategory} />\n    }\n    {\n      errors && errors.detail &&\n      <Alert variant={\"danger\"}>\n        <Form.Text>\n          <GoFlame /> {errors.detail}\n        </Form.Text>\n      </Alert>\n    }\n  </ListGroup.Item>;\n}\n\nfunction DeleteCategoryBlock(props)\n{\n  \n  return <div className={\"list-delete-insertion\"}>\n    <div className={\"list-delete-text\"}>\n      delete category?\n    </div>\n    <Button variant={\"danger\"}\n            className={\"listed-icon list-button\"}\n            onClick={() =>\n            {\n              props.deleteCategory();\n              props.setDeleteMode(false);\n            }}>\n      Yes\n    </Button>\n    <Button variant={\"secondary\"} className={\"listed-icon\"} onClick={() =>\n    {\n      props.setDeleteMode(false);\n    }}>\n      No\n    </Button>\n  </div>;\n}\n\nfunction EditIcon(props)\n{\n  return <React.Fragment>\n    {\n      !props.editMode &&\n      <PencilSquare className={props.classNames}\n                    onClick={props.onClick} />\n    }\n    {\n      props.editMode &&\n      <Save className={props.classNames}\n            onClick={props.onClick} />\n    }\n  </React.Fragment>;\n}\n\nfunction CategoryHeader(props)\n{\n  \n  const [errors, setErrors] = useState({});\n  const [category, setCategory] = useState();\n  \n  function saveNewCategory()\n  {\n    function onSaveSuccess(category)\n    {\n      props.addToTokenCategoryList(category);\n      setCategory(null);\n      setErrors(null);\n    }\n    \n    function onSaveError(errorResponse)\n    {\n      setErrors(errorResponse);\n    }\n    \n    new TokenCategoryClient().createCategory(category, onSaveSuccess, onSaveError);\n  }\n  \n  return <React.Fragment>\n    <ListGroup.Item variant={\"warning\"}>\n      Categories <PlusLg className={\"add-list-item-icon\"}\n                         onClick={() =>\n                         {\n                           if (!category)\n                           {\n                             setCategory(\"new_category\");\n                           }\n                         }} />\n    </ListGroup.Item>\n    {\n      category &&\n      <ListGroup.Item variant=\"secondary\">\n        <input type={\"text\"}\n               className={\"list-item-input\"}\n               value={category}\n               onChange={e => setCategory(e.target.value)}\n               onKeyUp={e =>\n               {\n                 if (e.key === 'Enter')\n                 {\n                   saveNewCategory();\n                 }\n               }} />\n        <XLg className={\"add-list-item-icon delete-icon edit\"}\n             onClick={() => setCategory(null)} />\n        <Save className={\"add-list-item-icon save-icon listed-icon edit\"}\n              onClick={() => saveNewCategory()} />\n        {\n          errors && errors.detail &&\n          <Alert variant={\"danger\"}>\n            <Form.Text>\n              <GoFlame /> {errors.detail}\n            </Form.Text>\n          </Alert>\n        }\n      </ListGroup.Item>\n    }\n  </React.Fragment>;\n}\n","import React, {useState} from \"react\";\nimport {Button, Col, Container, FormLabel, Row} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {downloadBase64Data} from \"../services/utils\";\n\nexport function FileParser(props) {\n\n    const [b64Data, setB64Data] = useState(\"\");\n    // drag state\n    const [dragActive, setDragActive] = React.useState(false);\n\n    // handle drag events\n    const handleDrag = function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.type === \"dragenter\" || e.type === \"dragover\") {\n            setDragActive(true);\n        } else if (e.type === \"dragleave\") {\n            setDragActive(false);\n        }\n    };\n\n\n    function downloadB64AsFile() {\n        downloadBase64Data(b64Data, \"file\", \"\");\n    }\n\n    return <React.Fragment>\n        <Container>\n            <Row>\n                <Col>\n                    <FormLabel>\n                        Enter a base64 encoded file and click on parse to file to download it as file\n                    </FormLabel>\n                    <Form.Control id={\"file-b64-input\"} as={\"textarea\"}\n                                  onDragEnter={handleDrag}\n                                  className={dragActive ? \"drag-active\" : \"\"}\n                                  onChange={e => setB64Data(e.target.value)} />\n                    <Button onClick={downloadB64AsFile}>\n                        parse to file\n                    </Button>\n                </Col>\n            </Row>\n        </Container>\n    </React.Fragment>\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport {LinkContainer} from 'react-router-bootstrap'\nimport SystemOverview from \"./admin/system/system-overview\";\nimport ScimClient from \"./scim/scim-client\";\nimport OpenidProvider from \"./openid/openid-provider\";\nimport JwtHandler from \"./jwt/jwt-handler\";\nimport OpenidClients from \"./openid/openid-clients\";\nimport OpenidClientOverview from \"./openid/openid-client-overview\";\nimport {AlertListMessages} from \"./base/form-base\";\nimport {GoFlame} from \"react-icons/go\";\nimport {TokenCategoryList} from \"./tokens/token-category\";\nimport {APP_INFO_ENDPOINT, SERVICE_PROVIDER_CONFIG_ENDPOINT} from \"./scim/scim-constants\";\nimport {FileParser} from \"./file-parser/file-parser\";\n\n\nexport const ApplicationInfoContext = React.createContext(null);\nexport const ScimServiceProviderContext = React.createContext(null);\n\nclass Application extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            serviceProviderConfig: {\n                bulk: {\n                    maxOperations: 5,\n                    maxPayloadSize: 2097152\n                },\n                filter: {\n                    maxResults: 5\n                }\n            }\n        }\n        this.setState = this.setState.bind(this);\n    }\n\n    async componentDidMount() {\n        let scimClient = new ScimClient(SERVICE_PROVIDER_CONFIG_ENDPOINT, this.setState);\n        scimClient.listResources().then(response => {\n            if (response.success) {\n                response.resource.then(serviceProviderConfig => {\n                    this.setState({serviceProviderConfig: serviceProviderConfig});\n                })\n            }\n        })\n\n        scimClient.getResource(null, APP_INFO_ENDPOINT).then(response => {\n            if (response.success) {\n                response.resource.then(appInfo => {\n                    this.setState({appInfo: appInfo});\n                })\n            }\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Router>\n                    <Navbar collapseOnSelect expand=\"lg\" bg=\"navigation\">\n                        <Container>\n                            <Navbar.Brand href=\"#home\">Captain Goldfish's Rest Client</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                                <Nav className=\"me-auto\" />\n                                <Nav>\n                                    <Nav.Link href=\"#\">\n                                        <img src={logo} className=\"react-logo\" alt=\"logo\" />\n                                    </Nav.Link>\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Container>\n                    </Navbar>\n\n                    <Navbar bg=\"navigation-left\" className={\"navbar-left\"} expand=\"md\" variant=\"dark\">\n                        <Navbar.Collapse>\n\n                            <Nav className=\"flex-column\">\n                                <LinkContainer exact to=\"/views/openIdProvider\">\n                                    <Nav.Link>OpenID</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/jwts\">\n                                    <Nav.Link>JWTs</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/tokenCategories\">\n                                    <Nav.Link>Storage</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/fileParser\">\n                                    <Nav.Link>File Parser</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer exact to=\"/views/system\">\n                                    <Nav.Link>System</Nav.Link>\n                                </LinkContainer>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n\n                    <div className=\"main\">\n                        <AlertListMessages variant={\"danger\"}\n                                           icon={<GoFlame />}\n                                           messages={(this.state.errors || {}).errorMessages} />\n\n                        <ApplicationInfoContext.Provider value={this.state.appInfo}>\n                            <ScimServiceProviderContext.Provider value={this.state.serviceProviderConfig}>\n                                {/* A <Switch> looks through its children <Route>s and\n                                 renders the first one that matches the current URL. */}\n                                <Switch>\n                                    <Route path=\"/views/system\">\n                                        <SystemOverview />\n                                    </Route>\n                                    <Route path={\"/views/openIdProvider/:providerId/client/:clientId\"}\n                                           component={OpenidClientOverview} />\n                                    <Route path={\"/views/openIdProvider/:id/openIdClients\"}\n                                           render={route => {\n                                               return <OpenidClients match={route.match}\n                                                                     serviceProviderConfig={this.state.serviceProviderConfig} />\n                                           }} />\n                                    <Route path=\"/views/openIdProvider\">\n                                        <OpenidProvider serviceProviderConfig={this.state.serviceProviderConfig} />\n                                    </Route>\n                                    <Route path=\"/views/jwts\">\n                                        <JwtHandler />\n                                    </Route>\n                                    <Route path=\"/views/tokenCategories\">\n                                        <TokenCategoryList />\n                                    </Route>\n                                    <Route path=\"/views/fileParser\">\n                                        <FileParser />\n                                    </Route>\n                                    <Route path=\"/\">\n                                        <Redirect to=\"/views/jwts\" />\n                                    </Route>\n                                </Switch>\n                            </ScimServiceProviderContext.Provider>\n                        </ApplicationInfoContext.Provider>\n                    </div>\n                </Router>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default Application;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport reportWebVitals from './reportWebVitals';\nimport Application from \"./app\";\n\nReactDOM.render(\n    <Application />\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {Optional, toBase64} from \"../services/utils\";\nimport * as lodash from \"lodash\";\n\nexport default class ScimClient {\n\n    constructor(resourcePath, setState) {\n        this.resourcePath = resourcePath;\n        this.setState = setState;\n        this.resetErrors = this.resetErrors.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.createResource = this.createResource.bind(this);\n        this.getErrors = this.getErrors.bind(this);\n        this.isLoading = this.isLoading.bind(this);\n        this.parseErrorResponse = this.parseErrorResponse.bind(this);\n    }\n\n    isLoading(value) {\n        this.setState({isLoading: value});\n    }\n\n    resetErrors() {\n        this.setState({errors: {}});\n    }\n\n    handleError(jsonPromise) {\n        jsonPromise.then(errorResponse => {\n            let errors = {};\n            if (errorResponse.errors === undefined) {\n                errors.errorMessages = new Optional(errors.errorMessages).orElse([]);\n                if (errorResponse.detail === undefined) {\n                    errors.errorMessages.push(JSON.stringify(errorResponse));\n                } else {\n                    errors.errorMessages.push(errorResponse.detail);\n                }\n            } else {\n                errors = errorResponse.errors;\n            }\n            new Optional(this.setState).ifPresent(method => method({errors: errors}));\n        })\n    }\n\n    async createResource(resource) {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath, {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(resource)\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 201) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async getResource(id, resourcePath, params) {\n        this.isLoading(true);\n        this.resetErrors();\n\n        let path = new Optional(resourcePath).orElse(this.resourcePath);\n\n        let searchParams = new Optional(params).map(parameters => \"?\" + new URLSearchParams(parameters).toString())\n            .orElse(\"\");\n        let url = path + new Optional(id).map(val => \"/\" + encodeURIComponent(val)).orElse(\"\") + searchParams;\n\n        return await fetch(url, {\n            method: \"GET\"\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    listResources({startIndex, count, filter, sortBy, sortOrder, attributes, excludedAttributes} = {}) {\n        this.isLoading(true);\n        this.resetErrors();\n        let startIndexParam = new Optional(startIndex).map(val => \"startIndex=\" + val).orElse(null);\n        let countParam = new Optional(count).map(val => \"count=\" + val).orElse(null);\n        let filterParam = new Optional(filter).map(val => \"filter=\" + encodeURI(val)).orElse(null);\n        let sortByParam = new Optional(sortBy).map(val => \"sortBy=\" + encodeURI(val)).orElse(null);\n        let sortOrderParam = new Optional(sortOrder).map(val => \"sortOrder=\" + val).orElse(null);\n        let attributesParam = new Optional(attributes).map(val => \"attributes=\" + encodeURI(val)).orElse(null);\n        let excludedAttributesParam = new Optional(excludedAttributes).map(\n            val => \"excludedAttributes=\" + encodeURI(val)).orElse(null);\n\n        let query = Array.of(startIndexParam, countParam, filterParam, sortByParam, sortOrderParam, attributesParam,\n            excludedAttributesParam)\n            .filter(val => val != null)\n            .join(\"&\");\n\n        query = new Optional(query).filter(val => val.length > 0).map(val => \"?\" + val).orElse(\"\");\n\n        let requestUrl = this.resourcePath + query;\n\n        return fetch(requestUrl, {\n            method: \"GET\"\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                }\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    listResourcesWithPost(searchRequest, onSuccess, onError) {\n        let requestUrl = this.resourcePath + \"/.search\";\n\n        return fetch(requestUrl, {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(searchRequest)\n        }).then(response => {\n            if (response.status === 200) {\n                response.json().then(resource => {\n                    onSuccess(resource);\n                })\n            } else {\n                response.text().then(errorResponse => {\n                    onError(this.parseErrorResponse(errorResponse));\n                })\n            }\n        })\n    }\n\n    async updateResource(resource, id) {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"PUT\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(resource)\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    async patchResource(patchBody, id) {\n        this.isLoading(true);\n        this.resetErrors();\n        return await fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"PATCH\",\n            headers: {'Content-Type': 'application/scim+json'},\n            body: JSON.stringify(patchBody)\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 200) {\n                return {\n                    success: true,\n                    status: response.status,\n                    resource: response.json()\n                };\n            } else {\n                let tmpResponse = {\n                    success: false,\n                    status: response.status,\n                    resource: response.json()\n                }\n                this.handleError(tmpResponse.resource);\n                return tmpResponse;\n            }\n        })\n    }\n\n    deleteResource(id) {\n        this.isLoading(true);\n        this.resetErrors();\n        return fetch(this.resourcePath + \"/\" + encodeURIComponent(id), {\n            method: \"DELETE\"\n        }).then(response => {\n            this.isLoading(false);\n            if (response.status === 204) {\n                return {\n                    success: true,\n                    status: response.status\n                };\n            } else {\n                this.handleError(response.json());\n                return {\n                    success: false,\n                    status: response.status\n                }\n            }\n        })\n    }\n    \n    /**\n     * accesses the the form-reference with name \"this.formReference\" reads its input and select fields and builds a\n     * scim resource from it that will be used in the following request\n     */\n    async getResourceFromFormReference(formReference) {\n        let scimResource = {};\n\n        let handleInputField = async function (inputfield) {\n            let name = inputfield.name;\n            let inputFieldValue;\n            if (inputfield.type === 'file') {\n                if (inputfield.files !== undefined && inputfield.files.length === 1) {\n                    inputFieldValue = await toBase64(inputfield.files[0]);\n                } else {\n                    inputFieldValue = undefined;\n                }\n            } else if (inputfield.type === 'number') {\n                inputFieldValue = inputfield.valueAsNumber;\n            } else if (inputfield.type === 'checkbox') {\n                inputFieldValue = inputfield.checked;\n            } else if (inputfield.type === 'radio') {\n                if (inputfield.checked) {\n                    inputFieldValue = inputfield.value;\n                } else {\n                    inputFieldValue = scimResource[name];\n                }\n            } else {\n                let val = lodash.trim(inputfield.value);\n                if (lodash.isEmpty(val)) {\n                    val = undefined;\n                }\n                inputFieldValue = val;\n            }\n            lodash.set(scimResource, name, inputFieldValue);\n        };\n\n        let formInputFields = Array.from(formReference.current.getElementsByTagName('input'));\n        let textAreaFields = Array.from(formReference.current.getElementsByTagName('textarea'));\n        let formSelectFields = Array.from(formReference.current.getElementsByTagName('select'));\n        let allFormFields = formInputFields.concat(formSelectFields).concat(textAreaFields);\n\n        for (let inputField of allFormFields) {\n            await handleInputField(inputField);\n        }\n\n        return scimResource;\n    }\n\n    getErrors(state, fieldName) {\n        return new Optional(state).map(val => val.errors)\n            .map(val => val.fieldErrors)\n            .map(fieldErrors => fieldErrors[fieldName])\n            .orElse([]);\n    }\n\n    parseErrorResponse(errorResponse) {\n        try {\n            return JSON.parse(errorResponse);\n        } catch (e) {\n            return {detail: errorResponse};\n        }\n    }\n}\n\n\n","export const CERT_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:CertificateInfo\";\nexport const CURRENT_WORKFLOW_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:CurrentWorkflowSettings\";\nexport const TOKEN_CATEGORY_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:TokenCategory\";\nexport const TOKEN_STORE_URI = \"urn:ietf:params:scim:schemas:captaingoldfish:2.0:TokenStore\";\nexport const SEARCH_REQUEST_URI = \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\";\nexport const BULK_REQUEST_URI = \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\";\n\nconst BASE_URL = \"/scim/v2\";\nexport const ACCESS_TOKEN_REQUEST_ENDPOINT = BASE_URL + \"/AccessTokenRequest\";\nexport const APP_INFO_ENDPOINT = BASE_URL + \"/AppInfo\";\nexport const SERVICE_PROVIDER_CONFIG_ENDPOINT = BASE_URL + \"/ServiceProviderConfig\";\nexport const AUTH_CODE_GRANT_ENDPOINT = BASE_URL + \"/AuthCodeGrantRequest\";\nexport const HTTP_CLIENT_SETTINGS_ENDPOINT = BASE_URL + \"/HttpClientSettings\";\nexport const JWT_BUILDER_ENDPOINT = BASE_URL + \"/JwtBuilder\";\nexport const KEYSTORE_ENDPOINT = BASE_URL + \"/Keystore\";\nexport const OPENID_CLIENT_ENDPOINT = BASE_URL + \"/OpenIdClient\";\nexport const OPENID_PROVIDER_ENDPOINT = BASE_URL + \"/OpenIdProvider\";\nexport const PROXY_ENDPOINT = BASE_URL + \"/Proxy\";\nexport const TRUSTSTORE_ENDPOINT = BASE_URL + \"/Truststore\";\nexport const CURRENT_WORKFLOW_SETTINGS_ENDPOINT = BASE_URL + \"/CurrentWorkflowSettings\";\nexport const TOKEN_CATEGORY_ENDPOINT = BASE_URL + \"/TokenCategory\";\nexport const TOKEN_STORE_ENDPOINT = BASE_URL + \"/TokenStore\";\nexport const BULK_ENDPOINT = BASE_URL + \"/Bulk\";\n","export function toBase64(file)\n{\n    return new Promise((resolve, reject) =>\n    {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () =>\n        {\n            let encoded = reader.result.toString().replace(/^data:(.*,)?/, '');\n            if ((encoded.length % 4) > 0)\n            {\n                encoded += '='.repeat(4 - (encoded.length % 4));\n            }\n            resolve(encoded);\n        };\n        reader.onerror = error => reject(error);\n    });\n}\n\nexport function downloadBase64Data(base64Data, filename, filetype)\n{\n    let decoded = window.atob(base64Data);\n    var len = decoded.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++)\n    {\n        bytes[i] = decoded.charCodeAt(i);\n    }\n    let file = new Blob([bytes.buffer], {type: filetype});\n    let downloadAnchor = document.createElement(\"a\");\n    let url = URL.createObjectURL(file);\n    downloadAnchor.href = url;\n    downloadAnchor.download = filename;\n    downloadAnchor.click();\n    setTimeout(function ()\n    {\n        window.URL.revokeObjectURL(url);\n    }, 0);\n}\n\nexport function parseJws(token)\n{\n    if (typeof token !== 'string')\n    {\n        return null;\n    }\n    let jws = token.split('.');\n    if (jws.length !== 3)\n    {\n        return null;\n    }\n\n    function decode(content)\n    {\n        let base64 = content.replace(/-/g, '+').replace(/_/g, '/');\n        return decodeURIComponent(Buffer.from(base64, \"base64\").toString().split('').map(function (c)\n        {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    let header = decode(jws[0]);\n    let payload = decode(jws[1]);\n    let signature = jws[2];\n    return {\n        header: header,\n        payload: payload,\n        signature: signature\n    };\n}\n\nexport class Optional\n{\n    constructor(value)\n    {\n        this.value = value;\n    }\n\n    get()\n    {\n        return this.value;\n    }\n\n    isPresent()\n    {\n        return this.value !== undefined && this.value !== null;\n    }\n\n    ifPresent(handler)\n    {\n        if (this.isPresent())\n        {\n            handler(this.value);\n        }\n        return this;\n    }\n\n    ifNotPresent(handler)\n    {\n        if (!this.isPresent())\n        {\n            handler();\n        }\n        return this;\n    }\n\n    isEmpty()\n    {\n        return this.value === undefined || this.value === null;\n    }\n\n    filter(handler)\n    {\n        if (this.isPresent() && !handler(this.value))\n        {\n            this.value = null;\n        }\n        return this;\n    }\n\n    map(handler)\n    {\n        if (this.isPresent())\n        {\n            this.value = handler(this.value);\n        }\n        return this;\n    }\n\n    do(handler)\n    {\n        if (this.isPresent())\n        {\n            handler(this.value);\n        }\n        return this;\n    }\n\n    orElse(defaultValue)\n    {\n        if (this.isPresent())\n        {\n            return this.value;\n        }\n        else\n        {\n            return defaultValue;\n        }\n    }\n}\n","import {Optional} from \"../services/utils\";\nimport * as lodash from \"lodash\";\n\nexport default class ScimComponentBasics\n{\n    constructor({\n                    scimClient,\n                    formReference,\n                    getOriginalResource,\n                    getCurrentResource,\n                    setCurrentResource,\n                    setState,\n                    onCreateSuccess,\n                    onUpdateSuccess,\n                    onDeleteSuccess\n                } = {})\n    {\n        this.scimClient = scimClient;\n        this.formReference = formReference;\n        this.getOriginalResource = getOriginalResource;\n        this.getCurrentResource = getCurrentResource;\n        this.setCurrentResource = setCurrentResource;\n        this.setState = setState;\n        this.onCreateSuccess = onCreateSuccess;\n        this.onUpdateSuccess = onUpdateSuccess;\n        this.onDeleteSuccess = onDeleteSuccess;\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.createResource = this.createResource.bind(this);\n        this.updateResource = this.updateResource.bind(this);\n        this.deleteResource = this.deleteResource.bind(this);\n        this.setStateValue = this.setStateValue.bind(this);\n        this.resetEditMode = this.resetEditMode.bind(this);\n        this.updateInput = this.updateInput.bind(this);\n    }\n\n    onSubmit(e)\n    {\n        e.preventDefault();\n        if (new Optional(this.getCurrentResource().id).isPresent())\n        {\n            this.updateResource();\n        }\n        else\n        {\n            this.createResource();\n        }\n    }\n\n    async createResource()\n    {\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.createResource(resource);\n        this.handleCreateOrUpdateResponse(response, this.onCreateSuccess);\n    }\n\n    async updateResource()\n    {\n        let resource = await this.scimClient.getResourceFromFormReference(this.formReference);\n        let response = await this.scimClient.updateResource(resource, this.getOriginalResource().id);\n        this.handleCreateOrUpdateResponse(response, this.onUpdateSuccess);\n    }\n\n    handleCreateOrUpdateResponse(response, callback)\n    {\n        if (response.success)\n        {\n            response.resource.then(resource =>\n            {\n                this.setCurrentResource(resource);\n                this.setState({\n                    editMode: false,\n                    success: true\n                });\n                callback(resource);\n            })\n        }\n        else\n        {\n            response.resource.then(resource =>\n            {\n                this.setState({\n                    errors: {\n                        errorMessages: [resource.detail]\n                    }\n                });\n            })\n        }\n    }\n\n    deleteResource()\n    {\n        new Optional(this.getCurrentResource().id).ifNotPresent(id =>\n        {\n            this.onDeleteSuccess(undefined);\n        }).ifPresent(async id =>\n        {\n            await this.scimClient.deleteResource(id);\n            this.onDeleteSuccess(id);\n        })\n    }\n\n    setStateValue(name, value)\n    {\n        this.setState({\n            [name]: value,\n            success: false\n        });\n    }\n\n    resetEditMode()\n    {\n        let copiedResource = JSON.parse(JSON.stringify(this.getOriginalResource()))\n        this.setCurrentResource(copiedResource);\n        this.setState({\n            editMode: false,\n            success: false\n        });\n    }\n\n    updateInput(fieldname, value)\n    {\n        let object = this.getCurrentResource();\n        object = lodash.set(object, fieldname, value);\n        this.setCurrentResource(object);\n        this.setState({\n            success: false\n        });\n    }\n} ","import React, {useEffect, useState} from \"react\";\nimport bsCustomFileInput from \"bs-custom-file-input\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Optional} from \"../services/utils\";\nimport {GoFlame} from \"react-icons/go\";\nimport {Alert, Button, Card, Collapse, Spinner} from \"react-bootstrap\";\nimport {\n  CaretDown,\n  CaretRight,\n  ExclamationLg,\n  PencilSquare,\n  PlusSquare,\n  Save,\n  TrashFill,\n  XLg,\n  XSquare\n} from \"react-bootstrap-icons\";\nimport {CardInputField} from \"./card-base\";\n\n/**\n * a simple input field that might also display error messages directly bound to this input field\n */\nexport function FormInputField(props)\n{\n  \n  let controlId = props.id || props.name;\n  let label = new Optional(props.label).map(label => <Form.Label column sm={2}>{label}</Form.Label>);\n  let inputFieldType = props.type === undefined ? \"text\" : props.type;\n  let inputFieldName = props.name;\n  let inputFieldPlaceholder = props.placeholder === undefined ? props.name : props.placeholder;\n  let inputFieldErrorMessages = props.onError(props.name);\n  let isDisabled = props.disabled === true;\n  let isReadOnly = props.readOnly === true;\n  let isHidden = props.type === \"hidden\" || props.isHidden;\n  let as = new Optional(props.as).orElse(\"input\");\n  \n  let sm = new Optional(props.sm).orElse(label.isPresent() ? 10 : 12);\n  return (\n    <Form.Group as={Row} controlId={controlId} style={{display: isHidden ? \"none\" : \"\"}}>\n      {label.get()}\n      <Col sm={sm}>\n        <Form.Control type={inputFieldType}\n                      as={as}\n                      name={inputFieldName}\n                      className={props.className}\n                      disabled={isDisabled}\n                      readOnly={isReadOnly}\n                      placeholder={inputFieldPlaceholder}\n                      onChange={props.onChange}\n                      value={props.value} />\n        \n        {\n          props.children\n        }\n        \n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * a simple input field that might also display error messages directly bound to this input field\n */\nexport class FormCheckbox extends React.Component\n{\n  \n  render()\n  {\n    let controlId = new Optional(this.props.id).orElse(this.props.name);\n    let label = new Optional(this.props.label).map(label => <Form.Label column sm={2}>{label}</Form.Label>);\n    let inputFieldName = this.props.name;\n    let inputFieldErrorMessages = this.props.onError(this.props.name);\n    let isHidden = this.props.type === \"hidden\";\n    let isReadOnly = this.props.readOnly === true;\n    let checked = new Optional(this.props.checked).orElse(false);\n    \n    let sm = new Optional(this.props.sm).orElse(label.isPresent() ? 10 : 12);\n    return (\n      <Form.Group as={Row} style={{display: isHidden ? \"none\" : \"\"}}>\n        {label.get()}\n        <Col sm={sm} style={{alignSelf: \"center\"}}>\n          <Form.Check id={controlId}\n                      name={inputFieldName}\n                      readOnly={isReadOnly}\n                      type=\"switch\"\n                      onChange={this.props.onChange}\n                      checked={checked} />\n          \n          <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                            fieldErrors={inputFieldErrorMessages} />\n        </Col>\n      </Form.Group>\n    );\n  }\n}\n\n/**\n * a select input field that might also display error messages directly bound to this input field\n */\nexport class FormSelectField extends React.Component\n{\n  \n  render()\n  {\n    let labelText = this.props.label === undefined ? this.props.name : this.props.label;\n    let inputFieldErrorMessages = this.props.onError(this.props.name);\n    \n    let inputFieldOptions = new Optional(this.props.options).map(options =>\n                                                                 {\n                                                                   return options.map((value) =>\n                                                                                      {\n                                                                                        return <option\n                                                                                          key={value}>{value}</option>;\n                                                                                      });\n                                                                 })\n                                                            .orElse([]);\n    \n    return (\n      <Form.Group as={Row} controlId={this.props.name}>\n        <Form.Label column sm={2}>\n          {labelText}\n        </Form.Label>\n        <Col sm={10}>\n          <Form.Control as=\"select\"\n                        name={this.props.name}>\n            {inputFieldOptions}\n          </Form.Control>\n          \n          <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                            fieldErrors={inputFieldErrorMessages} />\n        </Col>\n      </Form.Group>\n    );\n  }\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormFileField(props)\n{\n  \n  useEffect(() =>\n            {\n              bsCustomFileInput.init();\n              return () =>\n              {\n                bsCustomFileInput.destroy();\n              };\n            }, [] /* do this only once */);\n  \n  let labelText = props.label === undefined ? props.name : props.label;\n  let inputFieldErrorMessages = props.onError(props.name);\n  \n  return (\n    <Form.Group as={Row} controlId={props.name}>\n      <Form.Label column sm={2}>{labelText}</Form.Label>\n      <Col sm={10}>\n        <Form.Control type={\"file\"} name={props.name} />\n        \n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormObjectList(props)\n{\n  \n  let labelText = props.label === undefined ? props.name : props.label;\n  let inputFieldErrorMessages = props.onError(props.name);\n  \n  return (\n    <Form.Group as={Row} controlId={props.name}>\n      <Form.Label column sm={2}>{labelText}</Form.Label>\n      <Col sm={10}>\n        <Form.Control as=\"select\"\n                      size=\"sm\"\n                      type={\"number\"}\n                      custom\n                      name={props.name}\n                      onChange={props.onChange}\n                      value={props.selected}>\n          {\n            props.selections.map((value, index) =>\n                                 {\n                                   return (\n                                     <option key={index}\n                                             value={value.id}\n                                             defaultValue={props.selected === value}>\n                                       {value.value}\n                                     </option>\n                                   );\n                                 })\n          }\n        </Form.Control>\n        \n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * a file-input field that might also display error messages directly bound to this input field\n */\nexport function FormRadioSelection(props)\n{\n  \n  let labelText = props.label === undefined ? props.name : props.label;\n  let displayType = new Optional(props.displayType).orElse(\"vertical\");\n  let displayClass = displayType === \"vertical\" ? \"block\" : \"inline\";\n  let inputFieldErrorMessages = props.onError(props.name);\n  \n  return (\n    <Form.Group as={Row} controlId={props.name}>\n      <Form.Label column sm={2}>{labelText}</Form.Label>\n      <Col sm={10} style={{alignSelf: \"center\"}}>\n        {\n          props.selections.map((object, index) =>\n                               {\n                                 return <Form.Check key={index}\n                                                    style={{\n                                                      display: displayClass,\n                                                      marginRight: \"45px\"\n                                                    }}\n                                                    type=\"radio\"\n                                                    label={object.display}\n                                                    value={object.value}\n                                                    name={props.name}\n                                                    checked={props.selected === object.value}\n                                                    onChange={props.onChange}\n                                                    id={props.name + \"-\" + object.value}\n                                 />;\n                               })\n        }\n        <ErrorMessageList controlId={props.name + \"-error-list\"}\n                          fieldErrors={inputFieldErrorMessages} />\n      </Col>\n    </Form.Group>\n  );\n}\n\n/**\n * displays error messages for a {@link ConfigPageForm} element\n */\nexport function ErrorMessageList(props)\n{\n  let doNotRenderComponent = new Optional(props.fieldErrors).map(val => false)\n                                                            .orElse(true);\n  \n  if (doNotRenderComponent)\n  {\n    return null;\n  }\n  \n  let backgroundClass = props.backgroundClass === undefined ? \"bg-danger\" : props.backgroundClass;\n  \n  return (\n    <ul id={props.controlId} className=\"error-list\">\n      {props.fieldErrors.map((message, index) =>\n                               <ErrorListItem key={\"error-message-\" + index} backgroundClass={backgroundClass}\n                                              message={message} />)}\n    </ul>\n  );\n}\n\n/**\n * a simple error message for either the {@link ErrorMessageList} or an error that is directly bound to an\n * input field\n */\nexport function ErrorListItem(props)\n{\n  return (\n    <li className=\"error-list-item\">\n      <small className={props.backgroundClass + \" error\"}>\n        <GoFlame /> {props.message}\n      </small>\n    </li>\n  );\n}\n\nexport function AlertListMessages(props)\n{\n  let variant = props.variant || \"info\";\n  let icon = props.icon || <ExclamationLg />;\n  return (\n    <React.Fragment>\n      {\n        (props.messages || []).length > 0 &&\n        <Alert variant={variant}>\n          <ul className=\"error-list\">\n            {\n              props.messages.map((message, index) =>\n                                 {\n                                   return <li key={\"alert-\" + variant + \"-message-\" + index}\n                                              className={\"error-list-item\"}>\n                                     <small className={\"error\"}>\n                                       {icon} {message}\n                                     </small>\n                                   </li>;\n                                 })\n            }\n          </ul>\n        </Alert>\n      }\n    </React.Fragment>\n  );\n}\n\nexport function LoadingSpinner(props)\n{\n  if (props.show)\n  {\n    return (\n      <span style={{marginRight: 5 + 'px'}}>\n              <Spinner animation=\"border\" variant=\"warning\" size=\"sm\" role=\"status\" />\n            </span>\n    );\n  }\n  else\n  {\n    return null;\n  }\n}\n\nexport function ErrorMessagesAlert(props)\n{\n  return (\n    new Optional(props.errors).map(errors => errors.errorMessages)\n                              .filter(messages => messages.length > 0)\n                              .isPresent() &&\n    <Alert id={\"error-messages-alert\"} variant={\"danger\"}\n           show={props.errors.errorMessages !== undefined}>\n      <ErrorMessageList fieldErrors={props.errors.errorMessages} backgroundClass={\"\"} />\n    </Alert>\n  );\n}\n\nexport function CardControlIcons(props)\n{\n  return (\n    <div className=\"card-control-icons\">\n      {props.spinner}\n      {\n        props.editMode &&\n        <React.Fragment>\n          <Save title={\"save\"} id={\"save-icon-\" + props.resource.id}\n                onClick={() =>\n                {\n                  if (props.resource.id === undefined)\n                  {\n                    props.createResource();\n                  }\n                  else\n                  {\n                    props.updateResource(props.resource.id);\n                  }\n                }}\n                style={{marginRight: 5 + 'px'}} />\n          {\n            props.resource.id !== undefined &&\n            <XLg title={\"reset-edit\"} id={\"reset-update-icon-\" + props.resource.id}\n                 onClick={props.resetEditMode} style={{marginRight: 5 + 'px'}} />\n          }\n        </React.Fragment>\n      }\n      {\n        !props.editMode &&\n        <PencilSquare title={\"edit\"} id={\"update-icon-\" + props.resource.id}\n                      onClick={props.edit} style={{marginRight: 5 + 'px'}} />\n      }\n      <TrashFill title={\"delete\"} id={\"delete-icon-\" + props.resource.id}\n                 onClick={props.showModal} />\n    </div>\n  );\n}\n\nexport function CardDateRows(props)\n{\n  return (\n    <React.Fragment>\n      <tr>\n        <th>Created</th>\n        <td className={\"card-value-cell\"}>\n          {\n            new Optional(props.resource).map(val => val.meta)\n                                        .map(\n                                          val => val.created)\n                                        .map(val => new Date(val).toUTCString())\n                                        .orElse(null)\n          }\n        </td>\n      </tr>\n      <tr>\n        <th>LastModified</th>\n        <td className={\"card-value-cell\"}>\n          {\n            new Optional(props.resource).map(val => val.meta)\n                                        .map(\n                                          val => val.lastModified)\n                                        .map(val => new Date(val).toUTCString())\n                                        .orElse(\n                                          null)\n          }\n        </td>\n      </tr>\n    </React.Fragment>\n  );\n}\n\nexport function ModifiableCardEntry(props)\n{\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      {\n        props.editMode &&\n        <CardInputField value={new Optional(props.resourceValue).orElse(\"\")}\n                        id={props.name + \"-\" + props.resourceId}\n                        type={props.type}\n                        name={props.name}\n                        placeholder={props.placeholder}\n                        onChange={props.onChange}\n                        onError={props.onError} />\n      }\n      {\n        !props.editMode &&\n        props.resourceValue\n      }\n    </td>\n  </tr>;\n}\n\nexport function HiddenCardEntry(props)\n{\n  return <tr style={{display: \"none\"}}>\n    <td>\n      <CardInputField value={new Optional(props.value).orElse(\"\")}\n                      id={props.name + \"-\" + props.resourceId}\n                      type={props.type}\n                      name={props.name}\n                      placeholder={props.placeholder}\n                      onChange={props.onChange}\n                      onError={props.onError} />\n    </td>\n  </tr>;\n}\n\nexport function ModifiableCardFileEntry(props)\n{\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      {\n        props.editMode &&\n        <XSquare key={\"remove-key\"} type={\"button\"} className={\"remove-index\"}\n                 onClick={e => props.onRemove(props.name, undefined)} />\n      }\n      <div className={new Optional(props.resourceValue).map(val => \"light-border\")\n                                                       .orElse(\"\")}>\n        {props.resourceValue}\n      </div>\n      {\n        props.editMode &&\n        <CardInputField type={\"file\"}\n                        id={props.name + \"-\" + props.resourceId}\n                        name={props.name}\n                        placeholder={props.placeholder}\n                        onChange={props.onChange}\n                        onError={props.onError} />\n      }\n    </td>\n  </tr>;\n}\n\nexport function CardRadioSelector(props)\n{\n  let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name))\n                                                           .orElse([]);\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      <fieldset>\n        {\n          !props.editMode &&\n          props.selected\n        }\n        {\n          props.editMode &&\n          props.selections.map((value, index) =>\n                               {\n                                 return (\n                                   <Form.Check\n                                     key={index}\n                                     type=\"radio\"\n                                     label={value}\n                                     value={value}\n                                     checked={props.selected === value}\n                                     onChange={props.onChange}\n                                     name={props.name}\n                                     id={props.name + \"-\" + value}\n                                   />\n                                 );\n                               })\n        }\n      </fieldset>\n      <ErrorMessageList controlId={props.name + \"-error-list\"}\n                        fieldErrors={inputFieldErrorMessages} />\n    </td>\n  </tr>;\n}\n\nexport function CardListSelector(props)\n{\n  let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name))\n                                                           .orElse([]);\n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      <fieldset>\n        {\n          !props.editMode &&\n          props.selected\n        }\n        {\n          props.editMode &&\n          <Form.Control as=\"select\"\n                        size=\"sm\"\n                        custom\n                        name={props.name}\n                        id={props.name}\n                        onChange={props.onChange}\n                        value={props.selected}\n          >\n            {\n              props.selections.map((value, index) =>\n                                   {\n                                     return (\n                                       <option key={index}\n                                               defaultValue={props.selected === value}>\n                                         {value}\n                                       </option>\n                                     );\n                                   })\n            }\n          </Form.Control>\n        }\n      </fieldset>\n      <ErrorMessageList controlId={props.name + \"-error-list\"}\n                        fieldErrors={inputFieldErrorMessages} />\n    </td>\n  </tr>;\n}\n\nexport function ModifiableCardList(props)\n{\n  let inputFieldErrorMessages = new Optional(props.onError).map(val => val(props.name))\n                                                           .orElse([]);\n  \n  return <tr>\n    <th>{props.header}</th>\n    <td id={\"card-cell-\" + props.resourceId + \"-\" + props.name} className={\"card-value-cell\"}>\n      {\n        props.editMode &&\n        <React.Fragment>\n          {\n            new Optional(props.resourceValue)\n              .map(endpointArray =>\n                   {\n                     return endpointArray.map((endpoint, index) =>\n                                              {\n                                                return (\n                                                  <div\n                                                    key={props.name + \"-container-\" + props.resourceId + \"-\" + index}>\n                                                    <XSquare key={\"remove-\" + props.resourceId + \"-\" + index}\n                                                             type={\"button\"}\n                                                             className={\"remove-index\"}\n                                                             onClick={e => props.onRemove(index)} />\n                                                    <CardInputField\n                                                      key={props.name + \"-\" + props.resourceId + \"-\" + index}\n                                                      className={\"list-item\"}\n                                                      value={new Optional(endpoint).orElse(\"\")}\n                                                      id={props.name + \"-\" + props.resourceId + \"-\" + index}\n                                                      name={props.name + \"[\" + index + \"]\"}\n                                                      placeholder={props.placeholder}\n                                                      onChange={props.onChange}\n                                                      onError={props.onError} />\n                                                  </div>\n                                                );\n                  \n                                              });\n                   })\n              .orElse([])\n          }\n          <ErrorMessageList controlId={props.name + \"-error-list\"}\n                            fieldErrors={inputFieldErrorMessages} />\n          <Button key={\"add\"} type={\"button\"} className={\"add-item\"} onClick={props.onAdd}>\n            <PlusSquare /> Add new\n          </Button>\n        </React.Fragment>\n      }\n      {\n        !props.editMode &&\n        new Optional(props.resourceValue)\n          .map(endpointArray =>\n               {\n                 return (\n                   <ul>\n                     {\n                       endpointArray.map(endpoint =>\n                                         {\n                                           return (<li key={endpoint}>{endpoint}</li>);\n                                         })\n                     }\n                   </ul>\n                 );\n               })\n          .orElse([])\n      }\n    </td>\n  </tr>;\n}\n\nexport function Collapseable(props)\n{\n  const [open, setOpen] = useState(props.open || false);\n  \n  let variant = props.variant || \"primary\";\n  let headerClass = new Optional(props.headerClass).map(val => \" \" + val)\n                                                   .orElse(\"\");\n  let bodyClass = new Optional(props.bodyClass).map(val => \" \" + val)\n                                               .orElse(\"\");\n  \n  return (\n    <React.Fragment>\n      <Alert className={\"collapse-header\" + headerClass}\n             variant={variant}\n             onClick={() => setOpen(!open)}>\n        {\n          open === true &&\n          <CaretDown />\n        }\n        {\n          open === false &&\n          <CaretRight />\n        }\n        {props.header}\n        {\n          props.remove !== undefined &&\n          <XLg onClick={props.remove} className={\"remove-collapse\"} />\n        }\n      </Alert>\n      <Collapse in={open}>\n        <Card className={bodyClass}>\n          <Card.Body>\n            {props.content()}\n          </Card.Body>\n        </Card>\n      </Collapse>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {Optional} from \"../services/utils\";\nimport {ErrorMessageList} from \"./form-base\";\n\n\nexport class CardInputField extends React.Component\n{\n\n\n    constructor(props)\n    {\n        super(props);\n        this.bubbleEvent = this.bubbleEvent.bind(this);\n    }\n\n    bubbleEvent(e)\n    {\n        this.props.onChange(e.target.name, e.target.value);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevProps.value !== this.props.value)\n        {\n            this.props.onChange(this.props.name, this.props.value);\n        }\n    }\n\n    render()\n    {\n        let controlId = new Optional(this.props.id).orElse(this.props.name);\n        let inputFieldType = this.props.type === undefined ? \"text\" : this.props.type;\n        let inputFieldName = this.props.name;\n        let inputFieldPlaceholder = this.props.placeholder === undefined ? this.props.name : this.props.placeholder;\n        let inputFieldErrorMessages = new Optional(this.props.onError).map(val => val(this.props.name)).orElse([]);\n        let isDisabled = this.props.disabled === true;\n        let isReadOnly = this.props.readOnly === true;\n\n        return (\n            <React.Fragment>\n                <Form.Control id={controlId}\n                              className={\"card-input-field \" + new Optional(this.props.className).orElse(\"\")}\n                              type={inputFieldType}\n                              name={inputFieldName}\n                              disabled={isDisabled}\n                              readOnly={isReadOnly}\n                              placeholder={inputFieldPlaceholder}\n                              onChange={this.bubbleEvent}\n                              value={this.props.value} />\n                <ErrorMessageList controlId={this.props.name + \"-error-list\"}\n                                  fieldErrors={inputFieldErrorMessages} />\n            </React.Fragment>\n        )\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/media/secure-download-icon.1c809bbb.png\";"],"sourceRoot":""}