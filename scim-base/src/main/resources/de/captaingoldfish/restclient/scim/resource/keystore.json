{
  "schemas": [
    "urn:ietf:params:scim:schemas:core:2.0:Schema"
  ],
  "id": "urn:ietf:params:scim:schemas:captaingoldfish:2.0:Keystore",
  "name": "Keystore",
  "description": "Structure to load and modify the application keystore. The entries can be used to encrypt, sign or for TLS client authentication",
  "attributes": [
    {
      "name": "id",
      "type": "string",
      "description": "Unique identifier for the SCIM Resource as defined by the Service Provider.",
      "mutability": "readOnly",
      "returned": "always",
      "uniqueness": "server",
      "multiValued": false,
      "required": true,
      "caseExact": true
    },
    {
      "name": "applicationKeystore",
      "type": "string",
      "description": "A base64 encoded representation of the application keystore that is only returned if directly requested",
      "mutability": "readOnly",
      "returned": "request",
      "uniqueness": "server",
      "multiValued": false,
      "required": false,
      "caseExact": false
    },
    {
      "name": "keyInfos",
      "type": "complex",
      "description": "A list of all key entries with some minor infos that are present within this keystore.",
      "mutability": "readOnly",
      "returned": "default",
      "uniqueness": "server",
      "multiValued": true,
      "required": false,
      "caseExact": true,
      "subAttributes": [
        {
          "name": "alias",
          "type": "string",
          "description": "The alias under which this specific key is stored.",
          "mutability": "readOnly",
          "returned": "always",
          "uniqueness": "server",
          "multiValued": false,
          "required": true,
          "caseExact": true
        },
        {
          "name": "keyAlgorithm",
          "type": "string",
          "description": "The key algorithm of this key.",
          "mutability": "readOnly",
          "returned": "always",
          "uniqueness": "server",
          "multiValued": false,
          "required": true,
          "caseExact": false
        },
        {
          "name": "keyLength",
          "type": "integer",
          "description": "The key length of this key entry.",
          "mutability": "readOnly",
          "returned": "always",
          "uniqueness": "server",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "hasPrivateKey",
          "type": "boolean",
          "description": "If this entry has also a private key entry or a certificate only.",
          "mutability": "readOnly",
          "returned": "always",
          "uniqueness": "server",
          "multiValued": false,
          "required": true,
          "caseExact": false
        }
      ]
    },
    {
      "name": "fileUpload",
      "type": "complex",
      "description": "Used to upload an existing keystore that will be merged with the application keystore.",
      "mutability": "writeOnly",
      "returned": "never",
      "uniqueness": "none",
      "multiValued": false,
      "required": false,
      "caseExact": false,
      "subAttributes": [
        {
          "name": "keystorePassword",
          "type": "string",
          "description": "The password to access the keystore",
          "mutability": "writeOnly",
          "returned": "never",
          "uniqueness": "none",
          "multiValued": false,
          "required": true,
          "caseExact": false,
          "minLength": 1,
          "maxLength": 255
        },
        {
          "name": "keystoreFileName",
          "type": "string",
          "description": "The name of the file that is only needed to determine the type of keystore to resolve by its file extension. If missing the JKS keystore type is expected",
          "mutability": "writeOnly",
          "returned": "never",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "keystoreFile",
          "type": "string",
          "description": "The keystore file that is being uploaded",
          "mutability": "writeOnly",
          "returned": "never",
          "uniqueness": "none",
          "multiValued": false,
          "required": true,
          "caseExact": false
        }
      ]
    },
    {
      "name": "aliasSelection",
      "type": "complex",
      "description": "If a keystore was uploaded the user will be able to select an alias of the keystore that should be merged into the application keystore. This complex type represents both the response that shows the user what can be merged into the application keystore and the request that tells the application what the user wants to merge into the application keystore.",
      "mutability": "readWrite",
      "returned": "default",
      "uniqueness": "none",
      "multiValued": false,
      "required": false,
      "caseExact": false,
      "subAttributes": [
        {
          "name": "stateId",
          "type": "string",
          "description": "An identifier to find the previously uploaded keystore. After an upload of a keystore the user can choose which entry to merge into the application keystore. But to find the keystore when requesting this stateId is necessary.",
          "mutability": "readWrite",
          "returned": "default",
          "uniqueness": "server",
          "multiValued": false,
          "required": true,
          "caseExact": false,
          "minLength": 1
        },
        {
          "name": "aliases",
          "type": "string",
          "description": "In a request this array must hold only a single entry which represents the entry to be merged into the application keystore. In a response this array holds all aliases that are present within the uploaded keystore.",
          "mutability": "readWrite",
          "returned": "default",
          "uniqueness": "server",
          "multiValued": true,
          "required": true,
          "caseExact": false,
          "minItems": 0,
          "minLength": 1,
          "maxLength": 64
        },
        {
          "name": "aliasOverride",
          "type": "string",
          "description": "Normally the alias that should be merged into the application keystore will be kept from the original keystore. If this is not wanted this attribute can be used to define an alias alternative. This might be useful if the alias that should be merged is already present within the application keystore.",
          "mutability": "writeOnly",
          "returned": "never",
          "uniqueness": "server",
          "multiValued": false,
          "required": false,
          "caseExact": false,
          "minLength": 1,
          "maxLength": 64
        },
        {
          "name": "privateKeyPassword",
          "type": "string",
          "description": "If the private key uses a different password than the keystore, the user can set the private key password to access the key. If this field is missing in the request the application will assume that the keystore password itself must be used to access the private key.",
          "mutability": "writeOnly",
          "returned": "never",
          "uniqueness": "server",
          "multiValued": false,
          "required": false,
          "caseExact": false,
          "maxLength": 255
        }
      ]
    }
  ],
  "meta": {
    "resourceType": "Schema",
    "created": "2021-04-88T22:51:00+02:00",
    "lastModified": "2021-04-88T22:51:00+02:00",
    "location": "/Schemas/Keystore"
  }
}